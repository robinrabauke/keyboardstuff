   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.suspend_idle,"ax",@progbits
  11               	.global	suspend_idle
  13               	suspend_idle:
  14               	.LVL0:
  15               	.LFB108:
  16               		.file 1 "tmk_core/common/avr/suspend.c"
   1:tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:tmk_core/common/avr/suspend.c **** #include "action.h"
   7:tmk_core/common/avr/suspend.c **** #include "backlight.h"
   8:tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   9:tmk_core/common/avr/suspend.c **** #include "suspend.h"
  10:tmk_core/common/avr/suspend.c **** #include "timer.h"
  11:tmk_core/common/avr/suspend.c **** #include "led.h"
  12:tmk_core/common/avr/suspend.c **** #include "host.h"
  13:tmk_core/common/avr/suspend.c **** #include "rgblight_reconfig.h"
  14:tmk_core/common/avr/suspend.c **** 
  15:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  16:tmk_core/common/avr/suspend.c **** 	#include "lufa.h"
  17:tmk_core/common/avr/suspend.c **** #endif
  18:tmk_core/common/avr/suspend.c **** 
  19:tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
  20:tmk_core/common/avr/suspend.c ****     #include "audio.h"
  21:tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
  22:tmk_core/common/avr/suspend.c **** 
  23:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
  24:tmk_core/common/avr/suspend.c ****   #include "rgblight.h"
  25:tmk_core/common/avr/suspend.c ****   extern rgblight_config_t rgblight_config;
  26:tmk_core/common/avr/suspend.c ****   static bool rgblight_enabled;
  27:tmk_core/common/avr/suspend.c ****   static bool is_suspended;
  28:tmk_core/common/avr/suspend.c **** #endif
  29:tmk_core/common/avr/suspend.c **** 
  30:tmk_core/common/avr/suspend.c **** 
  31:tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value)   \
  32:tmk_core/common/avr/suspend.c **** __asm__ __volatile__ (  \
  33:tmk_core/common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t"    \
  34:tmk_core/common/avr/suspend.c ****     "cli" "\n\t"    \
  35:tmk_core/common/avr/suspend.c ****     "wdr" "\n\t"    \
  36:tmk_core/common/avr/suspend.c ****     "sts %0,%1" "\n\t"  \
  37:tmk_core/common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t"   \
  38:tmk_core/common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  39:tmk_core/common/avr/suspend.c ****     : /* no outputs */  \
  40:tmk_core/common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  41:tmk_core/common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  42:tmk_core/common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | \
  43:tmk_core/common/avr/suspend.c ****         _BV(WDIE) | (value & 0x07)) ) \
  44:tmk_core/common/avr/suspend.c ****     : "r0"  \
  45:tmk_core/common/avr/suspend.c **** )
  46:tmk_core/common/avr/suspend.c **** 
  47:tmk_core/common/avr/suspend.c **** 
  48:tmk_core/common/avr/suspend.c **** /** \brief Suspend idle
  49:tmk_core/common/avr/suspend.c ****  *
  50:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  51:tmk_core/common/avr/suspend.c ****  */
  52:tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time) {
  17               		.loc 1 52 33 view -0
  18               		.cfi_startproc
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  53:tmk_core/common/avr/suspend.c ****     cli();
  23               		.loc 1 53 5 view .LVU1
  24               	/* #APP */
  25               	 ;  53 "tmk_core/common/avr/suspend.c" 1
  26 0000 F894      		cli
  27               	 ;  0 "" 2
  54:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  28               		.loc 1 54 5 view .LVU2
  29               		.loc 1 54 5 view .LVU3
  30               	/* #NOAPP */
  31 0002 83B7      		in r24,0x33
  32               	.LVL1:
  33               		.loc 1 54 5 is_stmt 0 view .LVU4
  34 0004 817F      		andi r24,lo8(-15)
  35 0006 83BF      		out 0x33,r24
  55:tmk_core/common/avr/suspend.c ****     sleep_enable();
  36               		.loc 1 55 5 is_stmt 1 view .LVU5
  37               		.loc 1 55 5 view .LVU6
  38 0008 83B7      		in r24,0x33
  39 000a 8160      		ori r24,lo8(1)
  40 000c 83BF      		out 0x33,r24
  56:tmk_core/common/avr/suspend.c ****     sei();
  41               		.loc 1 56 5 view .LVU7
  42               	/* #APP */
  43               	 ;  56 "tmk_core/common/avr/suspend.c" 1
  44 000e 7894      		sei
  45               	 ;  0 "" 2
  57:tmk_core/common/avr/suspend.c ****     sleep_cpu();
  46               		.loc 1 57 5 view .LVU8
  47               		.loc 1 57 5 view .LVU9
  48               	 ;  57 "tmk_core/common/avr/suspend.c" 1
  49 0010 8895      		sleep
  50               		
  51               	 ;  0 "" 2
  58:tmk_core/common/avr/suspend.c ****     sleep_disable();
  52               		.loc 1 58 5 view .LVU10
  53               		.loc 1 58 5 view .LVU11
  54               	/* #NOAPP */
  55 0012 83B7      		in r24,0x33
  56 0014 8E7F      		andi r24,lo8(-2)
  57 0016 83BF      		out 0x33,r24
  58               	/* epilogue start */
  59:tmk_core/common/avr/suspend.c **** }
  59               		.loc 1 59 1 is_stmt 0 view .LVU12
  60 0018 0895      		ret
  61               		.cfi_endproc
  62               	.LFE108:
  64               		.section	.text.matrix_power_up,"ax",@progbits
  65               		.weak	matrix_power_up
  67               	matrix_power_up:
  68               	.LFB113:
  60:tmk_core/common/avr/suspend.c **** 
  61:tmk_core/common/avr/suspend.c **** 
  62:tmk_core/common/avr/suspend.c **** // TODO: This needs some cleanup
  63:tmk_core/common/avr/suspend.c **** 
  64:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  65:tmk_core/common/avr/suspend.c ****  *
  66:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  67:tmk_core/common/avr/suspend.c ****  */
  68:tmk_core/common/avr/suspend.c **** __attribute__ ((weak))
  69:tmk_core/common/avr/suspend.c **** void suspend_power_down_user (void) { }
  70:tmk_core/common/avr/suspend.c **** /** \brief Run keyboard level Power down
  71:tmk_core/common/avr/suspend.c ****  *
  72:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  73:tmk_core/common/avr/suspend.c ****  */
  74:tmk_core/common/avr/suspend.c **** __attribute__ ((weak))
  75:tmk_core/common/avr/suspend.c **** void suspend_power_down_kb(void) {
  76:tmk_core/common/avr/suspend.c ****   suspend_power_down_user();
  77:tmk_core/common/avr/suspend.c **** }
  78:tmk_core/common/avr/suspend.c **** 
  79:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
  80:tmk_core/common/avr/suspend.c **** /** \brief Power down MCU with watchdog timer
  81:tmk_core/common/avr/suspend.c ****  *
  82:tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  83:tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  84:tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  85:tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  86:tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  87:tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  88:tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  89:tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  90:tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  91:tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  92:tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  93:tmk_core/common/avr/suspend.c ****  */
  94:tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  95:tmk_core/common/avr/suspend.c **** 
  96:tmk_core/common/avr/suspend.c **** /** \brief Power down
  97:tmk_core/common/avr/suspend.c ****  *
  98:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
  99:tmk_core/common/avr/suspend.c ****  */
 100:tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto) {
 101:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
 102:tmk_core/common/avr/suspend.c ****   if (USB_DeviceState == DEVICE_STATE_Configured) return;
 103:tmk_core/common/avr/suspend.c **** #endif
 104:tmk_core/common/avr/suspend.c ****   wdt_timeout = wdto;
 105:tmk_core/common/avr/suspend.c **** 
 106:tmk_core/common/avr/suspend.c ****   // Watchdog Interrupt Mode
 107:tmk_core/common/avr/suspend.c ****   wdt_intr_enable(wdto);
 108:tmk_core/common/avr/suspend.c **** 
 109:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 110:tmk_core/common/avr/suspend.c ****   backlight_set(0);
 111:tmk_core/common/avr/suspend.c **** #endif
 112:tmk_core/common/avr/suspend.c **** 
 113:tmk_core/common/avr/suspend.c ****   // Turn off LED indicators
 114:tmk_core/common/avr/suspend.c ****   uint8_t leds_off = 0;
 115:tmk_core/common/avr/suspend.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 116:tmk_core/common/avr/suspend.c ****   if (is_backlight_enabled()) {
 117:tmk_core/common/avr/suspend.c ****     // Don't try to turn off Caps Lock indicator as it is backlight and backlight is already off
 118:tmk_core/common/avr/suspend.c ****     leds_off |= (1<<USB_LED_CAPS_LOCK);
 119:tmk_core/common/avr/suspend.c ****   }
 120:tmk_core/common/avr/suspend.c **** #endif
 121:tmk_core/common/avr/suspend.c ****   led_set(leds_off);
 122:tmk_core/common/avr/suspend.c **** 
 123:tmk_core/common/avr/suspend.c **** #ifdef AUDIO_ENABLE
 124:tmk_core/common/avr/suspend.c ****   // This sometimes disables the start-up noise, so it's been disabled
 125:tmk_core/common/avr/suspend.c ****   // stop_all_notes();
 126:tmk_core/common/avr/suspend.c **** #endif /* AUDIO_ENABLE */
 127:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 128:tmk_core/common/avr/suspend.c **** #ifdef RGBLIGHT_ANIMATIONS
 129:tmk_core/common/avr/suspend.c ****   rgblight_timer_disable();
 130:tmk_core/common/avr/suspend.c **** #endif
 131:tmk_core/common/avr/suspend.c ****   if (!is_suspended) {
 132:tmk_core/common/avr/suspend.c ****     is_suspended = true;
 133:tmk_core/common/avr/suspend.c ****     rgblight_enabled = rgblight_config.enable;
 134:tmk_core/common/avr/suspend.c ****     rgblight_disable_noeeprom();
 135:tmk_core/common/avr/suspend.c ****   }
 136:tmk_core/common/avr/suspend.c **** #endif
 137:tmk_core/common/avr/suspend.c ****   suspend_power_down_kb();
 138:tmk_core/common/avr/suspend.c **** 
 139:tmk_core/common/avr/suspend.c ****     // TODO: more power saving
 140:tmk_core/common/avr/suspend.c ****     // See PicoPower application note
 141:tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
 142:tmk_core/common/avr/suspend.c ****     // - prescale clock
 143:tmk_core/common/avr/suspend.c ****     // - BOD disable
 144:tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
 145:tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 146:tmk_core/common/avr/suspend.c ****     sleep_enable();
 147:tmk_core/common/avr/suspend.c ****     sei();
 148:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 149:tmk_core/common/avr/suspend.c ****     sleep_disable();
 150:tmk_core/common/avr/suspend.c **** 
 151:tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
 152:tmk_core/common/avr/suspend.c ****     wdt_disable();
 153:tmk_core/common/avr/suspend.c **** }
 154:tmk_core/common/avr/suspend.c **** #endif
 155:tmk_core/common/avr/suspend.c **** 
 156:tmk_core/common/avr/suspend.c **** /** \brief Suspend power down
 157:tmk_core/common/avr/suspend.c ****  *
 158:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 159:tmk_core/common/avr/suspend.c ****  */
 160:tmk_core/common/avr/suspend.c **** void suspend_power_down(void) {
 161:tmk_core/common/avr/suspend.c **** 	suspend_power_down_kb();
 162:tmk_core/common/avr/suspend.c **** 
 163:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 164:tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
 165:tmk_core/common/avr/suspend.c **** #endif
 166:tmk_core/common/avr/suspend.c **** }
 167:tmk_core/common/avr/suspend.c **** 
 168:tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_up(void) {}
  69               		.loc 1 168 51 is_stmt 1 view -0
  70               		.cfi_startproc
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 0 */
  74               	.L__stack_usage = 0
  75               		.loc 1 168 52 view .LVU14
  76               	/* epilogue start */
  77               		.loc 1 168 1 is_stmt 0 view .LVU15
  78 0000 0895      		ret
  79               		.cfi_endproc
  80               	.LFE113:
  82               		.set	matrix_power_up.localalias.0,matrix_power_up
  83               		.section	.text.suspend_power_down_user,"ax",@progbits
  84               		.weak	suspend_power_down_user
  86               	suspend_power_down_user:
  87               	.LFB125:
  88               		.cfi_startproc
  89               	/* prologue: function */
  90               	/* frame size = 0 */
  91               	/* stack size = 0 */
  92               	.L__stack_usage = 0
  93               	/* epilogue start */
  94 0000 0895      		ret
  95               		.cfi_endproc
  96               	.LFE125:
  98               		.section	.text.suspend_power_down_kb,"ax",@progbits
  99               		.weak	suspend_power_down_kb
 101               	suspend_power_down_kb:
 102               	.LFB110:
  75:tmk_core/common/avr/suspend.c ****   suspend_power_down_user();
 103               		.loc 1 75 34 is_stmt 1 view -0
 104               		.cfi_startproc
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 0 */
 108               	.L__stack_usage = 0
  76:tmk_core/common/avr/suspend.c **** }
 109               		.loc 1 76 3 view .LVU17
 110 0000 0C94 0000 		jmp suspend_power_down_user
 111               	.LVL2:
 112               		.cfi_endproc
 113               	.LFE110:
 115               		.section	.text.suspend_power_down,"ax",@progbits
 116               	.global	suspend_power_down
 118               	suspend_power_down:
 119               	.LFB112:
 160:tmk_core/common/avr/suspend.c **** 	suspend_power_down_kb();
 120               		.loc 1 160 31 view -0
 121               		.cfi_startproc
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 0 */
 125               	.L__stack_usage = 0
 161:tmk_core/common/avr/suspend.c **** 
 126               		.loc 1 161 2 view .LVU19
 127 0000 0E94 0000 		call suspend_power_down_kb
 128               	.LVL3:
 164:tmk_core/common/avr/suspend.c **** #endif
 129               		.loc 1 164 5 view .LVU20
 130               	.LBB11:
 131               	.LBI11:
 100:tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
 132               		.loc 1 100 13 view .LVU21
 133               	.LBB12:
 102:tmk_core/common/avr/suspend.c **** #endif
 134               		.loc 1 102 3 view .LVU22
 102:tmk_core/common/avr/suspend.c **** #endif
 135               		.loc 1 102 23 is_stmt 0 view .LVU23
 136 0004 8091 0000 		lds r24,USB_DeviceState
 102:tmk_core/common/avr/suspend.c **** #endif
 137               		.loc 1 102 6 view .LVU24
 138 0008 8430      		cpi r24,lo8(4)
 139 000a 01F0      		breq .L5
 104:tmk_core/common/avr/suspend.c **** 
 140               		.loc 1 104 3 is_stmt 1 view .LVU25
 104:tmk_core/common/avr/suspend.c **** 
 141               		.loc 1 104 15 is_stmt 0 view .LVU26
 142 000c 1092 0000 		sts wdt_timeout,__zero_reg__
 107:tmk_core/common/avr/suspend.c **** 
 143               		.loc 1 107 3 is_stmt 1 view .LVU27
 144 0010 88E1      		ldi r24,lo8(24)
 145 0012 90E0      		ldi r25,0
 146 0014 20E4      		ldi r18,lo8(64)
 147               	/* #APP */
 148               	 ;  107 "tmk_core/common/avr/suspend.c" 1
 149 0016 0FB6      		in __tmp_reg__,__SREG__
 150 0018 F894      		cli
 151 001a A895      		wdr
 152 001c 8093 6000 		sts 96,r24
 153 0020 0FBE      		out __SREG__,__tmp_reg__
 154 0022 2093 6000 		sts 96,r18
 155               		
 156               	 ;  0 "" 2
 110:tmk_core/common/avr/suspend.c **** #endif
 157               		.loc 1 110 3 view .LVU28
 158               	/* #NOAPP */
 159 0026 80E0      		ldi r24,0
 160 0028 0E94 0000 		call backlight_set
 161               	.LVL4:
 114:tmk_core/common/avr/suspend.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
 162               		.loc 1 114 3 view .LVU29
 121:tmk_core/common/avr/suspend.c **** 
 163               		.loc 1 121 3 view .LVU30
 164 002c 80E0      		ldi r24,0
 165 002e 0E94 0000 		call led_set
 166               	.LVL5:
 137:tmk_core/common/avr/suspend.c **** 
 167               		.loc 1 137 3 view .LVU31
 168 0032 0E94 0000 		call suspend_power_down_kb
 169               	.LVL6:
 145:tmk_core/common/avr/suspend.c ****     sleep_enable();
 170               		.loc 1 145 5 view .LVU32
 145:tmk_core/common/avr/suspend.c ****     sleep_enable();
 171               		.loc 1 145 5 view .LVU33
 172 0036 83B7      		in r24,0x33
 173 0038 817F      		andi r24,lo8(-15)
 174 003a 8460      		ori r24,lo8(4)
 175 003c 83BF      		out 0x33,r24
 146:tmk_core/common/avr/suspend.c ****     sei();
 176               		.loc 1 146 5 view .LVU34
 146:tmk_core/common/avr/suspend.c ****     sei();
 177               		.loc 1 146 5 view .LVU35
 178 003e 83B7      		in r24,0x33
 179 0040 8160      		ori r24,lo8(1)
 180 0042 83BF      		out 0x33,r24
 147:tmk_core/common/avr/suspend.c ****     sleep_cpu();
 181               		.loc 1 147 5 view .LVU36
 182               	/* #APP */
 183               	 ;  147 "tmk_core/common/avr/suspend.c" 1
 184 0044 7894      		sei
 185               	 ;  0 "" 2
 148:tmk_core/common/avr/suspend.c ****     sleep_disable();
 186               		.loc 1 148 5 view .LVU37
 148:tmk_core/common/avr/suspend.c ****     sleep_disable();
 187               		.loc 1 148 5 view .LVU38
 188               	 ;  148 "tmk_core/common/avr/suspend.c" 1
 189 0046 8895      		sleep
 190               		
 191               	 ;  0 "" 2
 149:tmk_core/common/avr/suspend.c **** 
 192               		.loc 1 149 5 view .LVU39
 149:tmk_core/common/avr/suspend.c **** 
 193               		.loc 1 149 5 view .LVU40
 194               	/* #NOAPP */
 195 0048 83B7      		in r24,0x33
 196 004a 8E7F      		andi r24,lo8(-2)
 197 004c 83BF      		out 0x33,r24
 152:tmk_core/common/avr/suspend.c **** }
 198               		.loc 1 152 5 view .LVU41
 199               	.LBB13:
 200               	.LBI13:
 201               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
   5:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
   8:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  11:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****      distribution.
  15:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  16:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  20:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  32:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  34:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** /*
  35:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****  */
  37:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  41:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** /** \file */
  45:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  57:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     the following:
  68:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  69:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     \code
  70:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  73:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  75:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     {
  80:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     }
  84:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     \endcode
  85:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  86:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** */
  91:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  92:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** /**
  93:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** */
  98:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
  99:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 101:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #else
 106:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #endif
 108:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 109:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #else
 114:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #endif
 116:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 117:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #else
 120:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #endif
 122:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 123:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 125:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** /**
 127:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 134:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** */
 136:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 138:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 140:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** /*
 141:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** */
 152:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** do { \
 154:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** ); \
 174:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** } while(0)
 175:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : \
 184:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** );
 191:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 192:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 194:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** )
 210:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 211:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** do { \
 213:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** ); \
 231:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** }while(0)
 232:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 233:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 235:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** static __inline__
 236:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** {
 239:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 241:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			);
 256:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 257:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 259:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			);
 274:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 275:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 277:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			);
 292:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 293:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	else
 294:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****  	{
 295:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 			);
 310:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 311:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** }
 312:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 313:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** static __inline__
 314:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** {
 317:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 319:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				);
 337:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 338:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 340:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				);
 358:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 359:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 361:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				);
 379:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 380:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	else
 381:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 382:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				);
 400:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 401:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** }
 402:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 403:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** #else
 404:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 405:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** static __inline__
 406:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** {
 409:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 411:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		);
 425:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 426:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	else
 427:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 428:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		);
 442:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 443:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** }
 444:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 
 445:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** static __inline__
 446:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** void wdt_disable (void)
 202               		.loc 2 447 6 view .LVU42
 203               	.LBE13:
 204               	.LBE12:
 205               	.LBE11:
 448:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** {
 449:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 206               		.loc 2 449 2 view .LVU43
 207               	.LBB17:
 208               	.LBB16:
 209               	.LBB15:
 210               	.LBB14:
 450:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 451:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		);
 466:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	}
 467:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	else
 468:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 	{
 469:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 211               		.loc 2 469 9 view .LVU44
 470:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 212               		.loc 2 470 3 view .LVU45
 213               	/* #APP */
 214               	 ;  470 "/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/avr/wdt.h" 1
 215 004e 0FB6      		in __tmp_reg__,__SREG__
 216 0050 F894      		cli
 217 0052 A895      		wdr
 218 0054 8091 6000 		lds r24,96
 219 0058 8861      		ori r24,24
 220 005a 8093 6000 		sts 96,r24
 221 005e 1092 6000 		sts 96,__zero_reg__
 222 0062 0FBE      		out __SREG__,__tmp_reg__
 223               		
 224               	 ;  0 "" 2
 225               	.LVL7:
 226               	/* #NOAPP */
 227               	.L5:
 228               	/* epilogue start */
 229               		.loc 2 470 3 is_stmt 0 view .LVU46
 230               	.LBE14:
 231               	.LBE15:
 232               	.LBE16:
 233               	.LBE17:
 166:tmk_core/common/avr/suspend.c **** 
 234               		.loc 1 166 1 view .LVU47
 235 0064 0895      		ret
 236               		.cfi_endproc
 237               	.LFE112:
 239               		.section	.text.matrix_power_down,"ax",@progbits
 240               		.weak	matrix_power_down
 242               	matrix_power_down:
 243               	.LFB121:
 244               		.cfi_startproc
 245               	/* prologue: function */
 246               	/* frame size = 0 */
 247               	/* stack size = 0 */
 248               	.L__stack_usage = 0
 249               	/* epilogue start */
 250 0000 0895      		ret
 251               		.cfi_endproc
 252               	.LFE121:
 254               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 255               	.global	suspend_wakeup_condition
 257               	suspend_wakeup_condition:
 258               	.LFB115:
 169:tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_down(void) {}
 170:tmk_core/common/avr/suspend.c **** bool suspend_wakeup_condition(void) {
 259               		.loc 1 170 37 is_stmt 1 view -0
 260               		.cfi_startproc
 261               		.loc 1 170 37 is_stmt 0 view .LVU49
 262 0000 CF93      		push r28
 263               	.LCFI0:
 264               		.cfi_def_cfa_offset 3
 265               		.cfi_offset 28, -2
 266               	/* prologue: function */
 267               	/* frame size = 0 */
 268               	/* stack size = 1 */
 269               	.L__stack_usage = 1
 171:tmk_core/common/avr/suspend.c ****     matrix_power_up();
 270               		.loc 1 171 5 is_stmt 1 view .LVU50
 271 0002 0E94 0000 		call matrix_power_up
 272               	.LVL8:
 172:tmk_core/common/avr/suspend.c ****     matrix_scan();
 273               		.loc 1 172 5 view .LVU51
 274 0006 0E94 0000 		call matrix_scan
 275               	.LVL9:
 173:tmk_core/common/avr/suspend.c ****     matrix_power_down();
 276               		.loc 1 173 5 view .LVU52
 277 000a 0E94 0000 		call matrix_power_down
 278               	.LVL10:
 174:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 279               		.loc 1 174 5 view .LVU53
 280               	.LBB18:
 281               		.loc 1 174 10 view .LVU54
 282               		.loc 1 174 18 is_stmt 0 view .LVU55
 283 000e C0E0      		ldi r28,0
 284               	.LVL11:
 285               	.L13:
 175:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 286               		.loc 1 175 9 is_stmt 1 view .LVU56
 287               		.loc 1 175 13 is_stmt 0 view .LVU57
 288 0010 8C2F      		mov r24,r28
 289 0012 0E94 0000 		call matrix_get_row
 290               	.LVL12:
 291               		.loc 1 175 12 view .LVU58
 292 0016 892B      		or r24,r25
 293 0018 01F4      		brne .L14
 174:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 294               		.loc 1 174 43 discriminator 2 view .LVU59
 295 001a CF5F      		subi r28,lo8(-(1))
 296               	.LVL13:
 174:tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 297               		.loc 1 174 5 discriminator 2 view .LVU60
 298 001c C430      		cpi r28,lo8(4)
 299 001e 01F4      		brne .L13
 300               	.LBE18:
 176:tmk_core/common/avr/suspend.c ****     }
 177:tmk_core/common/avr/suspend.c ****      return false;
 301               		.loc 1 177 13 view .LVU61
 302 0020 80E0      		ldi r24,0
 303               	.L11:
 304               	/* epilogue start */
 178:tmk_core/common/avr/suspend.c **** }
 305               		.loc 1 178 1 view .LVU62
 306 0022 CF91      		pop r28
 307               	.LVL14:
 308               		.loc 1 178 1 view .LVU63
 309 0024 0895      		ret
 310               	.LVL15:
 311               	.L14:
 312               	.LBB19:
 175:tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 313               		.loc 1 175 39 view .LVU64
 314 0026 81E0      		ldi r24,lo8(1)
 315 0028 00C0      		rjmp .L11
 316               	.LBE19:
 317               		.cfi_endproc
 318               	.LFE115:
 320               		.section	.text.suspend_wakeup_init_user,"ax",@progbits
 321               		.weak	suspend_wakeup_init_user
 323               	suspend_wakeup_init_user:
 324               	.LFB123:
 325               		.cfi_startproc
 326               	/* prologue: function */
 327               	/* frame size = 0 */
 328               	/* stack size = 0 */
 329               	.L__stack_usage = 0
 330               	/* epilogue start */
 331 0000 0895      		ret
 332               		.cfi_endproc
 333               	.LFE123:
 335               		.section	.text.suspend_wakeup_init_kb,"ax",@progbits
 336               		.weak	suspend_wakeup_init_kb
 338               	suspend_wakeup_init_kb:
 339               	.LFB117:
 179:tmk_core/common/avr/suspend.c **** 
 180:tmk_core/common/avr/suspend.c **** /** \brief run user level code immediately after wakeup
 181:tmk_core/common/avr/suspend.c ****  *
 182:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 183:tmk_core/common/avr/suspend.c ****  */
 184:tmk_core/common/avr/suspend.c **** __attribute__ ((weak))
 185:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init_user(void) { }
 186:tmk_core/common/avr/suspend.c **** 
 187:tmk_core/common/avr/suspend.c **** /** \brief run keyboard level code immediately after wakeup
 188:tmk_core/common/avr/suspend.c ****  *
 189:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 190:tmk_core/common/avr/suspend.c ****  */
 191:tmk_core/common/avr/suspend.c **** __attribute__ ((weak))
 192:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init_kb(void) {
 340               		.loc 1 192 35 is_stmt 1 view -0
 341               		.cfi_startproc
 342               	/* prologue: function */
 343               	/* frame size = 0 */
 344               	/* stack size = 0 */
 345               	.L__stack_usage = 0
 193:tmk_core/common/avr/suspend.c ****   suspend_wakeup_init_user();
 346               		.loc 1 193 3 view .LVU66
 347 0000 0C94 0000 		jmp suspend_wakeup_init_user
 348               	.LVL16:
 349               		.cfi_endproc
 350               	.LFE117:
 352               		.section	.text.suspend_wakeup_init,"ax",@progbits
 353               	.global	suspend_wakeup_init
 355               	suspend_wakeup_init:
 356               	.LFB118:
 194:tmk_core/common/avr/suspend.c **** }
 195:tmk_core/common/avr/suspend.c **** /** \brief run immediately after wakeup
 196:tmk_core/common/avr/suspend.c ****  *
 197:tmk_core/common/avr/suspend.c ****  * FIXME: needs doc
 198:tmk_core/common/avr/suspend.c ****  */
 199:tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void) {
 357               		.loc 1 199 32 view -0
 358               		.cfi_startproc
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 0 */
 362               	.L__stack_usage = 0
 200:tmk_core/common/avr/suspend.c ****     // clear keyboard state
 201:tmk_core/common/avr/suspend.c ****     clear_keyboard();
 363               		.loc 1 201 5 view .LVU68
 364 0000 0E94 0000 		call clear_keyboard
 365               	.LVL17:
 202:tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 203:tmk_core/common/avr/suspend.c ****     backlight_init();
 366               		.loc 1 203 5 view .LVU69
 367 0004 0E94 0000 		call backlight_init
 368               	.LVL18:
 204:tmk_core/common/avr/suspend.c **** #endif
 205:tmk_core/common/avr/suspend.c **** 	led_set(host_keyboard_leds());
 369               		.loc 1 205 2 view .LVU70
 370 0008 0E94 0000 		call host_keyboard_leds
 371               	.LVL19:
 372 000c 0E94 0000 		call led_set
 373               	.LVL20:
 206:tmk_core/common/avr/suspend.c **** #if defined(RGBLIGHT_SLEEP) && defined(RGBLIGHT_ENABLE)
 207:tmk_core/common/avr/suspend.c ****   is_suspended = false;
 208:tmk_core/common/avr/suspend.c ****   if (rgblight_enabled) {
 209:tmk_core/common/avr/suspend.c ****     #ifdef BOOTLOADER_TEENSY
 210:tmk_core/common/avr/suspend.c ****       wait_ms(10);
 211:tmk_core/common/avr/suspend.c ****     #endif
 212:tmk_core/common/avr/suspend.c ****     rgblight_enable_noeeprom();
 213:tmk_core/common/avr/suspend.c ****   }
 214:tmk_core/common/avr/suspend.c **** #ifdef RGBLIGHT_ANIMATIONS
 215:tmk_core/common/avr/suspend.c ****   rgblight_timer_enable();
 216:tmk_core/common/avr/suspend.c **** #endif
 217:tmk_core/common/avr/suspend.c **** #endif
 218:tmk_core/common/avr/suspend.c ****     suspend_wakeup_init_kb();
 374               		.loc 1 218 5 view .LVU71
 375 0010 0C94 0000 		jmp suspend_wakeup_init_kb
 376               	.LVL21:
 377               		.cfi_endproc
 378               	.LFE118:
 380               		.section	.text.__vector_12,"ax",@progbits
 381               	.global	__vector_12
 383               	__vector_12:
 384               	.LFB119:
 219:tmk_core/common/avr/suspend.c **** }
 220:tmk_core/common/avr/suspend.c **** 
 221:tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 222:tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 223:tmk_core/common/avr/suspend.c **** ISR(WDT_vect) {
 385               		.loc 1 223 15 view -0
 386               		.cfi_startproc
 387 0000 1F92 1FB6 		__gcc_isr 1
 387      1F92 1124 
 387      8F93 
 388 000a 9F93      		push r25
 389               	.LCFI1:
 390               		.cfi_def_cfa_offset 3
 391               		.cfi_offset 25, -2
 392 000c AF93      		push r26
 393               	.LCFI2:
 394               		.cfi_def_cfa_offset 4
 395               		.cfi_offset 26, -3
 396 000e BF93      		push r27
 397               	.LCFI3:
 398               		.cfi_def_cfa_offset 5
 399               		.cfi_offset 27, -4
 400               	/* prologue: Signal */
 401               	/* frame size = 0 */
 402               	/* stack size = 3...7 */
 403               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 224:tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 225:tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 404               		.loc 1 225 5 view .LVU73
 405 0010 8091 0000 		lds r24,wdt_timeout
 406 0014 8111      		cpse r24,__zero_reg__
 407 0016 00C0      		rjmp .L19
 226:tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 227:tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 408               		.loc 1 227 13 view .LVU74
 409               		.loc 1 227 25 is_stmt 0 view .LVU75
 410 0018 8091 0000 		lds r24,timer_count
 411 001c 9091 0000 		lds r25,timer_count+1
 412 0020 A091 0000 		lds r26,timer_count+2
 413 0024 B091 0000 		lds r27,timer_count+3
 414 0028 4196      		adiw r24,17
 415 002a A11D      		adc r26,__zero_reg__
 416 002c B11D      		adc r27,__zero_reg__
 417 002e 8093 0000 		sts timer_count,r24
 418 0032 9093 0000 		sts timer_count+1,r25
 419 0036 A093 0000 		sts timer_count+2,r26
 420 003a B093 0000 		sts timer_count+3,r27
 228:tmk_core/common/avr/suspend.c ****             break;
 421               		.loc 1 228 13 is_stmt 1 view .LVU76
 229:tmk_core/common/avr/suspend.c ****         default:
 230:tmk_core/common/avr/suspend.c ****             ;
 422               		.loc 1 230 13 view .LVU77
 423               	.L19:
 424               	/* epilogue start */
 231:tmk_core/common/avr/suspend.c ****     }
 232:tmk_core/common/avr/suspend.c **** }
 425               		.loc 1 232 1 is_stmt 0 view .LVU78
 426 003e BF91      		pop r27
 427 0040 AF91      		pop r26
 428 0042 9F91      		pop r25
 429 0044 8F91 1F90 		__gcc_isr 2
 429      1FBE 1F90 
 430 004c 1895      		reti
 431               		__gcc_isr 0,r24
 432               		.cfi_endproc
 433               	.LFE119:
 435               		.section	.bss.wdt_timeout,"aw",@nobits
 438               	wdt_timeout:
 439 0000 00        		.zero	1
 440               		.text
 441               	.Letext0:
 442               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/stdint.h"
 443               		.file 4 "tmk_core/common/action.h"
 444               		.file 5 "tmk_core/common/timer.h"
 445               		.file 6 "tmk_core/common/report.h"
 446               		.file 7 "tmk_core/common/host_driver.h"
 447               		.file 8 "tmk_core/common/host.h"
 448               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 449               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 450               		.file 11 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 451               		.file 12 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 452               		.file 13 "/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/stdio.h"
 453               		.file 14 "tmk_core/protocol/lufa/lufa.h"
 454               		.file 15 "tmk_core/common/backlight.h"
 455               		.file 16 "tmk_core/common/led.h"
 456               		.file 17 "tmk_core/common/matrix.h"
 457               		.file 18 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:4      *ABS*:000000000000003f __SREG__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:13     .text.suspend_idle:0000000000000000 suspend_idle
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:67     .text.matrix_power_up:0000000000000000 matrix_power_up
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:67     .text.matrix_power_up:0000000000000000 matrix_power_up.localalias.0
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:86     .text.suspend_power_down_user:0000000000000000 suspend_power_down_user
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:101    .text.suspend_power_down_kb:0000000000000000 suspend_power_down_kb
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:118    .text.suspend_power_down:0000000000000000 suspend_power_down
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:438    .bss.wdt_timeout:0000000000000000 wdt_timeout
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:242    .text.matrix_power_down:0000000000000000 matrix_power_down
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:257    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:323    .text.suspend_wakeup_init_user:0000000000000000 suspend_wakeup_init_user
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:338    .text.suspend_wakeup_init_kb:0000000000000000 suspend_wakeup_init_kb
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:355    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//cc6wJE8y.s:383    .text.__vector_12:0000000000000000 __vector_12
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
USB_DeviceState
backlight_set
led_set
matrix_scan
matrix_get_row
clear_keyboard
backlight_init
host_keyboard_leds
timer_count
__do_clear_bss
