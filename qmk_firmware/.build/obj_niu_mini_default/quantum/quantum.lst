   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB17:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** 
  19:quantum/quantum.c **** #if !defined(RGBLIGHT_ENABLE) && !defined(RGB_MATRIX_ENABLE)
  20:quantum/quantum.c **** 	#include "rgb.h"
  21:quantum/quantum.c **** #endif
  22:quantum/quantum.c **** 
  23:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  24:quantum/quantum.c **** #include "outputselect.h"
  25:quantum/quantum.c **** #endif
  26:quantum/quantum.c **** 
  27:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  28:quantum/quantum.c **** #define BREATHING_PERIOD 6
  29:quantum/quantum.c **** #endif
  30:quantum/quantum.c **** 
  31:quantum/quantum.c **** #include "backlight.h"
  32:quantum/quantum.c **** extern backlight_config_t backlight_config;
  33:quantum/quantum.c **** 
  34:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  35:quantum/quantum.c **** #include "fauxclicky.h"
  36:quantum/quantum.c **** #endif
  37:quantum/quantum.c **** 
  38:quantum/quantum.c **** #ifdef API_ENABLE
  39:quantum/quantum.c **** #include "api.h"
  40:quantum/quantum.c **** #endif
  41:quantum/quantum.c **** 
  42:quantum/quantum.c **** #ifdef MIDI_ENABLE
  43:quantum/quantum.c **** #include "process_midi.h"
  44:quantum/quantum.c **** #endif
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  47:quantum/quantum.c **** #include "velocikey.h"
  48:quantum/quantum.c **** #endif
  49:quantum/quantum.c **** 
  50:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  51:quantum/quantum.c ****     #include "haptic.h"
  52:quantum/quantum.c **** #endif
  53:quantum/quantum.c **** 
  54:quantum/quantum.c **** #ifdef ENCODER_ENABLE
  55:quantum/quantum.c **** #include "encoder.h"
  56:quantum/quantum.c **** #endif
  57:quantum/quantum.c **** 
  58:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  59:quantum/quantum.c ****   #ifndef GOODBYE_SONG
  60:quantum/quantum.c ****     #define GOODBYE_SONG SONG(GOODBYE_SOUND)
  61:quantum/quantum.c ****   #endif
  62:quantum/quantum.c ****   #ifndef AG_NORM_SONG
  63:quantum/quantum.c ****     #define AG_NORM_SONG SONG(AG_NORM_SOUND)
  64:quantum/quantum.c ****   #endif
  65:quantum/quantum.c ****   #ifndef AG_SWAP_SONG
  66:quantum/quantum.c ****     #define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  67:quantum/quantum.c ****   #endif
  68:quantum/quantum.c ****   #ifndef CG_NORM_SONG
  69:quantum/quantum.c ****     #define CG_NORM_SONG SONG(AG_NORM_SOUND)
  70:quantum/quantum.c ****   #endif
  71:quantum/quantum.c ****   #ifndef CG_SWAP_SONG
  72:quantum/quantum.c ****     #define CG_SWAP_SONG SONG(AG_SWAP_SOUND)
  73:quantum/quantum.c ****   #endif
  74:quantum/quantum.c ****   float goodbye_song[][2] = GOODBYE_SONG;
  75:quantum/quantum.c ****   float ag_norm_song[][2] = AG_NORM_SONG;
  76:quantum/quantum.c ****   float ag_swap_song[][2] = AG_SWAP_SONG;
  77:quantum/quantum.c ****   float cg_norm_song[][2] = CG_NORM_SONG;
  78:quantum/quantum.c ****   float cg_swap_song[][2] = CG_SWAP_SONG;
  79:quantum/quantum.c ****   #ifdef DEFAULT_LAYER_SONGS
  80:quantum/quantum.c ****     float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  81:quantum/quantum.c ****   #endif
  82:quantum/quantum.c **** #endif
  83:quantum/quantum.c **** 
  84:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 84 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 84 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
  85:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 85 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 85 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
  86:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  87:quantum/quantum.c ****     break;
  48               		.loc 1 87 5 is_stmt 1 view .LVU4
  88:quantum/quantum.c ****   default:
  89:quantum/quantum.c ****     return;
  90:quantum/quantum.c ****   }
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 92 3 view .LVU5
  50               		.loc 1 92 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  93:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 93 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  94:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 94 3 view .LVU8
  60               		.loc 1 94 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  95:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 95 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  96:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 96 3 view .LVU11
  70               		.loc 1 96 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  97:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 97 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  98:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 98 3 view .LVU14
  80               		.loc 1 98 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  99:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 99 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
 100:quantum/quantum.c **** 
 101:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 101 3 view .LVU17
  90               		.loc 1 101 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
 102:quantum/quantum.c **** 
 103:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 103 3 is_stmt 1 view .LVU19
 104:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 104 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
 105:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 105 3 view .LVU21
 106:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 106 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
 107:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 107 3 view .LVU23
 108:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 108 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
 109:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 109 3 view .LVU25
 110:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 110 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
 111:quantum/quantum.c **** }
 117               		.loc 1 111 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 111 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
 110:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 110 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 111 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 111 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 111 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE17:
 143               		.section	.text.qk_register_weak_mods,"ax",@progbits
 145               	qk_register_weak_mods:
 146               	.LVL14:
 147               	.LFB18:
 112:quantum/quantum.c **** 
 113:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 148               		.loc 1 113 54 is_stmt 1 view -0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
 114:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 154               		.loc 1 114 5 view .LVU34
 155               		.loc 1 114 19 is_stmt 0 view .LVU35
 156 0000 8770      		andi r24,lo8(7)
 157               	.LVL15:
 158               		.loc 1 114 5 view .LVU36
 159 0002 91E0      		ldi r25,lo8(1)
 160 0004 00C0      		rjmp 2f
 161               		1:
 162 0006 990F      		lsl r25
 163               		2:
 164 0008 8A95      		dec r24
 165 000a 02F4      		brpl 1b
 166 000c 892F      		mov r24,r25
 167 000e 0E94 0000 		call add_weak_mods
 168               	.LVL16:
 115:quantum/quantum.c ****     send_keyboard_report();
 169               		.loc 1 115 5 is_stmt 1 view .LVU37
 170 0012 0C94 0000 		jmp send_keyboard_report
 171               	.LVL17:
 172               		.cfi_endproc
 173               	.LFE18:
 175               		.section	.text.qk_register_mods,"ax",@progbits
 177               	qk_register_mods:
 178               	.LFB68:
 179               		.cfi_startproc
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 184 0000 0C94 0000 		jmp qk_register_weak_mods
 185               		.cfi_endproc
 186               	.LFE68:
 188               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 190               	qk_unregister_weak_mods:
 191               	.LVL18:
 192               	.LFB19:
 116:quantum/quantum.c **** }
 117:quantum/quantum.c **** 
 118:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 193               		.loc 1 118 56 view -0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
 119:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 199               		.loc 1 119 5 view .LVU39
 200               		.loc 1 119 19 is_stmt 0 view .LVU40
 201 0000 8770      		andi r24,lo8(7)
 202               	.LVL19:
 203               		.loc 1 119 5 view .LVU41
 204 0002 91E0      		ldi r25,lo8(1)
 205 0004 00C0      		rjmp 2f
 206               		1:
 207 0006 990F      		lsl r25
 208               		2:
 209 0008 8A95      		dec r24
 210 000a 02F4      		brpl 1b
 211 000c 892F      		mov r24,r25
 212 000e 0E94 0000 		call del_weak_mods
 213               	.LVL20:
 120:quantum/quantum.c ****     send_keyboard_report();
 214               		.loc 1 120 5 is_stmt 1 view .LVU42
 215 0012 0C94 0000 		jmp send_keyboard_report
 216               	.LVL21:
 217               		.cfi_endproc
 218               	.LFE19:
 220               		.section	.text.qk_unregister_mods,"ax",@progbits
 222               	qk_unregister_mods:
 223               	.LFB70:
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 229 0000 0C94 0000 		jmp qk_unregister_weak_mods
 230               		.cfi_endproc
 231               	.LFE70:
 233               		.section	.text.register_code16,"ax",@progbits
 234               	.global	register_code16
 236               	register_code16:
 237               	.LVL22:
 238               	.LFB22:
 121:quantum/quantum.c **** }
 122:quantum/quantum.c **** 
 123:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 124:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 125:quantum/quantum.c ****     send_keyboard_report();
 126:quantum/quantum.c **** }
 127:quantum/quantum.c **** 
 128:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 129:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 130:quantum/quantum.c ****     send_keyboard_report();
 131:quantum/quantum.c **** }
 132:quantum/quantum.c **** 
 133:quantum/quantum.c **** void register_code16 (uint16_t code) {
 239               		.loc 1 133 38 view -0
 240               		.cfi_startproc
 241               		.loc 1 133 38 is_stmt 0 view .LVU44
 242 0000 CF93      		push r28
 243               	.LCFI4:
 244               		.cfi_def_cfa_offset 3
 245               		.cfi_offset 28, -2
 246 0002 DF93      		push r29
 247               	.LCFI5:
 248               		.cfi_def_cfa_offset 4
 249               		.cfi_offset 29, -3
 250               	/* prologue: function */
 251               	/* frame size = 0 */
 252               	/* stack size = 2 */
 253               	.L__stack_usage = 2
 254 0004 EC01      		movw r28,r24
 134:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 255               		.loc 1 134 3 is_stmt 1 view .LVU45
 256               		.loc 1 134 7 is_stmt 0 view .LVU46
 257 0006 805E      		subi r24,-32
 258 0008 9109      		sbc r25,__zero_reg__
 259               	.LVL23:
 260               		.loc 1 134 6 view .LVU47
 261 000a 0897      		sbiw r24,8
 262 000c 00F0      		brlo .L26
 135:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 136:quantum/quantum.c ****   } else {
 137:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 263               		.loc 1 137 7 discriminator 1 view .LVU48
 264 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 265 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 134:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 266               		.loc 1 134 20 discriminator 1 view .LVU49
 267 0012 2097      		sbiw r28,0
 268 0014 01F4      		brne .L29
 269               	.L26:
 135:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 270               		.loc 1 135 7 is_stmt 1 view .LVU50
 271 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 272 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 273               	.L29:
 274               		.loc 1 137 7 is_stmt 0 view .LVU51
 275 001a CE01      		movw r24,r28
 276 001c 0E94 0000 		call do_code16
 277               	.LVL24:
 138:quantum/quantum.c ****   }
 139:quantum/quantum.c ****   register_code (code);
 278               		.loc 1 139 3 is_stmt 1 view .LVU52
 279 0020 8C2F      		mov r24,r28
 280               	/* epilogue start */
 140:quantum/quantum.c **** }
 281               		.loc 1 140 1 is_stmt 0 view .LVU53
 282 0022 DF91      		pop r29
 283 0024 CF91      		pop r28
 284               	.LVL25:
 139:quantum/quantum.c **** }
 285               		.loc 1 139 3 view .LVU54
 286 0026 0C94 0000 		jmp register_code
 287               	.LVL26:
 288               		.cfi_endproc
 289               	.LFE22:
 291               		.section	.text.unregister_code16,"ax",@progbits
 292               	.global	unregister_code16
 294               	unregister_code16:
 295               	.LVL27:
 296               	.LFB23:
 141:quantum/quantum.c **** 
 142:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 297               		.loc 1 142 40 is_stmt 1 view -0
 298               		.cfi_startproc
 299               		.loc 1 142 40 is_stmt 0 view .LVU56
 300 0000 CF93      		push r28
 301               	.LCFI6:
 302               		.cfi_def_cfa_offset 3
 303               		.cfi_offset 28, -2
 304 0002 DF93      		push r29
 305               	.LCFI7:
 306               		.cfi_def_cfa_offset 4
 307               		.cfi_offset 29, -3
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 2 */
 311               	.L__stack_usage = 2
 312 0004 EC01      		movw r28,r24
 143:quantum/quantum.c ****   unregister_code (code);
 313               		.loc 1 143 3 is_stmt 1 view .LVU57
 314 0006 0E94 0000 		call unregister_code
 315               	.LVL28:
 144:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 316               		.loc 1 144 3 view .LVU58
 317               		.loc 1 144 7 is_stmt 0 view .LVU59
 318 000a CE01      		movw r24,r28
 319 000c 805E      		subi r24,-32
 320 000e 9109      		sbc r25,__zero_reg__
 321               		.loc 1 144 6 view .LVU60
 322 0010 0897      		sbiw r24,8
 323 0012 00F0      		brlo .L31
 145:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 146:quantum/quantum.c ****   } else {
 147:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 324               		.loc 1 147 7 discriminator 1 view .LVU61
 325 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 326 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 144:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 327               		.loc 1 144 20 discriminator 1 view .LVU62
 328 0018 2097      		sbiw r28,0
 329 001a 01F4      		brne .L33
 330               	.L31:
 145:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 331               		.loc 1 145 7 is_stmt 1 view .LVU63
 332 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 333 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 334               	.L33:
 335               		.loc 1 147 7 is_stmt 0 view .LVU64
 336 0020 CE01      		movw r24,r28
 337               	/* epilogue start */
 148:quantum/quantum.c ****   }
 149:quantum/quantum.c **** }
 338               		.loc 1 149 1 view .LVU65
 339 0022 DF91      		pop r29
 340 0024 CF91      		pop r28
 341               	.LVL29:
 147:quantum/quantum.c ****   }
 342               		.loc 1 147 7 view .LVU66
 343 0026 0C94 0000 		jmp do_code16
 344               	.LVL30:
 147:quantum/quantum.c ****   }
 345               		.loc 1 147 7 view .LVU67
 346               		.cfi_endproc
 347               	.LFE23:
 349               		.section	.text.tap_code16,"ax",@progbits
 350               	.global	tap_code16
 352               	tap_code16:
 353               	.LVL31:
 354               	.LFB24:
 150:quantum/quantum.c **** 
 151:quantum/quantum.c **** void tap_code16(uint16_t code) {
 355               		.loc 1 151 32 is_stmt 1 view -0
 356               		.cfi_startproc
 357               		.loc 1 151 32 is_stmt 0 view .LVU69
 358 0000 CF93      		push r28
 359               	.LCFI8:
 360               		.cfi_def_cfa_offset 3
 361               		.cfi_offset 28, -2
 362 0002 DF93      		push r29
 363               	.LCFI9:
 364               		.cfi_def_cfa_offset 4
 365               		.cfi_offset 29, -3
 366               	/* prologue: function */
 367               	/* frame size = 0 */
 368               	/* stack size = 2 */
 369               	.L__stack_usage = 2
 370 0004 EC01      		movw r28,r24
 152:quantum/quantum.c ****   register_code16(code);
 371               		.loc 1 152 3 is_stmt 1 view .LVU70
 372 0006 0E94 0000 		call register_code16
 373               	.LVL32:
 153:quantum/quantum.c ****   #if TAP_CODE_DELAY > 0
 154:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 155:quantum/quantum.c ****   #endif
 156:quantum/quantum.c ****   unregister_code16(code);
 374               		.loc 1 156 3 view .LVU71
 375 000a CE01      		movw r24,r28
 376               	/* epilogue start */
 157:quantum/quantum.c **** }
 377               		.loc 1 157 1 is_stmt 0 view .LVU72
 378 000c DF91      		pop r29
 379 000e CF91      		pop r28
 380               	.LVL33:
 156:quantum/quantum.c **** }
 381               		.loc 1 156 3 view .LVU73
 382 0010 0C94 0000 		jmp unregister_code16
 383               	.LVL34:
 156:quantum/quantum.c **** }
 384               		.loc 1 156 3 view .LVU74
 385               		.cfi_endproc
 386               	.LFE24:
 388               		.section	.text.process_action_kb,"ax",@progbits
 389               		.weak	process_action_kb
 391               	process_action_kb:
 392               	.LVL35:
 393               	.LFB25:
 158:quantum/quantum.c **** 
 159:quantum/quantum.c **** __attribute__ ((weak))
 160:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 394               		.loc 1 160 45 is_stmt 1 view -0
 395               		.cfi_startproc
 396               	/* prologue: function */
 397               	/* frame size = 0 */
 398               	/* stack size = 0 */
 399               	.L__stack_usage = 0
 161:quantum/quantum.c ****   return true;
 400               		.loc 1 161 3 view .LVU76
 162:quantum/quantum.c **** }
 401               		.loc 1 162 1 is_stmt 0 view .LVU77
 402 0000 81E0      		ldi r24,lo8(1)
 403               	.LVL36:
 404               	/* epilogue start */
 405               		.loc 1 162 1 view .LVU78
 406 0002 0895      		ret
 407               		.cfi_endproc
 408               	.LFE25:
 410               		.section	.text.process_record_user,"ax",@progbits
 411               		.weak	process_record_user
 413               	process_record_user:
 414               	.LVL37:
 415               	.LFB27:
 163:quantum/quantum.c **** 
 164:quantum/quantum.c **** __attribute__ ((weak))
 165:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
 166:quantum/quantum.c ****   return process_record_user(keycode, record);
 167:quantum/quantum.c **** }
 168:quantum/quantum.c **** 
 169:quantum/quantum.c **** __attribute__ ((weak))
 170:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 416               		.loc 1 170 65 is_stmt 1 view -0
 417               		.cfi_startproc
 418               	/* prologue: function */
 419               	/* frame size = 0 */
 420               	/* stack size = 0 */
 421               	.L__stack_usage = 0
 171:quantum/quantum.c ****   return true;
 422               		.loc 1 171 3 view .LVU80
 172:quantum/quantum.c **** }
 423               		.loc 1 172 1 is_stmt 0 view .LVU81
 424 0000 81E0      		ldi r24,lo8(1)
 425               	.LVL38:
 426               	/* epilogue start */
 427               		.loc 1 172 1 view .LVU82
 428 0002 0895      		ret
 429               		.cfi_endproc
 430               	.LFE27:
 432               		.section	.text.process_record_kb,"ax",@progbits
 433               		.weak	process_record_kb
 435               	process_record_kb:
 436               	.LVL39:
 437               	.LFB26:
 165:quantum/quantum.c ****   return process_record_user(keycode, record);
 438               		.loc 1 165 63 is_stmt 1 view -0
 439               		.cfi_startproc
 440               	/* prologue: function */
 441               	/* frame size = 0 */
 442               	/* stack size = 0 */
 443               	.L__stack_usage = 0
 166:quantum/quantum.c **** }
 444               		.loc 1 166 3 view .LVU84
 166:quantum/quantum.c **** }
 445               		.loc 1 166 10 is_stmt 0 view .LVU85
 446 0000 0C94 0000 		jmp process_record_user
 447               	.LVL40:
 166:quantum/quantum.c **** }
 448               		.loc 1 166 10 view .LVU86
 449               		.cfi_endproc
 450               	.LFE26:
 452               		.section	.text.get_event_keycode,"ax",@progbits
 453               	.global	get_event_keycode
 455               	get_event_keycode:
 456               	.LFB30:
 173:quantum/quantum.c **** 
 174:quantum/quantum.c **** void reset_keyboard(void) {
 175:quantum/quantum.c ****   clear_keyboard();
 176:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 177:quantum/quantum.c ****   process_midi_all_notes_off();
 178:quantum/quantum.c **** #endif
 179:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 180:quantum/quantum.c ****   #ifndef NO_MUSIC_MODE
 181:quantum/quantum.c ****     music_all_notes_off();
 182:quantum/quantum.c ****   #endif
 183:quantum/quantum.c ****   uint16_t timer_start = timer_read();
 184:quantum/quantum.c ****   PLAY_SONG(goodbye_song);
 185:quantum/quantum.c ****   shutdown_user();
 186:quantum/quantum.c ****   while(timer_elapsed(timer_start) < 250)
 187:quantum/quantum.c ****     wait_ms(1);
 188:quantum/quantum.c ****   stop_all_notes();
 189:quantum/quantum.c **** #else
 190:quantum/quantum.c ****   shutdown_user();
 191:quantum/quantum.c ****   wait_ms(250);
 192:quantum/quantum.c **** #endif
 193:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 194:quantum/quantum.c ****   haptic_shutdown();
 195:quantum/quantum.c **** #endif
 196:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 197:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 198:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 199:quantum/quantum.c **** #endif
 200:quantum/quantum.c ****   bootloader_jump();
 201:quantum/quantum.c **** }
 202:quantum/quantum.c **** 
 203:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 204:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 205:quantum/quantum.c ****  */
 206:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 207:quantum/quantum.c **** 
 208:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 209:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record) {
 210:quantum/quantum.c ****   return get_event_keycode(record->event);
 211:quantum/quantum.c **** }
 212:quantum/quantum.c **** 
 213:quantum/quantum.c **** 
 214:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 215:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 216:quantum/quantum.c ****  */
 217:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event) {
 457               		.loc 1 217 46 is_stmt 1 view -0
 458               		.cfi_startproc
 459 0000 1F93      		push r17
 460               	.LCFI10:
 461               		.cfi_def_cfa_offset 3
 462               		.cfi_offset 17, -2
 463 0002 CF93      		push r28
 464               	.LCFI11:
 465               		.cfi_def_cfa_offset 4
 466               		.cfi_offset 28, -3
 467 0004 DF93      		push r29
 468               	.LCFI12:
 469               		.cfi_def_cfa_offset 5
 470               		.cfi_offset 29, -4
 471 0006 00D0      		rcall .
 472 0008 00D0      		rcall .
 473 000a 0F92      		push __tmp_reg__
 474               	.LCFI13:
 475               		.cfi_def_cfa_offset 10
 476 000c CDB7      		in r28,__SP_L__
 477 000e DEB7      		in r29,__SP_H__
 478               	.LCFI14:
 479               		.cfi_def_cfa_register 28
 480               	/* prologue: function */
 481               	/* frame size = 5 */
 482               	/* stack size = 8 */
 483               	.L__stack_usage = 8
 484 0010 4983      		std Y+1,r20
 485 0012 5A83      		std Y+2,r21
 486 0014 6B83      		std Y+3,r22
 218:quantum/quantum.c **** 
 219:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 220:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 221:quantum/quantum.c ****     if (!disable_action_cache) {
 487               		.loc 1 221 5 view .LVU88
 488               		.loc 1 221 8 is_stmt 0 view .LVU89
 489 0016 2091 0000 		lds r18,disable_action_cache
 490 001a 8981      		ldd r24,Y+1
 491 001c 9A81      		ldd r25,Y+2
 492 001e 2111      		cpse r18,__zero_reg__
 493 0020 00C0      		rjmp .L39
 494               	.LBB26:
 222:quantum/quantum.c ****       uint8_t layer;
 495               		.loc 1 222 7 is_stmt 1 view .LVU90
 223:quantum/quantum.c **** 
 224:quantum/quantum.c ****       if (event.pressed) {
 496               		.loc 1 224 7 view .LVU91
 497               		.loc 1 224 10 is_stmt 0 view .LVU92
 498 0022 6623      		tst r22
 499 0024 01F0      		breq .L40
 225:quantum/quantum.c ****         layer = layer_switch_get_layer(event.key);
 500               		.loc 1 225 9 is_stmt 1 view .LVU93
 501               		.loc 1 225 17 is_stmt 0 view .LVU94
 502 0026 0E94 0000 		call layer_switch_get_layer
 503               	.LVL41:
 504 002a 182F      		mov r17,r24
 505               	.LVL42:
 226:quantum/quantum.c ****         update_source_layers_cache(event.key, layer);
 506               		.loc 1 226 9 is_stmt 1 view .LVU95
 507 002c 682F      		mov r22,r24
 508 002e 8981      		ldd r24,Y+1
 509 0030 9A81      		ldd r25,Y+2
 510 0032 0E94 0000 		call update_source_layers_cache
 511               	.LVL43:
 512               	.L41:
 227:quantum/quantum.c ****       } else {
 228:quantum/quantum.c ****         layer = read_source_layers_cache(event.key);
 229:quantum/quantum.c ****       }
 230:quantum/quantum.c ****       return keymap_key_to_keycode(layer, event.key);
 513               		.loc 1 230 7 view .LVU96
 514               		.loc 1 230 14 is_stmt 0 view .LVU97
 515 0036 6981      		ldd r22,Y+1
 516 0038 7A81      		ldd r23,Y+2
 517 003a 812F      		mov r24,r17
 518               	.LVL44:
 519               	.L42:
 520               	/* epilogue start */
 521               		.loc 1 230 14 view .LVU98
 522               	.LBE26:
 231:quantum/quantum.c ****     } else
 232:quantum/quantum.c ****   #endif
 233:quantum/quantum.c ****     return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 234:quantum/quantum.c **** }
 523               		.loc 1 234 1 view .LVU99
 524 003c 0F90      		pop __tmp_reg__
 525 003e 0F90      		pop __tmp_reg__
 526 0040 0F90      		pop __tmp_reg__
 527 0042 0F90      		pop __tmp_reg__
 528 0044 0F90      		pop __tmp_reg__
 529 0046 DF91      		pop r29
 530 0048 CF91      		pop r28
 531 004a 1F91      		pop r17
 233:quantum/quantum.c **** }
 532               		.loc 1 233 12 view .LVU100
 533 004c 0C94 0000 		jmp keymap_key_to_keycode
 534               	.LVL45:
 535               	.L40:
 536               	.LBB27:
 228:quantum/quantum.c ****       }
 537               		.loc 1 228 9 is_stmt 1 view .LVU101
 228:quantum/quantum.c ****       }
 538               		.loc 1 228 17 is_stmt 0 view .LVU102
 539 0050 0E94 0000 		call read_source_layers_cache
 540               	.LVL46:
 541 0054 182F      		mov r17,r24
 542               	.LVL47:
 228:quantum/quantum.c ****       }
 543               		.loc 1 228 17 view .LVU103
 544 0056 00C0      		rjmp .L41
 545               	.LVL48:
 546               	.L39:
 228:quantum/quantum.c ****       }
 547               		.loc 1 228 17 view .LVU104
 548               	.LBE27:
 233:quantum/quantum.c **** }
 549               		.loc 1 233 5 is_stmt 1 view .LVU105
 233:quantum/quantum.c **** }
 550               		.loc 1 233 12 is_stmt 0 view .LVU106
 551 0058 0E94 0000 		call layer_switch_get_layer
 552               	.LVL49:
 553 005c 6981      		ldd r22,Y+1
 554 005e 7A81      		ldd r23,Y+2
 555 0060 00C0      		rjmp .L42
 556               		.cfi_endproc
 557               	.LFE30:
 559               		.section	.text.get_record_keycode,"ax",@progbits
 560               	.global	get_record_keycode
 562               	get_record_keycode:
 563               	.LVL50:
 564               	.LFB29:
 209:quantum/quantum.c ****   return get_event_keycode(record->event);
 565               		.loc 1 209 50 is_stmt 1 view -0
 566               		.cfi_startproc
 567               	/* prologue: function */
 568               	/* frame size = 0 */
 569               	/* stack size = 0 */
 570               	.L__stack_usage = 0
 209:quantum/quantum.c ****   return get_event_keycode(record->event);
 571               		.loc 1 209 50 is_stmt 0 view .LVU108
 572 0000 FC01      		movw r30,r24
 210:quantum/quantum.c **** }
 573               		.loc 1 210 3 is_stmt 1 view .LVU109
 210:quantum/quantum.c **** }
 574               		.loc 1 210 10 is_stmt 0 view .LVU110
 575 0002 4081      		ld r20,Z
 576 0004 5181      		ldd r21,Z+1
 577 0006 6281      		ldd r22,Z+2
 578 0008 7381      		ldd r23,Z+3
 579 000a 8481      		ldd r24,Z+4
 580               	.LVL51:
 210:quantum/quantum.c **** }
 581               		.loc 1 210 10 view .LVU111
 582 000c 0C94 0000 		jmp get_event_keycode
 583               	.LVL52:
 210:quantum/quantum.c **** }
 584               		.loc 1 210 10 view .LVU112
 585               		.cfi_endproc
 586               	.LFE29:
 588               		.section	.text.send_char,"ax",@progbits
 589               	.global	send_char
 591               	send_char:
 592               	.LVL53:
 593               	.LFB36:
 235:quantum/quantum.c **** 
 236:quantum/quantum.c **** /* Main keycode processing function. Hands off handling to other functions,
 237:quantum/quantum.c ****  * then processes internal Quantum keycodes, then processes ACTIONs.
 238:quantum/quantum.c ****  */
 239:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 240:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 241:quantum/quantum.c **** 
 242:quantum/quantum.c ****     // This is how you use actions here
 243:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 244:quantum/quantum.c ****     //   action_t action;
 245:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 246:quantum/quantum.c ****     //   process_action(record, action);
 247:quantum/quantum.c ****     //   return false;
 248:quantum/quantum.c ****     // }
 249:quantum/quantum.c **** 
 250:quantum/quantum.c ****   #ifdef VELOCIKEY_ENABLE
 251:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) { velocikey_accelerate(); }
 252:quantum/quantum.c ****   #endif
 253:quantum/quantum.c **** 
 254:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 255:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 256:quantum/quantum.c ****   #endif
 257:quantum/quantum.c **** 
 258:quantum/quantum.c ****   if (!(
 259:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 260:quantum/quantum.c ****     // Must run first to be able to mask key_up events.
 261:quantum/quantum.c ****     process_key_lock(&keycode, record) &&
 262:quantum/quantum.c ****   #endif
 263:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 264:quantum/quantum.c ****     process_clicky(keycode, record) &&
 265:quantum/quantum.c ****   #endif //AUDIO_CLICKY
 266:quantum/quantum.c ****   #ifdef HAPTIC_ENABLE
 267:quantum/quantum.c ****     process_haptic(keycode, record) &&
 268:quantum/quantum.c ****   #endif //HAPTIC_ENABLE
 269:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE)
 270:quantum/quantum.c ****     process_rgb_matrix(keycode, record) &&
 271:quantum/quantum.c ****   #endif
 272:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 273:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 274:quantum/quantum.c ****     process_midi(keycode, record) &&
 275:quantum/quantum.c ****   #endif
 276:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 277:quantum/quantum.c ****     process_audio(keycode, record) &&
 278:quantum/quantum.c ****   #endif
 279:quantum/quantum.c ****   #ifdef STENO_ENABLE
 280:quantum/quantum.c ****     process_steno(keycode, record) &&
 281:quantum/quantum.c ****   #endif
 282:quantum/quantum.c ****   #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC
 283:quantum/quantum.c ****     process_music(keycode, record) &&
 284:quantum/quantum.c ****   #endif
 285:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 286:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 287:quantum/quantum.c ****   #endif
 288:quantum/quantum.c ****   #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 289:quantum/quantum.c ****     process_unicode_common(keycode, record) &&
 290:quantum/quantum.c ****   #endif
 291:quantum/quantum.c ****   #ifdef LEADER_ENABLE
 292:quantum/quantum.c ****     process_leader(keycode, record) &&
 293:quantum/quantum.c ****   #endif
 294:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 295:quantum/quantum.c ****     process_combo(keycode, record) &&
 296:quantum/quantum.c ****   #endif
 297:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 298:quantum/quantum.c ****     process_printer(keycode, record) &&
 299:quantum/quantum.c ****   #endif
 300:quantum/quantum.c ****   #ifdef AUTO_SHIFT_ENABLE
 301:quantum/quantum.c ****     process_auto_shift(keycode, record) &&
 302:quantum/quantum.c ****   #endif
 303:quantum/quantum.c ****   #ifdef TERMINAL_ENABLE
 304:quantum/quantum.c ****     process_terminal(keycode, record) &&
 305:quantum/quantum.c ****   #endif
 306:quantum/quantum.c ****   #ifdef SPACE_CADET_ENABLE
 307:quantum/quantum.c ****     process_space_cadet(keycode, record) &&
 308:quantum/quantum.c ****   #endif
 309:quantum/quantum.c ****       true)) {
 310:quantum/quantum.c ****     return false;
 311:quantum/quantum.c ****   }
 312:quantum/quantum.c **** 
 313:quantum/quantum.c ****   // Shift / paren setup
 314:quantum/quantum.c **** 
 315:quantum/quantum.c ****   switch(keycode) {
 316:quantum/quantum.c ****     case RESET:
 317:quantum/quantum.c ****       if (record->event.pressed) {
 318:quantum/quantum.c ****         reset_keyboard();
 319:quantum/quantum.c ****       }
 320:quantum/quantum.c ****     return false;
 321:quantum/quantum.c ****     case DEBUG:
 322:quantum/quantum.c ****       if (record->event.pressed) {
 323:quantum/quantum.c ****         debug_enable ^= 1;
 324:quantum/quantum.c ****         if (debug_enable) {
 325:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 326:quantum/quantum.c ****         } else {
 327:quantum/quantum.c ****           print("DEBUG: disabled.\n");
 328:quantum/quantum.c ****         }
 329:quantum/quantum.c ****       }
 330:quantum/quantum.c ****     return false;
 331:quantum/quantum.c ****     case EEPROM_RESET:
 332:quantum/quantum.c ****       if (record->event.pressed) {
 333:quantum/quantum.c ****           eeconfig_init();
 334:quantum/quantum.c ****       }
 335:quantum/quantum.c ****     return false;
 336:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 337:quantum/quantum.c ****   case FC_TOG:
 338:quantum/quantum.c ****     if (record->event.pressed) {
 339:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 340:quantum/quantum.c ****     }
 341:quantum/quantum.c ****     return false;
 342:quantum/quantum.c ****   case FC_ON:
 343:quantum/quantum.c ****     if (record->event.pressed) {
 344:quantum/quantum.c ****       FAUXCLICKY_ON;
 345:quantum/quantum.c ****     }
 346:quantum/quantum.c ****     return false;
 347:quantum/quantum.c ****   case FC_OFF:
 348:quantum/quantum.c ****     if (record->event.pressed) {
 349:quantum/quantum.c ****       FAUXCLICKY_OFF;
 350:quantum/quantum.c ****     }
 351:quantum/quantum.c ****     return false;
 352:quantum/quantum.c ****   #endif
 353:quantum/quantum.c ****   #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 354:quantum/quantum.c ****   case RGB_TOG:
 355:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 356:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 357:quantum/quantum.c ****     if (record->event.pressed) {
 358:quantum/quantum.c ****     #else
 359:quantum/quantum.c ****     if (!record->event.pressed) {
 360:quantum/quantum.c ****     #endif
 361:quantum/quantum.c ****       rgblight_toggle();
 362:quantum/quantum.c ****     }
 363:quantum/quantum.c ****     return false;
 364:quantum/quantum.c ****   case RGB_MODE_FORWARD:
 365:quantum/quantum.c ****     if (record->event.pressed) {
 366:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 367:quantum/quantum.c ****       if(shifted) {
 368:quantum/quantum.c ****         rgblight_step_reverse();
 369:quantum/quantum.c ****       }
 370:quantum/quantum.c ****       else {
 371:quantum/quantum.c ****         rgblight_step();
 372:quantum/quantum.c ****       }
 373:quantum/quantum.c ****     }
 374:quantum/quantum.c ****     return false;
 375:quantum/quantum.c ****   case RGB_MODE_REVERSE:
 376:quantum/quantum.c ****     if (record->event.pressed) {
 377:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 378:quantum/quantum.c ****       if(shifted) {
 379:quantum/quantum.c ****         rgblight_step();
 380:quantum/quantum.c ****       }
 381:quantum/quantum.c ****       else {
 382:quantum/quantum.c ****         rgblight_step_reverse();
 383:quantum/quantum.c ****       }
 384:quantum/quantum.c ****     }
 385:quantum/quantum.c ****     return false;
 386:quantum/quantum.c ****   case RGB_HUI:
 387:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 388:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 389:quantum/quantum.c ****     if (record->event.pressed) {
 390:quantum/quantum.c ****     #else
 391:quantum/quantum.c ****     if (!record->event.pressed) {
 392:quantum/quantum.c ****     #endif
 393:quantum/quantum.c ****       rgblight_increase_hue();
 394:quantum/quantum.c ****     }
 395:quantum/quantum.c ****     return false;
 396:quantum/quantum.c ****   case RGB_HUD:
 397:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 398:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 399:quantum/quantum.c ****     if (record->event.pressed) {
 400:quantum/quantum.c ****     #else
 401:quantum/quantum.c ****     if (!record->event.pressed) {
 402:quantum/quantum.c ****     #endif
 403:quantum/quantum.c ****       rgblight_decrease_hue();
 404:quantum/quantum.c ****     }
 405:quantum/quantum.c ****     return false;
 406:quantum/quantum.c ****   case RGB_SAI:
 407:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 408:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 409:quantum/quantum.c ****     if (record->event.pressed) {
 410:quantum/quantum.c ****     #else
 411:quantum/quantum.c ****     if (!record->event.pressed) {
 412:quantum/quantum.c ****     #endif
 413:quantum/quantum.c ****       rgblight_increase_sat();
 414:quantum/quantum.c ****     }
 415:quantum/quantum.c ****     return false;
 416:quantum/quantum.c ****   case RGB_SAD:
 417:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 418:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 419:quantum/quantum.c ****     if (record->event.pressed) {
 420:quantum/quantum.c ****     #else
 421:quantum/quantum.c ****     if (!record->event.pressed) {
 422:quantum/quantum.c ****     #endif
 423:quantum/quantum.c ****       rgblight_decrease_sat();
 424:quantum/quantum.c ****     }
 425:quantum/quantum.c ****     return false;
 426:quantum/quantum.c ****   case RGB_VAI:
 427:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 428:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 429:quantum/quantum.c ****     if (record->event.pressed) {
 430:quantum/quantum.c ****     #else
 431:quantum/quantum.c ****     if (!record->event.pressed) {
 432:quantum/quantum.c ****     #endif
 433:quantum/quantum.c ****       rgblight_increase_val();
 434:quantum/quantum.c ****     }
 435:quantum/quantum.c ****     return false;
 436:quantum/quantum.c ****   case RGB_VAD:
 437:quantum/quantum.c ****     // Split keyboards need to trigger on key-up for edge-case issue
 438:quantum/quantum.c ****     #ifndef SPLIT_KEYBOARD
 439:quantum/quantum.c ****     if (record->event.pressed) {
 440:quantum/quantum.c ****     #else
 441:quantum/quantum.c ****     if (!record->event.pressed) {
 442:quantum/quantum.c ****     #endif
 443:quantum/quantum.c ****       rgblight_decrease_val();
 444:quantum/quantum.c ****     }
 445:quantum/quantum.c ****     return false;
 446:quantum/quantum.c ****   case RGB_SPI:
 447:quantum/quantum.c ****     if (record->event.pressed) {
 448:quantum/quantum.c ****       rgblight_increase_speed();
 449:quantum/quantum.c ****     }
 450:quantum/quantum.c ****     return false;
 451:quantum/quantum.c ****   case RGB_SPD:
 452:quantum/quantum.c ****     if (record->event.pressed) {
 453:quantum/quantum.c ****       rgblight_decrease_speed();
 454:quantum/quantum.c ****     }
 455:quantum/quantum.c ****     return false;
 456:quantum/quantum.c ****   case RGB_MODE_PLAIN:
 457:quantum/quantum.c ****     if (record->event.pressed) {
 458:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 459:quantum/quantum.c ****     }
 460:quantum/quantum.c ****     return false;
 461:quantum/quantum.c ****   case RGB_MODE_BREATHE:
 462:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_BREATHING
 463:quantum/quantum.c ****     if (record->event.pressed) {
 464:quantum/quantum.c ****       if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) &&
 465:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 466:quantum/quantum.c ****         rgblight_step();
 467:quantum/quantum.c ****       } else {
 468:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_BREATHING);
 469:quantum/quantum.c ****       }
 470:quantum/quantum.c ****     }
 471:quantum/quantum.c ****   #endif
 472:quantum/quantum.c ****     return false;
 473:quantum/quantum.c ****   case RGB_MODE_RAINBOW:
 474:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 475:quantum/quantum.c ****     if (record->event.pressed) {
 476:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) &&
 477:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 478:quantum/quantum.c ****         rgblight_step();
 479:quantum/quantum.c ****       } else {
 480:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_RAINBOW_MOOD);
 481:quantum/quantum.c ****       }
 482:quantum/quantum.c ****     }
 483:quantum/quantum.c ****   #endif
 484:quantum/quantum.c ****     return false;
 485:quantum/quantum.c ****   case RGB_MODE_SWIRL:
 486:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 487:quantum/quantum.c ****     if (record->event.pressed) {
 488:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) &&
 489:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 490:quantum/quantum.c ****         rgblight_step();
 491:quantum/quantum.c ****       } else {
 492:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_RAINBOW_SWIRL);
 493:quantum/quantum.c ****       }
 494:quantum/quantum.c ****     }
 495:quantum/quantum.c ****   #endif
 496:quantum/quantum.c ****     return false;
 497:quantum/quantum.c ****   case RGB_MODE_SNAKE:
 498:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_SNAKE
 499:quantum/quantum.c ****     if (record->event.pressed) {
 500:quantum/quantum.c ****       if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) &&
 501:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 502:quantum/quantum.c ****         rgblight_step();
 503:quantum/quantum.c ****       } else {
 504:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_SNAKE);
 505:quantum/quantum.c ****       }
 506:quantum/quantum.c ****     }
 507:quantum/quantum.c ****   #endif
 508:quantum/quantum.c ****     return false;
 509:quantum/quantum.c ****   case RGB_MODE_KNIGHT:
 510:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_KNIGHT
 511:quantum/quantum.c ****     if (record->event.pressed) {
 512:quantum/quantum.c ****       if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) &&
 513:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 514:quantum/quantum.c ****         rgblight_step();
 515:quantum/quantum.c ****       } else {
 516:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_KNIGHT);
 517:quantum/quantum.c ****       }
 518:quantum/quantum.c ****     }
 519:quantum/quantum.c ****   #endif
 520:quantum/quantum.c ****     return false;
 521:quantum/quantum.c ****   case RGB_MODE_XMAS:
 522:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_CHRISTMAS
 523:quantum/quantum.c ****     if (record->event.pressed) {
 524:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 525:quantum/quantum.c ****     }
 526:quantum/quantum.c ****   #endif
 527:quantum/quantum.c ****     return false;
 528:quantum/quantum.c ****   case RGB_MODE_GRADIENT:
 529:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
 530:quantum/quantum.c ****     if (record->event.pressed) {
 531:quantum/quantum.c ****       if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) &&
 532:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 533:quantum/quantum.c ****         rgblight_step();
 534:quantum/quantum.c ****       } else {
 535:quantum/quantum.c ****         rgblight_mode(RGBLIGHT_MODE_STATIC_GRADIENT);
 536:quantum/quantum.c ****       }
 537:quantum/quantum.c ****     }
 538:quantum/quantum.c ****   #endif
 539:quantum/quantum.c ****     return false;
 540:quantum/quantum.c ****   case RGB_MODE_RGBTEST:
 541:quantum/quantum.c ****   #ifdef RGBLIGHT_EFFECT_RGB_TEST
 542:quantum/quantum.c ****     if (record->event.pressed) {
 543:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 544:quantum/quantum.c ****     }
 545:quantum/quantum.c ****   #endif
 546:quantum/quantum.c ****     return false;
 547:quantum/quantum.c ****   #endif // defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 548:quantum/quantum.c ****   #ifdef VELOCIKEY_ENABLE
 549:quantum/quantum.c ****     case VLK_TOG:
 550:quantum/quantum.c ****       if (record->event.pressed) {
 551:quantum/quantum.c ****         velocikey_toggle();
 552:quantum/quantum.c ****       }
 553:quantum/quantum.c ****       return false;
 554:quantum/quantum.c ****   #endif
 555:quantum/quantum.c ****   #ifdef PROTOCOL_LUFA
 556:quantum/quantum.c ****     case OUT_AUTO:
 557:quantum/quantum.c ****       if (record->event.pressed) {
 558:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 559:quantum/quantum.c ****       }
 560:quantum/quantum.c ****       return false;
 561:quantum/quantum.c ****     case OUT_USB:
 562:quantum/quantum.c ****       if (record->event.pressed) {
 563:quantum/quantum.c ****         set_output(OUTPUT_USB);
 564:quantum/quantum.c ****       }
 565:quantum/quantum.c ****       return false;
 566:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 567:quantum/quantum.c ****     case OUT_BT:
 568:quantum/quantum.c ****       if (record->event.pressed) {
 569:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 570:quantum/quantum.c ****       }
 571:quantum/quantum.c ****       return false;
 572:quantum/quantum.c ****     #endif
 573:quantum/quantum.c ****     #endif
 574:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_ALT_GUI:
 575:quantum/quantum.c ****     case MAGIC_SWAP_LCTL_LGUI ... MAGIC_TOGGLE_CTL_GUI:
 576:quantum/quantum.c ****       if (record->event.pressed) {
 577:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 578:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 579:quantum/quantum.c ****             eeconfig_init();
 580:quantum/quantum.c ****         }
 581:quantum/quantum.c ****         /* keymap config */
 582:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 583:quantum/quantum.c ****         switch (keycode)
 584:quantum/quantum.c ****         {
 585:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 586:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 587:quantum/quantum.c ****             break;
 588:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 589:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 590:quantum/quantum.c ****             break;
 591:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 592:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 593:quantum/quantum.c ****             break;
 594:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 595:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 596:quantum/quantum.c ****             break;
 597:quantum/quantum.c ****           case MAGIC_SWAP_LCTL_LGUI:
 598:quantum/quantum.c ****             keymap_config.swap_lctl_lgui = true;
 599:quantum/quantum.c ****             break;
 600:quantum/quantum.c ****           case MAGIC_SWAP_RCTL_RGUI:
 601:quantum/quantum.c ****             keymap_config.swap_rctl_rgui = true;
 602:quantum/quantum.c ****             break;
 603:quantum/quantum.c ****           case MAGIC_NO_GUI:
 604:quantum/quantum.c ****             keymap_config.no_gui = true;
 605:quantum/quantum.c ****             break;
 606:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 607:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 608:quantum/quantum.c ****             break;
 609:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 610:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 611:quantum/quantum.c ****             break;
 612:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 613:quantum/quantum.c ****             keymap_config.nkro = true;
 614:quantum/quantum.c ****             break;
 615:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 616:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = true;
 617:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 618:quantum/quantum.c ****               PLAY_SONG(ag_swap_song);
 619:quantum/quantum.c ****             #endif
 620:quantum/quantum.c ****             break;
 621:quantum/quantum.c ****           case MAGIC_SWAP_CTL_GUI:
 622:quantum/quantum.c ****             keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = true;
 623:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 624:quantum/quantum.c ****               PLAY_SONG(cg_swap_song);
 625:quantum/quantum.c ****             #endif
 626:quantum/quantum.c ****             break;
 627:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 628:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 629:quantum/quantum.c ****             break;
 630:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 631:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 632:quantum/quantum.c ****             break;
 633:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 634:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 635:quantum/quantum.c ****             break;
 636:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 637:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 638:quantum/quantum.c ****             break;
 639:quantum/quantum.c ****           case MAGIC_UNSWAP_LCTL_LGUI:
 640:quantum/quantum.c ****             keymap_config.swap_lctl_lgui = false;
 641:quantum/quantum.c ****             break;
 642:quantum/quantum.c ****           case MAGIC_UNSWAP_RCTL_RGUI:
 643:quantum/quantum.c ****             keymap_config.swap_rctl_rgui = false;
 644:quantum/quantum.c ****             break;
 645:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 646:quantum/quantum.c ****             keymap_config.no_gui = false;
 647:quantum/quantum.c ****             break;
 648:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 649:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 650:quantum/quantum.c ****             break;
 651:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 652:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 653:quantum/quantum.c ****             break;
 654:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 655:quantum/quantum.c ****             keymap_config.nkro = false;
 656:quantum/quantum.c ****             break;
 657:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 658:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = false;
 659:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 660:quantum/quantum.c ****               PLAY_SONG(ag_norm_song);
 661:quantum/quantum.c ****             #endif
 662:quantum/quantum.c ****             break;
 663:quantum/quantum.c ****           case MAGIC_UNSWAP_CTL_GUI:
 664:quantum/quantum.c ****             keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = false;
 665:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 666:quantum/quantum.c ****               PLAY_SONG(cg_norm_song);
 667:quantum/quantum.c ****             #endif
 668:quantum/quantum.c ****             break;
 669:quantum/quantum.c ****           case MAGIC_TOGGLE_ALT_GUI:
 670:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 671:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 672:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 673:quantum/quantum.c ****               if (keymap_config.swap_ralt_rgui) {
 674:quantum/quantum.c ****                 PLAY_SONG(ag_swap_song);
 675:quantum/quantum.c ****               } else {
 676:quantum/quantum.c ****                 PLAY_SONG(ag_norm_song);
 677:quantum/quantum.c ****               }
 678:quantum/quantum.c ****             #endif
 679:quantum/quantum.c ****             break;
 680:quantum/quantum.c ****           case MAGIC_TOGGLE_CTL_GUI:
 681:quantum/quantum.c ****             keymap_config.swap_lctl_lgui = !keymap_config.swap_lctl_lgui;
 682:quantum/quantum.c ****             keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 683:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 684:quantum/quantum.c ****               if (keymap_config.swap_rctl_rgui) {
 685:quantum/quantum.c ****                 PLAY_SONG(cg_swap_song);
 686:quantum/quantum.c ****               } else {
 687:quantum/quantum.c ****                 PLAY_SONG(cg_norm_song);
 688:quantum/quantum.c ****               }
 689:quantum/quantum.c ****             #endif
 690:quantum/quantum.c ****             break;
 691:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 692:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 693:quantum/quantum.c ****             break;
 694:quantum/quantum.c ****           default:
 695:quantum/quantum.c ****             break;
 696:quantum/quantum.c ****         }
 697:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 698:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 699:quantum/quantum.c **** 
 700:quantum/quantum.c ****         return false;
 701:quantum/quantum.c ****       }
 702:quantum/quantum.c ****       break;
 703:quantum/quantum.c **** 
 704:quantum/quantum.c ****     case GRAVE_ESC: {
 705:quantum/quantum.c ****       uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)
 706:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 707:quantum/quantum.c **** 
 708:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 709:quantum/quantum.c ****       // if ALT is pressed, ESC is always sent
 710:quantum/quantum.c ****       // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 711:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 712:quantum/quantum.c ****         shifted = 0;
 713:quantum/quantum.c ****       }
 714:quantum/quantum.c **** #endif
 715:quantum/quantum.c **** 
 716:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 717:quantum/quantum.c ****       // if CTRL is pressed, ESC is always sent
 718:quantum/quantum.c ****       // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 719:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 720:quantum/quantum.c ****         shifted = 0;
 721:quantum/quantum.c ****       }
 722:quantum/quantum.c **** #endif
 723:quantum/quantum.c **** 
 724:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 725:quantum/quantum.c ****       // if GUI is pressed, ESC is always sent
 726:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 727:quantum/quantum.c ****         shifted = 0;
 728:quantum/quantum.c ****       }
 729:quantum/quantum.c **** #endif
 730:quantum/quantum.c **** 
 731:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 732:quantum/quantum.c ****       // if SHIFT is pressed, ESC is always sent
 733:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 734:quantum/quantum.c ****         shifted = 0;
 735:quantum/quantum.c ****       }
 736:quantum/quantum.c **** #endif
 737:quantum/quantum.c **** 
 738:quantum/quantum.c ****       if (record->event.pressed) {
 739:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 740:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 741:quantum/quantum.c ****       }
 742:quantum/quantum.c ****       else {
 743:quantum/quantum.c ****         del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 744:quantum/quantum.c ****       }
 745:quantum/quantum.c **** 
 746:quantum/quantum.c ****       send_keyboard_report();
 747:quantum/quantum.c ****       return false;
 748:quantum/quantum.c ****     }
 749:quantum/quantum.c **** 
 750:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 751:quantum/quantum.c ****     case BL_BRTG: {
 752:quantum/quantum.c ****       if (record->event.pressed) {
 753:quantum/quantum.c ****         backlight_toggle_breathing();
 754:quantum/quantum.c ****       }
 755:quantum/quantum.c ****       return false;
 756:quantum/quantum.c ****     }
 757:quantum/quantum.c **** #endif
 758:quantum/quantum.c ****   }
 759:quantum/quantum.c **** 
 760:quantum/quantum.c ****   return process_action_kb(record);
 761:quantum/quantum.c **** }
 762:quantum/quantum.c **** 
 763:quantum/quantum.c **** __attribute__ ((weak))
 764:quantum/quantum.c **** const bool ascii_to_shift_lut[128] PROGMEM = {
 765:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 766:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 767:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 768:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 769:quantum/quantum.c **** 
 770:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 771:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 772:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 773:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 774:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 775:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 776:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 777:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 778:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 779:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 780:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 781:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 782:quantum/quantum.c **** };
 783:quantum/quantum.c **** 
 784:quantum/quantum.c **** __attribute__ ((weak))
 785:quantum/quantum.c **** const bool ascii_to_altgr_lut[128] PROGMEM = {
 786:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 787:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 788:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 789:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 790:quantum/quantum.c **** 
 791:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 792:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 793:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 794:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 795:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 796:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 797:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 798:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 799:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 800:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 801:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 802:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0
 803:quantum/quantum.c **** };
 804:quantum/quantum.c **** 
 805:quantum/quantum.c **** __attribute__ ((weak))
 806:quantum/quantum.c **** const uint8_t ascii_to_keycode_lut[128] PROGMEM = {
 807:quantum/quantum.c ****     // NUL   SOH      STX      ETX      EOT      ENQ      ACK      BEL
 808:quantum/quantum.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 809:quantum/quantum.c ****     // BS    TAB      LF       VT       FF       CR       SO       SI
 810:quantum/quantum.c ****     KC_BSPC, KC_TAB,  KC_ENT,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 811:quantum/quantum.c ****     // DLE   DC1      DC2      DC3      DC4      NAK      SYN      ETB
 812:quantum/quantum.c ****     XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 813:quantum/quantum.c ****     // CAN   EM       SUB      ESC      FS       GS       RS       US
 814:quantum/quantum.c ****     XXXXXXX, XXXXXXX, XXXXXXX, KC_ESC,  XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,
 815:quantum/quantum.c **** 
 816:quantum/quantum.c ****     //       !        "        #        $        %        &        '
 817:quantum/quantum.c ****     KC_SPC,  KC_1,    KC_QUOT, KC_3,    KC_4,    KC_5,    KC_7,    KC_QUOT,
 818:quantum/quantum.c ****     // (     )        *        +        ,        -        .        /
 819:quantum/quantum.c ****     KC_9,    KC_0,    KC_8,    KC_EQL,  KC_COMM, KC_MINS, KC_DOT,  KC_SLSH,
 820:quantum/quantum.c ****     // 0     1        2        3        4        5        6        7
 821:quantum/quantum.c ****     KC_0,    KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,
 822:quantum/quantum.c ****     // 8     9        :        ;        <        =        >        ?
 823:quantum/quantum.c ****     KC_8,    KC_9,    KC_SCLN, KC_SCLN, KC_COMM, KC_EQL,  KC_DOT,  KC_SLSH,
 824:quantum/quantum.c ****     // @     A        B        C        D        E        F        G
 825:quantum/quantum.c ****     KC_2,    KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 826:quantum/quantum.c ****     // H     I        J        K        L        M        N        O
 827:quantum/quantum.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 828:quantum/quantum.c ****     // P     Q        R        S        T        U        V        W
 829:quantum/quantum.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 830:quantum/quantum.c ****     // X     Y        Z        [        \        ]        ^        _
 831:quantum/quantum.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_6,    KC_MINS,
 832:quantum/quantum.c ****     // `     a        b        c        d        e        f        g
 833:quantum/quantum.c ****     KC_GRV,  KC_A,    KC_B,    KC_C,    KC_D,    KC_E,    KC_F,    KC_G,
 834:quantum/quantum.c ****     // h     i        j        k        l        m        n        o
 835:quantum/quantum.c ****     KC_H,    KC_I,    KC_J,    KC_K,    KC_L,    KC_M,    KC_N,    KC_O,
 836:quantum/quantum.c ****     // p     q        r        s        t        u        v        w
 837:quantum/quantum.c ****     KC_P,    KC_Q,    KC_R,    KC_S,    KC_T,    KC_U,    KC_V,    KC_W,
 838:quantum/quantum.c ****     // x     y        z        {        |        }        ~        DEL
 839:quantum/quantum.c ****     KC_X,    KC_Y,    KC_Z,    KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV,  KC_DEL
 840:quantum/quantum.c **** };
 841:quantum/quantum.c **** 
 842:quantum/quantum.c **** void send_string(const char *str) {
 843:quantum/quantum.c ****   send_string_with_delay(str, 0);
 844:quantum/quantum.c **** }
 845:quantum/quantum.c **** 
 846:quantum/quantum.c **** void send_string_P(const char *str) {
 847:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 848:quantum/quantum.c **** }
 849:quantum/quantum.c **** 
 850:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 851:quantum/quantum.c ****     while (1) {
 852:quantum/quantum.c ****         char ascii_code = *str;
 853:quantum/quantum.c ****         if (!ascii_code) break;
 854:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 855:quantum/quantum.c ****           // tap
 856:quantum/quantum.c ****           uint8_t keycode = *(++str);
 857:quantum/quantum.c ****           register_code(keycode);
 858:quantum/quantum.c ****           unregister_code(keycode);
 859:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 860:quantum/quantum.c ****           // down
 861:quantum/quantum.c ****           uint8_t keycode = *(++str);
 862:quantum/quantum.c ****           register_code(keycode);
 863:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 864:quantum/quantum.c ****           // up
 865:quantum/quantum.c ****           uint8_t keycode = *(++str);
 866:quantum/quantum.c ****           unregister_code(keycode);
 867:quantum/quantum.c ****         } else {
 868:quantum/quantum.c ****           send_char(ascii_code);
 869:quantum/quantum.c ****         }
 870:quantum/quantum.c ****         ++str;
 871:quantum/quantum.c ****         // interval
 872:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 873:quantum/quantum.c ****     }
 874:quantum/quantum.c **** }
 875:quantum/quantum.c **** 
 876:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 877:quantum/quantum.c ****     while (1) {
 878:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 879:quantum/quantum.c ****         if (!ascii_code) break;
 880:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 881:quantum/quantum.c ****           // tap
 882:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 883:quantum/quantum.c ****           register_code(keycode);
 884:quantum/quantum.c ****           unregister_code(keycode);
 885:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 886:quantum/quantum.c ****           // down
 887:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 888:quantum/quantum.c ****           register_code(keycode);
 889:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 890:quantum/quantum.c ****           // up
 891:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 892:quantum/quantum.c ****           unregister_code(keycode);
 893:quantum/quantum.c ****         } else {
 894:quantum/quantum.c ****           send_char(ascii_code);
 895:quantum/quantum.c ****         }
 896:quantum/quantum.c ****         ++str;
 897:quantum/quantum.c ****         // interval
 898:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 899:quantum/quantum.c ****     }
 900:quantum/quantum.c **** }
 901:quantum/quantum.c **** 
 902:quantum/quantum.c **** void send_char(char ascii_code) {
 594               		.loc 1 902 33 is_stmt 1 view -0
 595               		.cfi_startproc
 596               		.loc 1 902 33 is_stmt 0 view .LVU114
 597 0000 1F93      		push r17
 598               	.LCFI15:
 599               		.cfi_def_cfa_offset 3
 600               		.cfi_offset 17, -2
 601 0002 CF93      		push r28
 602               	.LCFI16:
 603               		.cfi_def_cfa_offset 4
 604               		.cfi_offset 28, -3
 605 0004 DF93      		push r29
 606               	.LCFI17:
 607               		.cfi_def_cfa_offset 5
 608               		.cfi_offset 29, -4
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 3 */
 612               	.L__stack_usage = 3
 903:quantum/quantum.c ****   uint8_t keycode = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 613               		.loc 1 903 3 is_stmt 1 view .LVU115
 614               	.LBB28:
 615               		.loc 1 903 21 view .LVU116
 616 0006 90E0      		ldi r25,0
 617               	.LVL54:
 618               		.loc 1 903 21 view .LVU117
 619               		.loc 1 903 21 view .LVU118
 620 0008 FC01      		movw r30,r24
 621 000a E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 622 000c F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 623               	.LVL55:
 624               		.loc 1 903 21 is_stmt 0 view .LVU119
 625               	/* #APP */
 626               	 ;  903 "quantum/quantum.c" 1
 627 000e 1491      		lpm r17, Z
 628               		
 629               	 ;  0 "" 2
 630               	.LVL56:
 631               		.loc 1 903 21 is_stmt 1 view .LVU120
 632               		.loc 1 903 21 is_stmt 0 view .LVU121
 633               	/* #NOAPP */
 634               	.LBE28:
 904:quantum/quantum.c ****   bool is_shifted = pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code]);
 635               		.loc 1 904 3 is_stmt 1 view .LVU122
 636               	.LBB29:
 637               		.loc 1 904 21 view .LVU123
 638               		.loc 1 904 21 view .LVU124
 639               		.loc 1 904 21 view .LVU125
 640 0010 FC01      		movw r30,r24
 641               	.LVL57:
 642               		.loc 1 904 21 is_stmt 0 view .LVU126
 643 0012 E050      		subi r30,lo8(-(ascii_to_shift_lut))
 644 0014 F040      		sbci r31,hi8(-(ascii_to_shift_lut))
 645               	.LVL58:
 646               		.loc 1 904 21 view .LVU127
 647               	/* #APP */
 648               	 ;  904 "quantum/quantum.c" 1
 649 0016 D491      		lpm r29, Z
 650               		
 651               	 ;  0 "" 2
 652               	.LVL59:
 653               		.loc 1 904 21 is_stmt 1 view .LVU128
 654               		.loc 1 904 21 is_stmt 0 view .LVU129
 655               	/* #NOAPP */
 656               	.LBE29:
 905:quantum/quantum.c ****   bool is_altgred = pgm_read_byte(&ascii_to_altgr_lut[(uint8_t)ascii_code]);
 657               		.loc 1 905 3 is_stmt 1 view .LVU130
 658               	.LBB30:
 659               		.loc 1 905 21 view .LVU131
 660               		.loc 1 905 21 view .LVU132
 661               		.loc 1 905 21 view .LVU133
 662 0018 8050      		subi r24,lo8(-(ascii_to_altgr_lut))
 663 001a 9040      		sbci r25,hi8(-(ascii_to_altgr_lut))
 664               	.LVL60:
 665               		.loc 1 905 21 is_stmt 0 view .LVU134
 666 001c FC01      		movw r30,r24
 667               	.LVL61:
 668               		.loc 1 905 21 view .LVU135
 669               	/* #APP */
 670               	 ;  905 "quantum/quantum.c" 1
 671 001e C491      		lpm r28, Z
 672               		
 673               	 ;  0 "" 2
 674               	.LVL62:
 675               		.loc 1 905 21 is_stmt 1 view .LVU136
 676               		.loc 1 905 21 is_stmt 0 view .LVU137
 677               	/* #NOAPP */
 678               	.LBE30:
 906:quantum/quantum.c **** 
 907:quantum/quantum.c ****   if (is_shifted) {
 679               		.loc 1 907 3 is_stmt 1 view .LVU138
 680               		.loc 1 907 6 is_stmt 0 view .LVU139
 681 0020 DD23      		tst r29
 682 0022 01F0      		breq .L45
 908:quantum/quantum.c ****     register_code(KC_LSFT);
 683               		.loc 1 908 5 is_stmt 1 view .LVU140
 684 0024 81EE      		ldi r24,lo8(-31)
 685               	.LVL63:
 686               		.loc 1 908 5 is_stmt 0 view .LVU141
 687 0026 0E94 0000 		call register_code
 688               	.LVL64:
 689               	.L45:
 909:quantum/quantum.c ****   }
 910:quantum/quantum.c ****   if (is_altgred) {
 690               		.loc 1 910 3 is_stmt 1 view .LVU142
 691               		.loc 1 910 6 is_stmt 0 view .LVU143
 692 002a CC23      		tst r28
 693 002c 01F0      		breq .L46
 911:quantum/quantum.c ****     register_code(KC_RALT);
 694               		.loc 1 911 5 is_stmt 1 view .LVU144
 695 002e 86EE      		ldi r24,lo8(-26)
 696 0030 0E94 0000 		call register_code
 697               	.LVL65:
 698               	.L46:
 912:quantum/quantum.c ****   }
 913:quantum/quantum.c ****   tap_code(keycode);
 699               		.loc 1 913 3 view .LVU145
 700 0034 812F      		mov r24,r17
 701 0036 0E94 0000 		call tap_code
 702               	.LVL66:
 914:quantum/quantum.c ****   if (is_altgred) {
 703               		.loc 1 914 3 view .LVU146
 704               		.loc 1 914 6 is_stmt 0 view .LVU147
 705 003a CC23      		tst r28
 706 003c 01F0      		breq .L47
 915:quantum/quantum.c ****     unregister_code(KC_RALT);
 707               		.loc 1 915 5 is_stmt 1 view .LVU148
 708 003e 86EE      		ldi r24,lo8(-26)
 709 0040 0E94 0000 		call unregister_code
 710               	.LVL67:
 711               	.L47:
 916:quantum/quantum.c ****   }
 917:quantum/quantum.c ****   if (is_shifted) {
 712               		.loc 1 917 3 view .LVU149
 713               		.loc 1 917 6 is_stmt 0 view .LVU150
 714 0044 DD23      		tst r29
 715 0046 01F0      		breq .L44
 918:quantum/quantum.c ****     unregister_code(KC_LSFT);
 716               		.loc 1 918 5 is_stmt 1 view .LVU151
 717 0048 81EE      		ldi r24,lo8(-31)
 718               	/* epilogue start */
 919:quantum/quantum.c ****   }
 920:quantum/quantum.c **** }
 719               		.loc 1 920 1 is_stmt 0 view .LVU152
 720 004a DF91      		pop r29
 721               	.LVL68:
 722               		.loc 1 920 1 view .LVU153
 723 004c CF91      		pop r28
 724               	.LVL69:
 725               		.loc 1 920 1 view .LVU154
 726 004e 1F91      		pop r17
 727               	.LVL70:
 918:quantum/quantum.c ****     unregister_code(KC_LSFT);
 728               		.loc 1 918 5 view .LVU155
 729 0050 0C94 0000 		jmp unregister_code
 730               	.LVL71:
 731               	.L44:
 732               	/* epilogue start */
 733               		.loc 1 920 1 view .LVU156
 734 0054 DF91      		pop r29
 735               	.LVL72:
 736               		.loc 1 920 1 view .LVU157
 737 0056 CF91      		pop r28
 738               	.LVL73:
 739               		.loc 1 920 1 view .LVU158
 740 0058 1F91      		pop r17
 741               	.LVL74:
 742               		.loc 1 920 1 view .LVU159
 743 005a 0895      		ret
 744               		.cfi_endproc
 745               	.LFE36:
 747               		.section	.text.send_string_with_delay,"ax",@progbits
 748               	.global	send_string_with_delay
 750               	send_string_with_delay:
 751               	.LVL75:
 752               	.LFB34:
 850:quantum/quantum.c ****     while (1) {
 753               		.loc 1 850 64 is_stmt 1 view -0
 754               		.cfi_startproc
 850:quantum/quantum.c ****     while (1) {
 755               		.loc 1 850 64 is_stmt 0 view .LVU161
 756 0000 FF92      		push r15
 757               	.LCFI18:
 758               		.cfi_def_cfa_offset 3
 759               		.cfi_offset 15, -2
 760 0002 0F93      		push r16
 761               	.LCFI19:
 762               		.cfi_def_cfa_offset 4
 763               		.cfi_offset 16, -3
 764 0004 1F93      		push r17
 765               	.LCFI20:
 766               		.cfi_def_cfa_offset 5
 767               		.cfi_offset 17, -4
 768 0006 CF93      		push r28
 769               	.LCFI21:
 770               		.cfi_def_cfa_offset 6
 771               		.cfi_offset 28, -5
 772 0008 DF93      		push r29
 773               	.LCFI22:
 774               		.cfi_def_cfa_offset 7
 775               		.cfi_offset 29, -6
 776               	/* prologue: function */
 777               	/* frame size = 0 */
 778               	/* stack size = 5 */
 779               	.L__stack_usage = 5
 780 000a EC01      		movw r28,r24
 781 000c F62E      		mov r15,r22
 782               	.LVL76:
 783               	.L66:
 851:quantum/quantum.c ****         char ascii_code = *str;
 784               		.loc 1 851 5 is_stmt 1 view .LVU162
 785               	.LBB31:
 852:quantum/quantum.c ****         if (!ascii_code) break;
 786               		.loc 1 852 9 view .LVU163
 852:quantum/quantum.c ****         if (!ascii_code) break;
 787               		.loc 1 852 14 is_stmt 0 view .LVU164
 788 000e 8881      		ld r24,Y
 789               	.LVL77:
 853:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 790               		.loc 1 853 9 is_stmt 1 view .LVU165
 853:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 791               		.loc 1 853 12 is_stmt 0 view .LVU166
 792 0010 8823      		tst r24
 793 0012 01F0      		breq .L58
 854:quantum/quantum.c ****           // tap
 794               		.loc 1 854 9 is_stmt 1 view .LVU167
 795 0014 8E01      		movw r16,r28
 796 0016 0F5F      		subi r16,-1
 797 0018 1F4F      		sbci r17,-1
 854:quantum/quantum.c ****           // tap
 798               		.loc 1 854 12 is_stmt 0 view .LVU168
 799 001a 8130      		cpi r24,lo8(1)
 800 001c 01F4      		brne .L60
 801               	.LBB32:
 856:quantum/quantum.c ****           register_code(keycode);
 802               		.loc 1 856 11 is_stmt 1 view .LVU169
 803               	.LVL78:
 856:quantum/quantum.c ****           register_code(keycode);
 804               		.loc 1 856 19 is_stmt 0 view .LVU170
 805 001e C981      		ldd r28,Y+1
 806               	.LVL79:
 857:quantum/quantum.c ****           unregister_code(keycode);
 807               		.loc 1 857 11 is_stmt 1 view .LVU171
 808 0020 8C2F      		mov r24,r28
 809               	.LVL80:
 857:quantum/quantum.c ****           unregister_code(keycode);
 810               		.loc 1 857 11 is_stmt 0 view .LVU172
 811 0022 0E94 0000 		call register_code
 812               	.LVL81:
 858:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 813               		.loc 1 858 11 is_stmt 1 view .LVU173
 814 0026 8C2F      		mov r24,r28
 815               	.LVL82:
 816               	.L67:
 858:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 817               		.loc 1 858 11 is_stmt 0 view .LVU174
 818               	.LBE32:
 819               	.LBB33:
 866:quantum/quantum.c ****         } else {
 820               		.loc 1 866 11 view .LVU175
 821 0028 0E94 0000 		call unregister_code
 822               	.LVL83:
 823               	.LBE33:
 824 002c 00C0      		rjmp .L61
 825               	.LVL84:
 826               	.L60:
 859:quantum/quantum.c ****           // down
 827               		.loc 1 859 16 is_stmt 1 view .LVU176
 859:quantum/quantum.c ****           // down
 828               		.loc 1 859 19 is_stmt 0 view .LVU177
 829 002e 8230      		cpi r24,lo8(2)
 830 0030 01F4      		brne .L62
 831               	.LBB34:
 861:quantum/quantum.c ****           register_code(keycode);
 832               		.loc 1 861 11 is_stmt 1 view .LVU178
 833               	.LVL85:
 862:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 834               		.loc 1 862 11 view .LVU179
 835 0032 8981      		ldd r24,Y+1
 836               	.LVL86:
 862:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 837               		.loc 1 862 11 is_stmt 0 view .LVU180
 838 0034 0E94 0000 		call register_code
 839               	.LVL87:
 840               	.L61:
 862:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 841               		.loc 1 862 11 view .LVU181
 842               	.LBE34:
 870:quantum/quantum.c ****         // interval
 843               		.loc 1 870 9 is_stmt 1 view .LVU182
 844 0038 E801      		movw r28,r16
 845 003a 2196      		adiw r28,1
 846               	.LVL88:
 847               	.LBB35:
 872:quantum/quantum.c ****     }
 848               		.loc 1 872 11 view .LVU183
 872:quantum/quantum.c ****     }
 849               		.loc 1 872 34 view .LVU184
 872:quantum/quantum.c ****     }
 850               		.loc 1 872 19 is_stmt 0 view .LVU185
 851 003c 8F2D      		mov r24,r15
 852               	.LVL89:
 853               	.L64:
 872:quantum/quantum.c ****     }
 854               		.loc 1 872 43 discriminator 1 view .LVU186
 855               	.LVL90:
 856 003e 8150      		subi r24,1
 857 0040 00F0      		brcs .L66
 872:quantum/quantum.c ****     }
 858               		.loc 1 872 47 is_stmt 1 view .LVU187
 859               	.LBB36:
 860               	.LBI36:
 861               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 862               		.loc 2 166 1 view .LVU188
 863               	.LBB37:
 167:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	double __tmp ;
 864               		.loc 2 168 2 view .LVU189
 169:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 865               		.loc 2 172 2 view .LVU190
 173:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 866               		.loc 2 173 2 view .LVU191
 174:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 867               		.loc 2 174 2 view .LVU192
 175:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 868               		.loc 2 184 3 view .LVU193
 185:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 869               		.loc 2 187 2 view .LVU194
 870 0042 EFE9      		ldi r30,lo8(3999)
 871 0044 FFE0      		ldi r31,hi8(3999)
 872 0046 3197      	1:	sbiw r30,1
 873 0048 01F4      		brne 1b
 874 004a 00C0      		rjmp .
 875 004c 0000      		nop
 876 004e 00C0      		rjmp .L64
 877               	.LVL91:
 878               	.L62:
 879               		.loc 2 187 2 is_stmt 0 view .LVU195
 880               	.LBE37:
 881               	.LBE36:
 882               	.LBE35:
 863:quantum/quantum.c ****           // up
 883               		.loc 1 863 16 is_stmt 1 view .LVU196
 863:quantum/quantum.c ****           // up
 884               		.loc 1 863 19 is_stmt 0 view .LVU197
 885 0050 8330      		cpi r24,lo8(3)
 886 0052 01F4      		brne .L63
 887               	.LBB38:
 865:quantum/quantum.c ****           unregister_code(keycode);
 888               		.loc 1 865 11 is_stmt 1 view .LVU198
 889               	.LVL92:
 866:quantum/quantum.c ****         } else {
 890               		.loc 1 866 11 view .LVU199
 891 0054 8981      		ldd r24,Y+1
 892               	.LVL93:
 866:quantum/quantum.c ****         } else {
 893               		.loc 1 866 11 is_stmt 0 view .LVU200
 894 0056 00C0      		rjmp .L67
 895               	.LVL94:
 896               	.L63:
 866:quantum/quantum.c ****         } else {
 897               		.loc 1 866 11 view .LVU201
 898               	.LBE38:
 868:quantum/quantum.c ****         }
 899               		.loc 1 868 11 is_stmt 1 view .LVU202
 900 0058 0E94 0000 		call send_char
 901               	.LVL95:
 868:quantum/quantum.c ****         }
 902               		.loc 1 868 11 is_stmt 0 view .LVU203
 903 005c 8E01      		movw r16,r28
 904 005e 00C0      		rjmp .L61
 905               	.LVL96:
 906               	.L58:
 907               	/* epilogue start */
 868:quantum/quantum.c ****         }
 908               		.loc 1 868 11 view .LVU204
 909               	.LBE31:
 874:quantum/quantum.c **** 
 910               		.loc 1 874 1 view .LVU205
 911 0060 DF91      		pop r29
 912 0062 CF91      		pop r28
 913               	.LVL97:
 874:quantum/quantum.c **** 
 914               		.loc 1 874 1 view .LVU206
 915 0064 1F91      		pop r17
 916 0066 0F91      		pop r16
 917 0068 FF90      		pop r15
 918               	.LVL98:
 874:quantum/quantum.c **** 
 919               		.loc 1 874 1 view .LVU207
 920 006a 0895      		ret
 921               		.cfi_endproc
 922               	.LFE34:
 924               		.section	.text.send_string,"ax",@progbits
 925               	.global	send_string
 927               	send_string:
 928               	.LVL99:
 929               	.LFB32:
 842:quantum/quantum.c ****   send_string_with_delay(str, 0);
 930               		.loc 1 842 35 is_stmt 1 view -0
 931               		.cfi_startproc
 932               	/* prologue: function */
 933               	/* frame size = 0 */
 934               	/* stack size = 0 */
 935               	.L__stack_usage = 0
 843:quantum/quantum.c **** }
 936               		.loc 1 843 3 view .LVU209
 937 0000 60E0      		ldi r22,0
 938 0002 0C94 0000 		jmp send_string_with_delay
 939               	.LVL100:
 843:quantum/quantum.c **** }
 940               		.loc 1 843 3 is_stmt 0 view .LVU210
 941               		.cfi_endproc
 942               	.LFE32:
 944               		.section	.text.send_string_with_delay_P,"ax",@progbits
 945               	.global	send_string_with_delay_P
 947               	send_string_with_delay_P:
 948               	.LVL101:
 949               	.LFB35:
 876:quantum/quantum.c ****     while (1) {
 950               		.loc 1 876 66 is_stmt 1 view -0
 951               		.cfi_startproc
 876:quantum/quantum.c ****     while (1) {
 952               		.loc 1 876 66 is_stmt 0 view .LVU212
 953 0000 FF92      		push r15
 954               	.LCFI23:
 955               		.cfi_def_cfa_offset 3
 956               		.cfi_offset 15, -2
 957 0002 0F93      		push r16
 958               	.LCFI24:
 959               		.cfi_def_cfa_offset 4
 960               		.cfi_offset 16, -3
 961 0004 1F93      		push r17
 962               	.LCFI25:
 963               		.cfi_def_cfa_offset 5
 964               		.cfi_offset 17, -4
 965 0006 CF93      		push r28
 966               	.LCFI26:
 967               		.cfi_def_cfa_offset 6
 968               		.cfi_offset 28, -5
 969 0008 DF93      		push r29
 970               	.LCFI27:
 971               		.cfi_def_cfa_offset 7
 972               		.cfi_offset 29, -6
 973               	/* prologue: function */
 974               	/* frame size = 0 */
 975               	/* stack size = 5 */
 976               	.L__stack_usage = 5
 977 000a 8C01      		movw r16,r24
 978 000c F62E      		mov r15,r22
 979               	.LVL102:
 980               	.L77:
 877:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 981               		.loc 1 877 5 is_stmt 1 view .LVU213
 982               	.LBB39:
 878:quantum/quantum.c ****         if (!ascii_code) break;
 983               		.loc 1 878 9 view .LVU214
 984               	.LBB40:
 878:quantum/quantum.c ****         if (!ascii_code) break;
 985               		.loc 1 878 27 view .LVU215
 878:quantum/quantum.c ****         if (!ascii_code) break;
 986               		.loc 1 878 27 view .LVU216
 878:quantum/quantum.c ****         if (!ascii_code) break;
 987               		.loc 1 878 27 view .LVU217
 988 000e F801      		movw r30,r16
 989               	/* #APP */
 990               	 ;  878 "quantum/quantum.c" 1
 991 0010 8491      		lpm r24, Z
 992               		
 993               	 ;  0 "" 2
 994               	.LVL103:
 878:quantum/quantum.c ****         if (!ascii_code) break;
 995               		.loc 1 878 27 view .LVU218
 878:quantum/quantum.c ****         if (!ascii_code) break;
 996               		.loc 1 878 27 is_stmt 0 view .LVU219
 997               	/* #NOAPP */
 998               	.LBE40:
 879:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 999               		.loc 1 879 9 is_stmt 1 view .LVU220
 879:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 1000               		.loc 1 879 12 is_stmt 0 view .LVU221
 1001 0012 8823      		tst r24
 1002 0014 01F0      		breq .L69
 880:quantum/quantum.c ****           // tap
 1003               		.loc 1 880 9 is_stmt 1 view .LVU222
 1004 0016 E801      		movw r28,r16
 1005 0018 2196      		adiw r28,1
 880:quantum/quantum.c ****           // tap
 1006               		.loc 1 880 12 is_stmt 0 view .LVU223
 1007 001a 8130      		cpi r24,lo8(1)
 1008 001c 01F4      		brne .L71
 1009               	.LBB41:
 882:quantum/quantum.c ****           register_code(keycode);
 1010               		.loc 1 882 11 is_stmt 1 view .LVU224
 1011               	.LBB42:
 882:quantum/quantum.c ****           register_code(keycode);
 1012               		.loc 1 882 29 view .LVU225
 1013               	.LVL104:
 882:quantum/quantum.c ****           register_code(keycode);
 1014               		.loc 1 882 29 view .LVU226
 882:quantum/quantum.c ****           register_code(keycode);
 1015               		.loc 1 882 29 view .LVU227
 1016 001e FE01      		movw r30,r28
 1017               	/* #APP */
 1018               	 ;  882 "quantum/quantum.c" 1
 1019 0020 1491      		lpm r17, Z
 1020               		
 1021               	 ;  0 "" 2
 1022               	.LVL105:
 882:quantum/quantum.c ****           register_code(keycode);
 1023               		.loc 1 882 29 view .LVU228
 882:quantum/quantum.c ****           register_code(keycode);
 1024               		.loc 1 882 29 is_stmt 0 view .LVU229
 1025               	/* #NOAPP */
 1026               	.LBE42:
 883:quantum/quantum.c ****           unregister_code(keycode);
 1027               		.loc 1 883 11 is_stmt 1 view .LVU230
 1028 0022 812F      		mov r24,r17
 1029               	.LVL106:
 883:quantum/quantum.c ****           unregister_code(keycode);
 1030               		.loc 1 883 11 is_stmt 0 view .LVU231
 1031 0024 0E94 0000 		call register_code
 1032               	.LVL107:
 884:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 1033               		.loc 1 884 11 is_stmt 1 view .LVU232
 1034 0028 812F      		mov r24,r17
 1035               	.LVL108:
 1036               	.L78:
 884:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 1037               		.loc 1 884 11 is_stmt 0 view .LVU233
 1038               	.LBE41:
 1039               	.LBB43:
 1040               	.LBB44:
 891:quantum/quantum.c ****           unregister_code(keycode);
 1041               		.loc 1 891 29 is_stmt 1 view .LVU234
 891:quantum/quantum.c ****           unregister_code(keycode);
 1042               		.loc 1 891 29 is_stmt 0 view .LVU235
 1043               	.LBE44:
 892:quantum/quantum.c ****         } else {
 1044               		.loc 1 892 11 is_stmt 1 view .LVU236
 1045 002a 0E94 0000 		call unregister_code
 1046               	.LVL109:
 892:quantum/quantum.c ****         } else {
 1047               		.loc 1 892 11 is_stmt 0 view .LVU237
 1048               	.LBE43:
 1049 002e 00C0      		rjmp .L72
 1050               	.LVL110:
 1051               	.L71:
 885:quantum/quantum.c ****           // down
 1052               		.loc 1 885 16 is_stmt 1 view .LVU238
 885:quantum/quantum.c ****           // down
 1053               		.loc 1 885 19 is_stmt 0 view .LVU239
 1054 0030 8230      		cpi r24,lo8(2)
 1055 0032 01F4      		brne .L73
 1056               	.LBB46:
 887:quantum/quantum.c ****           register_code(keycode);
 1057               		.loc 1 887 11 is_stmt 1 view .LVU240
 1058               	.LBB47:
 887:quantum/quantum.c ****           register_code(keycode);
 1059               		.loc 1 887 29 view .LVU241
 1060               	.LVL111:
 887:quantum/quantum.c ****           register_code(keycode);
 1061               		.loc 1 887 29 view .LVU242
 887:quantum/quantum.c ****           register_code(keycode);
 1062               		.loc 1 887 29 view .LVU243
 1063 0034 FE01      		movw r30,r28
 1064               	/* #APP */
 1065               	 ;  887 "quantum/quantum.c" 1
 1066 0036 8491      		lpm r24, Z
 1067               		
 1068               	 ;  0 "" 2
 1069               	.LVL112:
 887:quantum/quantum.c ****           register_code(keycode);
 1070               		.loc 1 887 29 view .LVU244
 887:quantum/quantum.c ****           register_code(keycode);
 1071               		.loc 1 887 29 is_stmt 0 view .LVU245
 1072               	/* #NOAPP */
 1073               	.LBE47:
 888:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1074               		.loc 1 888 11 is_stmt 1 view .LVU246
 1075 0038 0E94 0000 		call register_code
 1076               	.LVL113:
 1077               	.L72:
 888:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 1078               		.loc 1 888 11 is_stmt 0 view .LVU247
 1079               	.LBE46:
 896:quantum/quantum.c ****         // interval
 1080               		.loc 1 896 9 is_stmt 1 view .LVU248
 896:quantum/quantum.c ****         // interval
 1081               		.loc 1 896 9 is_stmt 0 view .LVU249
 1082 003c 8E01      		movw r16,r28
 1083 003e 0F5F      		subi r16,-1
 1084 0040 1F4F      		sbci r17,-1
 1085               	.LVL114:
 1086               	.LBB48:
 898:quantum/quantum.c ****     }
 1087               		.loc 1 898 11 is_stmt 1 view .LVU250
 898:quantum/quantum.c ****     }
 1088               		.loc 1 898 34 view .LVU251
 898:quantum/quantum.c ****     }
 1089               		.loc 1 898 19 is_stmt 0 view .LVU252
 1090 0042 8F2D      		mov r24,r15
 1091               	.LVL115:
 1092               	.L75:
 898:quantum/quantum.c ****     }
 1093               		.loc 1 898 43 discriminator 1 view .LVU253
 1094               	.LVL116:
 1095 0044 8150      		subi r24,1
 1096 0046 00F0      		brcs .L77
 898:quantum/quantum.c ****     }
 1097               		.loc 1 898 47 is_stmt 1 view .LVU254
 1098               	.LBB49:
 1099               	.LBI49:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** {
 1100               		.loc 2 166 1 view .LVU255
 1101               	.LBB50:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1102               		.loc 2 168 2 view .LVU256
 172:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1103               		.loc 2 172 2 view .LVU257
 173:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1104               		.loc 2 173 2 view .LVU258
 174:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 1105               		.loc 2 174 2 view .LVU259
 184:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	#endif
 1106               		.loc 2 184 3 view .LVU260
 1107               		.loc 2 187 2 view .LVU261
 1108 0048 EFE9      		ldi r30,lo8(3999)
 1109 004a FFE0      		ldi r31,hi8(3999)
 1110 004c 3197      	1:	sbiw r30,1
 1111 004e 01F4      		brne 1b
 1112 0050 00C0      		rjmp .
 1113 0052 0000      		nop
 1114 0054 00C0      		rjmp .L75
 1115               	.LVL117:
 1116               	.L73:
 1117               		.loc 2 187 2 is_stmt 0 view .LVU262
 1118               	.LBE50:
 1119               	.LBE49:
 1120               	.LBE48:
 889:quantum/quantum.c ****           // up
 1121               		.loc 1 889 16 is_stmt 1 view .LVU263
 889:quantum/quantum.c ****           // up
 1122               		.loc 1 889 19 is_stmt 0 view .LVU264
 1123 0056 8330      		cpi r24,lo8(3)
 1124 0058 01F4      		brne .L74
 1125               	.LBB51:
 891:quantum/quantum.c ****           unregister_code(keycode);
 1126               		.loc 1 891 11 is_stmt 1 view .LVU265
 1127               	.LBB45:
 891:quantum/quantum.c ****           unregister_code(keycode);
 1128               		.loc 1 891 29 view .LVU266
 1129               	.LVL118:
 891:quantum/quantum.c ****           unregister_code(keycode);
 1130               		.loc 1 891 29 view .LVU267
 891:quantum/quantum.c ****           unregister_code(keycode);
 1131               		.loc 1 891 29 view .LVU268
 1132 005a FE01      		movw r30,r28
 1133               	/* #APP */
 1134               	 ;  891 "quantum/quantum.c" 1
 1135 005c 8491      		lpm r24, Z
 1136               		
 1137               	 ;  0 "" 2
 1138               	.LVL119:
 891:quantum/quantum.c ****           unregister_code(keycode);
 1139               		.loc 1 891 29 is_stmt 0 view .LVU269
 1140               	/* #NOAPP */
 1141 005e 00C0      		rjmp .L78
 1142               	.LVL120:
 1143               	.L74:
 891:quantum/quantum.c ****           unregister_code(keycode);
 1144               		.loc 1 891 29 view .LVU270
 1145               	.LBE45:
 1146               	.LBE51:
 894:quantum/quantum.c ****         }
 1147               		.loc 1 894 11 is_stmt 1 view .LVU271
 1148 0060 0E94 0000 		call send_char
 1149               	.LVL121:
 894:quantum/quantum.c ****         }
 1150               		.loc 1 894 11 is_stmt 0 view .LVU272
 1151 0064 E801      		movw r28,r16
 1152 0066 00C0      		rjmp .L72
 1153               	.LVL122:
 1154               	.L69:
 1155               	/* epilogue start */
 894:quantum/quantum.c ****         }
 1156               		.loc 1 894 11 view .LVU273
 1157               	.LBE39:
 900:quantum/quantum.c **** 
 1158               		.loc 1 900 1 view .LVU274
 1159 0068 DF91      		pop r29
 1160 006a CF91      		pop r28
 1161 006c 1F91      		pop r17
 1162 006e 0F91      		pop r16
 1163               	.LVL123:
 900:quantum/quantum.c **** 
 1164               		.loc 1 900 1 view .LVU275
 1165 0070 FF90      		pop r15
 1166               	.LVL124:
 900:quantum/quantum.c **** 
 1167               		.loc 1 900 1 view .LVU276
 1168 0072 0895      		ret
 1169               		.cfi_endproc
 1170               	.LFE35:
 1172               		.section	.text.send_string_P,"ax",@progbits
 1173               	.global	send_string_P
 1175               	send_string_P:
 1176               	.LVL125:
 1177               	.LFB33:
 846:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 1178               		.loc 1 846 37 is_stmt 1 view -0
 1179               		.cfi_startproc
 1180               	/* prologue: function */
 1181               	/* frame size = 0 */
 1182               	/* stack size = 0 */
 1183               	.L__stack_usage = 0
 847:quantum/quantum.c **** }
 1184               		.loc 1 847 3 view .LVU278
 1185 0000 60E0      		ldi r22,0
 1186 0002 0C94 0000 		jmp send_string_with_delay_P
 1187               	.LVL126:
 847:quantum/quantum.c **** }
 1188               		.loc 1 847 3 is_stmt 0 view .LVU279
 1189               		.cfi_endproc
 1190               	.LFE33:
 1192               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1193               	.global	set_single_persistent_default_layer
 1195               	set_single_persistent_default_layer:
 1196               	.LVL127:
 1197               	.LFB37:
 921:quantum/quantum.c **** 
 922:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1198               		.loc 1 922 65 is_stmt 1 view -0
 1199               		.cfi_startproc
 1200               		.loc 1 922 65 is_stmt 0 view .LVU281
 1201 0000 CF93      		push r28
 1202               	.LCFI28:
 1203               		.cfi_def_cfa_offset 3
 1204               		.cfi_offset 28, -2
 1205 0002 DF93      		push r29
 1206               	.LCFI29:
 1207               		.cfi_def_cfa_offset 4
 1208               		.cfi_offset 29, -3
 1209               	/* prologue: function */
 1210               	/* frame size = 0 */
 1211               	/* stack size = 2 */
 1212               	.L__stack_usage = 2
 923:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 924:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 925:quantum/quantum.c ****   #endif
 926:quantum/quantum.c ****   eeconfig_update_default_layer(1U<<default_layer);
 1213               		.loc 1 926 3 is_stmt 1 view .LVU282
 1214               		.loc 1 926 35 is_stmt 0 view .LVU283
 1215 0004 C1E0      		ldi r28,lo8(1)
 1216 0006 D0E0      		ldi r29,0
 1217 0008 00C0      		rjmp 2f
 1218               		1:
 1219 000a CC0F      		lsl r28
 1220 000c DD1F      		rol r29
 1221               		2:
 1222 000e 8A95      		dec r24
 1223 0010 02F4      		brpl 1b
 1224               		.loc 1 926 3 view .LVU284
 1225 0012 8C2F      		mov r24,r28
 1226               	.LVL128:
 1227               		.loc 1 926 3 view .LVU285
 1228 0014 0E94 0000 		call eeconfig_update_default_layer
 1229               	.LVL129:
 927:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1230               		.loc 1 927 3 is_stmt 1 view .LVU286
 1231 0018 BE01      		movw r22,r28
 1232 001a 90E0      		ldi r25,0
 1233 001c 80E0      		ldi r24,0
 1234               	/* epilogue start */
 928:quantum/quantum.c **** }
 1235               		.loc 1 928 1 is_stmt 0 view .LVU287
 1236 001e DF91      		pop r29
 1237 0020 CF91      		pop r28
 927:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1238               		.loc 1 927 3 view .LVU288
 1239 0022 0C94 0000 		jmp default_layer_set
 1240               	.LVL130:
 1241               		.cfi_endproc
 1242               	.LFE37:
 1244               		.section	.text.update_tri_layer_state,"ax",@progbits
 1245               	.global	update_tri_layer_state
 1247               	update_tri_layer_state:
 1248               	.LVL131:
 1249               	.LFB38:
 929:quantum/quantum.c **** 
 930:quantum/quantum.c **** layer_state_t update_tri_layer_state(layer_state_t state, uint8_t layer1, uint8_t layer2, uint8_t l
 1250               		.loc 1 930 107 is_stmt 1 view -0
 1251               		.cfi_startproc
 1252               		.loc 1 930 107 is_stmt 0 view .LVU290
 1253 0000 8F92      		push r8
 1254               	.LCFI30:
 1255               		.cfi_def_cfa_offset 3
 1256               		.cfi_offset 8, -2
 1257 0002 9F92      		push r9
 1258               	.LCFI31:
 1259               		.cfi_def_cfa_offset 4
 1260               		.cfi_offset 9, -3
 1261 0004 AF92      		push r10
 1262               	.LCFI32:
 1263               		.cfi_def_cfa_offset 5
 1264               		.cfi_offset 10, -4
 1265 0006 BF92      		push r11
 1266               	.LCFI33:
 1267               		.cfi_def_cfa_offset 6
 1268               		.cfi_offset 11, -5
 1269 0008 CF92      		push r12
 1270               	.LCFI34:
 1271               		.cfi_def_cfa_offset 7
 1272               		.cfi_offset 12, -6
 1273 000a DF92      		push r13
 1274               	.LCFI35:
 1275               		.cfi_def_cfa_offset 8
 1276               		.cfi_offset 13, -7
 1277 000c EF92      		push r14
 1278               	.LCFI36:
 1279               		.cfi_def_cfa_offset 9
 1280               		.cfi_offset 14, -8
 1281 000e FF92      		push r15
 1282               	.LCFI37:
 1283               		.cfi_def_cfa_offset 10
 1284               		.cfi_offset 15, -9
 1285 0010 0F93      		push r16
 1286               	.LCFI38:
 1287               		.cfi_def_cfa_offset 11
 1288               		.cfi_offset 16, -10
 1289 0012 1F93      		push r17
 1290               	.LCFI39:
 1291               		.cfi_def_cfa_offset 12
 1292               		.cfi_offset 17, -11
 1293               	/* prologue: function */
 1294               	/* frame size = 0 */
 1295               	/* stack size = 10 */
 1296               	.L__stack_usage = 10
 1297 0014 6B01      		movw r12,r22
 1298 0016 7C01      		movw r14,r24
 931:quantum/quantum.c ****   layer_state_t mask12 = (1UL << layer1) | (1UL << layer2);
 1299               		.loc 1 931 3 is_stmt 1 view .LVU291
 1300               		.loc 1 931 31 is_stmt 0 view .LVU292
 1301 0018 81E0      		ldi r24,lo8(1)
 1302 001a 90E0      		ldi r25,0
 1303 001c A0E0      		ldi r26,0
 1304 001e B0E0      		ldi r27,0
 1305 0020 4C01      		movw r8,r24
 1306 0022 5D01      		movw r10,r26
 1307 0024 00C0      		rjmp 2f
 1308               		1:
 1309 0026 880C      		lsl r8
 1310 0028 991C      		rol r9
 1311 002a AA1C      		rol r10
 1312 002c BB1C      		rol r11
 1313               		2:
 1314 002e 4A95      		dec r20
 1315 0030 02F4      		brpl 1b
 1316 0032 B501      		movw r22,r10
 1317               	.LVL132:
 1318               		.loc 1 931 31 view .LVU293
 1319 0034 A401      		movw r20,r8
 1320               	.LVL133:
 1321               		.loc 1 931 49 view .LVU294
 1322 0036 4C01      		movw r8,r24
 1323 0038 5D01      		movw r10,r26
 1324 003a 00C0      		rjmp 2f
 1325               		1:
 1326 003c 880C      		lsl r8
 1327 003e 991C      		rol r9
 1328 0040 AA1C      		rol r10
 1329 0042 BB1C      		rol r11
 1330               		2:
 1331 0044 2A95      		dec r18
 1332 0046 02F4      		brpl 1b
 1333               		.loc 1 931 17 view .LVU295
 1334 0048 4829      		or r20,r8
 1335 004a 5929      		or r21,r9
 1336 004c 6A29      		or r22,r10
 1337 004e 7B29      		or r23,r11
 1338               	.LVL134:
 932:quantum/quantum.c ****   layer_state_t mask3 = 1UL << layer3;
 1339               		.loc 1 932 3 is_stmt 1 view .LVU296
 1340               		.loc 1 932 17 is_stmt 0 view .LVU297
 1341 0050 00C0      		rjmp 2f
 1342               		1:
 1343 0052 880F      		lsl r24
 1344 0054 991F      		rol r25
 1345 0056 AA1F      		rol r26
 1346 0058 BB1F      		rol r27
 1347               		2:
 1348 005a 0A95      		dec r16
 1349 005c 02F4      		brpl 1b
 1350               	.LVL135:
 933:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1351               		.loc 1 933 3 is_stmt 1 view .LVU298
 1352               		.loc 1 933 17 is_stmt 0 view .LVU299
 1353 005e 8A01      		movw r16,r20
 1354               	.LVL136:
 1355               		.loc 1 933 17 view .LVU300
 1356 0060 9B01      		movw r18,r22
 1357               	.LVL137:
 1358               		.loc 1 933 17 view .LVU301
 1359 0062 0C21      		and r16,r12
 1360 0064 1D21      		and r17,r13
 1361 0066 2E21      		and r18,r14
 1362 0068 3F21      		and r19,r15
 1363               		.loc 1 933 55 view .LVU302
 1364 006a 0417      		cp r16,r20
 1365 006c 1507      		cpc r17,r21
 1366 006e 2607      		cpc r18,r22
 1367 0070 3707      		cpc r19,r23
 1368 0072 01F4      		brne .L82
 1369               		.loc 1 933 55 discriminator 1 view .LVU303
 1370 0074 8C29      		or r24,r12
 1371               	.LVL138:
 1372               		.loc 1 933 55 discriminator 1 view .LVU304
 1373 0076 9D29      		or r25,r13
 1374 0078 AE29      		or r26,r14
 1375 007a BF29      		or r27,r15
 1376               	.L81:
 934:quantum/quantum.c **** }
 1377               		.loc 1 934 1 view .LVU305
 1378 007c BC01      		movw r22,r24
 1379 007e CD01      		movw r24,r26
 1380               	/* epilogue start */
 1381 0080 1F91      		pop r17
 1382               	.LVL139:
 1383               		.loc 1 934 1 view .LVU306
 1384 0082 0F91      		pop r16
 1385               	.LVL140:
 1386               		.loc 1 934 1 view .LVU307
 1387 0084 FF90      		pop r15
 1388 0086 EF90      		pop r14
 1389 0088 DF90      		pop r13
 1390 008a CF90      		pop r12
 1391 008c BF90      		pop r11
 1392 008e AF90      		pop r10
 1393 0090 9F90      		pop r9
 1394 0092 8F90      		pop r8
 1395               	.LVL141:
 1396               		.loc 1 934 1 view .LVU308
 1397 0094 0895      		ret
 1398               	.LVL142:
 1399               	.L82:
 933:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1400               		.loc 1 933 66 discriminator 2 view .LVU309
 1401 0096 8095      		com r24
 1402 0098 9095      		com r25
 1403 009a A095      		com r26
 1404 009c B095      		com r27
 1405               	.LVL143:
 933:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1406               		.loc 1 933 55 discriminator 2 view .LVU310
 1407 009e 8C21      		and r24,r12
 1408               	.LVL144:
 933:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1409               		.loc 1 933 55 discriminator 2 view .LVU311
 1410 00a0 9D21      		and r25,r13
 1411 00a2 AE21      		and r26,r14
 1412 00a4 BF21      		and r27,r15
 1413 00a6 00C0      		rjmp .L81
 1414               		.cfi_endproc
 1415               	.LFE38:
 1417               		.section	.text.update_tri_layer,"ax",@progbits
 1418               	.global	update_tri_layer
 1420               	update_tri_layer:
 1421               	.LVL145:
 1422               	.LFB39:
 935:quantum/quantum.c **** 
 936:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1423               		.loc 1 936 71 is_stmt 1 view -0
 1424               		.cfi_startproc
 1425               		.loc 1 936 71 is_stmt 0 view .LVU313
 1426 0000 0F93      		push r16
 1427               	.LCFI40:
 1428               		.cfi_def_cfa_offset 3
 1429               		.cfi_offset 16, -2
 1430               	/* prologue: function */
 1431               	/* frame size = 0 */
 1432               	/* stack size = 1 */
 1433               	.L__stack_usage = 1
 1434 0002 382F      		mov r19,r24
 1435 0004 262F      		mov r18,r22
 937:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 1436               		.loc 1 937 3 is_stmt 1 view .LVU314
 1437 0006 6091 0000 		lds r22,layer_state
 1438 000a 7091 0000 		lds r23,layer_state+1
 1439 000e 8091 0000 		lds r24,layer_state+2
 1440 0012 9091 0000 		lds r25,layer_state+3
 1441               	.LVL146:
 1442               		.loc 1 937 3 is_stmt 0 view .LVU315
 1443 0016 042F      		mov r16,r20
 1444 0018 432F      		mov r20,r19
 1445               	.LVL147:
 1446               		.loc 1 937 3 view .LVU316
 1447 001a 0E94 0000 		call update_tri_layer_state
 1448               	.LVL148:
 1449               	/* epilogue start */
 938:quantum/quantum.c **** }
 1450               		.loc 1 938 1 view .LVU317
 1451 001e 0F91      		pop r16
 1452               	.LVL149:
 937:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 1453               		.loc 1 937 3 view .LVU318
 1454 0020 0C94 0000 		jmp layer_state_set
 1455               	.LVL150:
 1456               		.cfi_endproc
 1457               	.LFE39:
 1459               		.section	.text.tap_random_base64,"ax",@progbits
 1460               	.global	tap_random_base64
 1462               	tap_random_base64:
 1463               	.LFB40:
 939:quantum/quantum.c **** 
 940:quantum/quantum.c **** void tap_random_base64(void) {
 1464               		.loc 1 940 30 is_stmt 1 view -0
 1465               		.cfi_startproc
 1466 0000 CF93      		push r28
 1467               	.LCFI41:
 1468               		.cfi_def_cfa_offset 3
 1469               		.cfi_offset 28, -2
 1470 0002 DF93      		push r29
 1471               	.LCFI42:
 1472               		.cfi_def_cfa_offset 4
 1473               		.cfi_offset 29, -3
 1474               	/* prologue: function */
 1475               	/* frame size = 0 */
 1476               	/* stack size = 2 */
 1477               	.L__stack_usage = 2
 941:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 942:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1478               		.loc 1 942 5 view .LVU320
 1479               		.loc 1 942 20 is_stmt 0 view .LVU321
 1480 0004 46B5      		in r20,0x26
 1481               		.loc 1 942 28 view .LVU322
 1482 0006 2091 8400 		lds r18,132
 1483 000a 3091 8500 		lds r19,132+1
 1484               		.loc 1 942 36 view .LVU323
 1485 000e C091 9400 		lds r28,148
 1486 0012 D091 9500 		lds r29,148+1
 1487               		.loc 1 942 44 view .LVU324
 1488 0016 8091 BE00 		lds r24,190
 1489 001a 9091 BF00 		lds r25,190+1
 1490               		.loc 1 942 34 view .LVU325
 1491 001e C20F      		add r28,r18
 1492 0020 C40F      		add r28,r20
 1493               		.loc 1 942 42 view .LVU326
 1494 0022 C80F      		add r28,r24
 1495               		.loc 1 942 13 view .LVU327
 1496 0024 CF73      		andi r28,lo8(63)
 1497               	.LVL151:
 943:quantum/quantum.c ****   #else
 944:quantum/quantum.c ****     uint8_t key = rand() % 64;
 945:quantum/quantum.c ****   #endif
 946:quantum/quantum.c ****   switch (key) {
 1498               		.loc 1 946 3 is_stmt 1 view .LVU328
 1499 0026 CE33      		cpi r28,lo8(62)
 1500 0028 00F4      		brsh .L86
 1501 002a C533      		cpi r28,lo8(53)
 1502 002c 00F4      		brsh .L87
 1503 002e CA31      		cpi r28,lo8(26)
 1504 0030 00F0      		brlo .L88
 1505 0032 C433      		cpi r28,lo8(52)
 1506 0034 00F4      		brsh .L93
 947:quantum/quantum.c ****     case 0 ... 25:
 948:quantum/quantum.c ****       register_code(KC_LSFT);
 949:quantum/quantum.c ****       register_code(key + KC_A);
 950:quantum/quantum.c ****       unregister_code(key + KC_A);
 951:quantum/quantum.c ****       unregister_code(KC_LSFT);
 952:quantum/quantum.c ****       break;
 953:quantum/quantum.c ****     case 26 ... 51:
 954:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1507               		.loc 1 954 7 view .LVU329
 1508 0036 C651      		subi r28,lo8(-(-22))
 1509               	.LVL152:
 1510               	.L96:
 955:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 956:quantum/quantum.c ****       break;
 957:quantum/quantum.c ****     case 52:
 958:quantum/quantum.c ****       register_code(KC_0);
 959:quantum/quantum.c ****       unregister_code(KC_0);
 960:quantum/quantum.c ****       break;
 961:quantum/quantum.c ****     case 53 ... 61:
 962:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1511               		.loc 1 962 7 is_stmt 0 view .LVU330
 1512 0038 8C2F      		mov r24,r28
 1513 003a 0E94 0000 		call register_code
 1514               	.LVL153:
 963:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1515               		.loc 1 963 7 is_stmt 1 view .LVU331
 1516 003e 8C2F      		mov r24,r28
 1517 0040 00C0      		rjmp .L94
 1518               	.LVL154:
 1519               	.L86:
 946:quantum/quantum.c ****     case 0 ... 25:
 1520               		.loc 1 946 3 is_stmt 0 view .LVU332
 1521 0042 CE33      		cpi r28,lo8(62)
 1522 0044 01F0      		breq .L91
 1523 0046 CF33      		cpi r28,lo8(63)
 1524 0048 01F0      		breq .L92
 1525               	.L88:
 948:quantum/quantum.c ****       register_code(key + KC_A);
 1526               		.loc 1 948 7 is_stmt 1 view .LVU333
 1527 004a 81EE      		ldi r24,lo8(-31)
 1528 004c 0E94 0000 		call register_code
 1529               	.LVL155:
 949:quantum/quantum.c ****       unregister_code(key + KC_A);
 1530               		.loc 1 949 7 view .LVU334
 1531 0050 CC5F      		subi r28,lo8(-(4))
 1532               	.LVL156:
 949:quantum/quantum.c ****       unregister_code(key + KC_A);
 1533               		.loc 1 949 7 is_stmt 0 view .LVU335
 1534 0052 8C2F      		mov r24,r28
 1535 0054 0E94 0000 		call register_code
 1536               	.LVL157:
 950:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1537               		.loc 1 950 7 is_stmt 1 view .LVU336
 1538 0058 8C2F      		mov r24,r28
 1539               	.LVL158:
 1540               	.L95:
 964:quantum/quantum.c ****       break;
 965:quantum/quantum.c ****     case 62:
 966:quantum/quantum.c ****       register_code(KC_LSFT);
 967:quantum/quantum.c ****       register_code(KC_EQL);
 968:quantum/quantum.c ****       unregister_code(KC_EQL);
 1541               		.loc 1 968 7 is_stmt 0 view .LVU337
 1542 005a 0E94 0000 		call unregister_code
 1543               	.LVL159:
 969:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1544               		.loc 1 969 7 is_stmt 1 view .LVU338
 1545 005e 81EE      		ldi r24,lo8(-31)
 1546 0060 00C0      		rjmp .L94
 1547               	.LVL160:
 1548               	.L93:
 958:quantum/quantum.c ****       unregister_code(KC_0);
 1549               		.loc 1 958 7 view .LVU339
 1550 0062 87E2      		ldi r24,lo8(39)
 1551 0064 0E94 0000 		call register_code
 1552               	.LVL161:
 959:quantum/quantum.c ****       break;
 1553               		.loc 1 959 7 view .LVU340
 1554 0068 87E2      		ldi r24,lo8(39)
 1555               	.LVL162:
 1556               	.L94:
 1557               	/* epilogue start */
 970:quantum/quantum.c ****       break;
 971:quantum/quantum.c ****     case 63:
 972:quantum/quantum.c ****       register_code(KC_SLSH);
 973:quantum/quantum.c ****       unregister_code(KC_SLSH);
 974:quantum/quantum.c ****       break;
 975:quantum/quantum.c ****   }
 976:quantum/quantum.c **** }
 1558               		.loc 1 976 1 is_stmt 0 view .LVU341
 1559 006a DF91      		pop r29
 1560 006c CF91      		pop r28
 973:quantum/quantum.c ****       break;
 1561               		.loc 1 973 7 view .LVU342
 1562 006e 0C94 0000 		jmp unregister_code
 1563               	.LVL163:
 1564               	.L87:
 962:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1565               		.loc 1 962 7 is_stmt 1 view .LVU343
 1566 0072 C751      		subi r28,lo8(-(-23))
 1567               	.LVL164:
 962:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1568               		.loc 1 962 7 is_stmt 0 view .LVU344
 1569 0074 00C0      		rjmp .L96
 1570               	.LVL165:
 1571               	.L91:
 966:quantum/quantum.c ****       register_code(KC_EQL);
 1572               		.loc 1 966 7 is_stmt 1 view .LVU345
 1573 0076 81EE      		ldi r24,lo8(-31)
 1574 0078 0E94 0000 		call register_code
 1575               	.LVL166:
 967:quantum/quantum.c ****       unregister_code(KC_EQL);
 1576               		.loc 1 967 7 view .LVU346
 1577 007c 8EE2      		ldi r24,lo8(46)
 1578 007e 0E94 0000 		call register_code
 1579               	.LVL167:
 968:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1580               		.loc 1 968 7 view .LVU347
 1581 0082 8EE2      		ldi r24,lo8(46)
 1582 0084 00C0      		rjmp .L95
 1583               	.L92:
 972:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1584               		.loc 1 972 7 view .LVU348
 1585 0086 88E3      		ldi r24,lo8(56)
 1586 0088 0E94 0000 		call register_code
 1587               	.LVL168:
 973:quantum/quantum.c ****       break;
 1588               		.loc 1 973 7 view .LVU349
 1589 008c 88E3      		ldi r24,lo8(56)
 1590 008e 00C0      		rjmp .L94
 1591               		.cfi_endproc
 1592               	.LFE40:
 1594               		.section	.text.bootmagic_lite,"ax",@progbits
 1595               		.weak	bootmagic_lite
 1597               	bootmagic_lite:
 1598               	.LFB41:
 977:quantum/quantum.c **** 
 978:quantum/quantum.c **** __attribute__((weak))
 979:quantum/quantum.c **** void bootmagic_lite(void) {
 1599               		.loc 1 979 27 view -0
 1600               		.cfi_startproc
 1601               	/* prologue: function */
 1602               	/* frame size = 0 */
 1603               	/* stack size = 0 */
 1604               	.L__stack_usage = 0
 980:quantum/quantum.c ****   // The lite version of TMK's bootmagic based on Wilba.
 981:quantum/quantum.c ****   // 100% less potential for accidentally making the
 982:quantum/quantum.c ****   // keyboard do stupid things.
 983:quantum/quantum.c **** 
 984:quantum/quantum.c ****   // We need multiple scans because debouncing can't be turned off.
 985:quantum/quantum.c ****   matrix_scan();
 1605               		.loc 1 985 3 view .LVU351
 1606 0000 0E94 0000 		call matrix_scan
 1607               	.LVL169:
 986:quantum/quantum.c ****   #if defined(DEBOUNCING_DELAY) && DEBOUNCING_DELAY > 0
 987:quantum/quantum.c ****     wait_ms(DEBOUNCING_DELAY * 2);
 988:quantum/quantum.c ****   #elif defined(DEBOUNCE) && DEBOUNCE > 0
 989:quantum/quantum.c ****     wait_ms(DEBOUNCE * 2);
 1608               		.loc 1 989 5 view .LVU352
 1609               	.LBB52:
 1610               	.LBI52:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** {
 1611               		.loc 2 166 1 view .LVU353
 1612               	.LBB53:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1613               		.loc 2 168 2 view .LVU354
 172:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1614               		.loc 2 172 2 view .LVU355
 173:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1615               		.loc 2 173 2 view .LVU356
 174:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 1616               		.loc 2 174 2 view .LVU357
 184:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	#endif
 1617               		.loc 2 184 3 view .LVU358
 1618               		.loc 2 187 2 view .LVU359
 1619 0004 8FE3      		ldi r24,lo8(-25537)
 1620 0006 9CE9      		ldi r25,hi8(-25537)
 1621 0008 0197      	1:	sbiw r24,1
 1622 000a 01F4      		brne 1b
 1623 000c 00C0      		rjmp .
 1624 000e 0000      		nop
 1625               	.LVL170:
 1626               		.loc 2 187 2 is_stmt 0 view .LVU360
 1627               	.LBE53:
 1628               	.LBE52:
 990:quantum/quantum.c ****   #else
 991:quantum/quantum.c ****     wait_ms(30);
 992:quantum/quantum.c ****   #endif
 993:quantum/quantum.c ****   matrix_scan();
 1629               		.loc 1 993 3 is_stmt 1 view .LVU361
 1630 0010 0E94 0000 		call matrix_scan
 1631               	.LVL171:
 994:quantum/quantum.c **** 
 995:quantum/quantum.c ****   // If the Esc and space bar are held down on power up,
 996:quantum/quantum.c ****   // reset the EEPROM valid state and jump to bootloader.
 997:quantum/quantum.c ****   // Assumes Esc is at [0,0].
 998:quantum/quantum.c ****   // This isn't very generalized, but we need something that doesn't
 999:quantum/quantum.c ****   // rely on user's keymaps in firmware or EEPROM.
1000:quantum/quantum.c ****   if (matrix_get_row(BOOTMAGIC_LITE_ROW) & (1 << BOOTMAGIC_LITE_COLUMN)) {
 1632               		.loc 1 1000 3 view .LVU362
 1633               		.loc 1 1000 7 is_stmt 0 view .LVU363
 1634 0014 80E0      		ldi r24,0
 1635 0016 0E94 0000 		call matrix_get_row
 1636               	.LVL172:
 1637               		.loc 1 1000 6 view .LVU364
 1638 001a 80FF      		sbrs r24,0
 1639 001c 00C0      		rjmp .L97
1001:quantum/quantum.c ****     eeconfig_disable();
 1640               		.loc 1 1001 5 is_stmt 1 view .LVU365
 1641 001e 0E94 0000 		call eeconfig_disable
 1642               	.LVL173:
1002:quantum/quantum.c ****     // Jump to bootloader.
1003:quantum/quantum.c ****     bootloader_jump();
 1643               		.loc 1 1003 5 view .LVU366
 1644 0022 0C94 0000 		jmp bootloader_jump
 1645               	.LVL174:
 1646               	.L97:
 1647               	/* epilogue start */
1004:quantum/quantum.c ****   }
1005:quantum/quantum.c **** }
 1648               		.loc 1 1005 1 is_stmt 0 view .LVU367
 1649 0026 0895      		ret
 1650               		.cfi_endproc
 1651               	.LFE41:
 1653               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1654               	.global	matrix_scan_quantum
 1656               	matrix_scan_quantum:
 1657               	.LFB43:
1006:quantum/quantum.c **** 
1007:quantum/quantum.c **** void matrix_init_quantum() {
1008:quantum/quantum.c ****   #ifdef BOOTMAGIC_LITE
1009:quantum/quantum.c ****     bootmagic_lite();
1010:quantum/quantum.c ****   #endif
1011:quantum/quantum.c ****   if (!eeconfig_is_enabled()) {
1012:quantum/quantum.c ****     eeconfig_init();
1013:quantum/quantum.c ****   }
1014:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
1015:quantum/quantum.c ****     #ifdef LED_MATRIX_ENABLE
1016:quantum/quantum.c ****         led_matrix_init();
1017:quantum/quantum.c ****     #else
1018:quantum/quantum.c ****         backlight_init_ports();
1019:quantum/quantum.c ****     #endif
1020:quantum/quantum.c ****   #endif
1021:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
1022:quantum/quantum.c ****     audio_init();
1023:quantum/quantum.c ****   #endif
1024:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
1025:quantum/quantum.c ****     rgb_matrix_init();
1026:quantum/quantum.c ****   #endif
1027:quantum/quantum.c ****   #ifdef ENCODER_ENABLE
1028:quantum/quantum.c ****     encoder_init();
1029:quantum/quantum.c ****   #endif
1030:quantum/quantum.c ****   #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
1031:quantum/quantum.c ****     unicode_input_mode_init();
1032:quantum/quantum.c ****   #endif
1033:quantum/quantum.c ****   #ifdef HAPTIC_ENABLE
1034:quantum/quantum.c ****     haptic_init();
1035:quantum/quantum.c ****   #endif
1036:quantum/quantum.c ****   #ifdef OUTPUT_AUTO_ENABLE
1037:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
1038:quantum/quantum.c ****   #endif
1039:quantum/quantum.c ****   matrix_init_kb();
1040:quantum/quantum.c **** }
1041:quantum/quantum.c **** 
1042:quantum/quantum.c **** void matrix_scan_quantum() {
 1658               		.loc 1 1042 28 is_stmt 1 view -0
 1659               		.cfi_startproc
 1660               	/* prologue: function */
 1661               	/* frame size = 0 */
 1662               	/* stack size = 0 */
 1663               	.L__stack_usage = 0
1043:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
1044:quantum/quantum.c ****     matrix_scan_music();
1045:quantum/quantum.c ****   #endif
1046:quantum/quantum.c **** 
1047:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
1048:quantum/quantum.c ****     matrix_scan_tap_dance();
1049:quantum/quantum.c ****   #endif
1050:quantum/quantum.c **** 
1051:quantum/quantum.c ****   #ifdef COMBO_ENABLE
1052:quantum/quantum.c ****     matrix_scan_combo();
1053:quantum/quantum.c ****   #endif
1054:quantum/quantum.c **** 
1055:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE)
1056:quantum/quantum.c ****     #if defined(LED_MATRIX_ENABLE)
1057:quantum/quantum.c ****         led_matrix_task();
1058:quantum/quantum.c ****     #elif defined(BACKLIGHT_PIN)
1059:quantum/quantum.c ****         backlight_task();
 1664               		.loc 1 1059 9 view .LVU369
1060:quantum/quantum.c ****     #endif
1061:quantum/quantum.c ****   #endif
1062:quantum/quantum.c **** 
1063:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
1064:quantum/quantum.c ****     rgb_matrix_task();
1065:quantum/quantum.c ****   #endif
1066:quantum/quantum.c **** 
1067:quantum/quantum.c ****   #ifdef ENCODER_ENABLE
1068:quantum/quantum.c ****     encoder_read();
1069:quantum/quantum.c ****   #endif
1070:quantum/quantum.c **** 
1071:quantum/quantum.c ****   #ifdef HAPTIC_ENABLE
1072:quantum/quantum.c ****     haptic_task();
1073:quantum/quantum.c ****   #endif
1074:quantum/quantum.c **** 
1075:quantum/quantum.c ****   matrix_scan_kb();
 1665               		.loc 1 1075 3 view .LVU370
 1666 0000 0C94 0000 		jmp matrix_scan_kb
 1667               	.LVL175:
 1668               		.cfi_endproc
 1669               	.LFE43:
 1671               		.section	.text.backlight_on,"ax",@progbits
 1672               	.global	backlight_on
 1674               	backlight_on:
 1675               	.LVL176:
 1676               	.LFB44:
1076:quantum/quantum.c **** }
1077:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && (defined(BACKLIGHT_PIN) || defined(BACKLIGHT_PINS))
1078:quantum/quantum.c **** 
1079:quantum/quantum.c **** // This logic is a bit complex, we support 3 setups:
1080:quantum/quantum.c **** //
1081:quantum/quantum.c **** //   1. Hardware PWM when backlight is wired to a PWM pin.
1082:quantum/quantum.c **** //      Depending on this pin, we use a different output compare unit.
1083:quantum/quantum.c **** //   2. Software PWM with hardware timers, but the used timer
1084:quantum/quantum.c **** //      depends on the Audio setup (Audio wins over Backlight).
1085:quantum/quantum.c **** //   3. Full software PWM, driven by the matrix scan, if both timers are used by Audio.
1086:quantum/quantum.c **** 
1087:quantum/quantum.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) \
1088:quantum/quantum.c ****   || defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__) \
1089:quantum/quantum.c ****   || defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__)) \
1090:quantum/quantum.c ****   && (BACKLIGHT_PIN == B5 || BACKLIGHT_PIN == B6 || BACKLIGHT_PIN == B7)
1091:quantum/quantum.c ****   #define HARDWARE_PWM
1092:quantum/quantum.c ****   #define ICRx            ICR1
1093:quantum/quantum.c ****   #define TCCRxA          TCCR1A
1094:quantum/quantum.c ****   #define TCCRxB          TCCR1B
1095:quantum/quantum.c ****   #define TIMERx_OVF_vect TIMER1_OVF_vect
1096:quantum/quantum.c ****   #define TIMSKx          TIMSK1
1097:quantum/quantum.c ****   #define TOIEx           TOIE1
1098:quantum/quantum.c **** 
1099:quantum/quantum.c ****   #if BACKLIGHT_PIN == B5
1100:quantum/quantum.c ****     #define COMxx1        COM1A1
1101:quantum/quantum.c ****     #define OCRxx         OCR1A
1102:quantum/quantum.c ****   #elif BACKLIGHT_PIN == B6
1103:quantum/quantum.c ****     #define COMxx1        COM1B1
1104:quantum/quantum.c ****     #define OCRxx         OCR1B
1105:quantum/quantum.c ****   #elif BACKLIGHT_PIN == B7
1106:quantum/quantum.c ****     #define COMxx1        COM1C1
1107:quantum/quantum.c ****     #define OCRxx         OCR1C
1108:quantum/quantum.c ****   #endif
1109:quantum/quantum.c **** #elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) \
1110:quantum/quantum.c ****   || defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__) \
1111:quantum/quantum.c ****   || defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__)) \
1112:quantum/quantum.c ****   && (BACKLIGHT_PIN == C4 || BACKLIGHT_PIN == C5 || BACKLIGHT_PIN == C6)
1113:quantum/quantum.c ****   #define HARDWARE_PWM
1114:quantum/quantum.c ****   #define ICRx            ICR3
1115:quantum/quantum.c ****   #define TCCRxA          TCCR3A
1116:quantum/quantum.c ****   #define TCCRxB          TCCR3B
1117:quantum/quantum.c ****   #define TIMERx_OVF_vect TIMER3_OVF_vect
1118:quantum/quantum.c ****   #define TIMSKx          TIMSK3
1119:quantum/quantum.c ****   #define TOIEx           TOIE3
1120:quantum/quantum.c **** 
1121:quantum/quantum.c ****   #if BACKLIGHT_PIN == C4
1122:quantum/quantum.c ****     #if (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
1123:quantum/quantum.c ****       #error This MCU has no C4 pin!
1124:quantum/quantum.c ****     #else
1125:quantum/quantum.c ****       #define COMxx1      COM3C1
1126:quantum/quantum.c ****       #define OCRxx       OCR3C
1127:quantum/quantum.c ****     #endif
1128:quantum/quantum.c ****   #elif BACKLIGHT_PIN == C5
1129:quantum/quantum.c ****     #if (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
1130:quantum/quantum.c ****       #error This MCU has no C5 pin!
1131:quantum/quantum.c ****     #else
1132:quantum/quantum.c ****       #define COMxx1      COM3B1
1133:quantum/quantum.c ****       #define OCRxx       OCR3B
1134:quantum/quantum.c ****     #endif
1135:quantum/quantum.c ****   #elif BACKLIGHT_PIN == C6
1136:quantum/quantum.c ****     #define COMxx1        COM3A1
1137:quantum/quantum.c ****     #define OCRxx         OCR3A
1138:quantum/quantum.c ****   #endif
1139:quantum/quantum.c **** #elif (defined(__AVR_ATmega16U2__) || defined(__AVR_ATmega32U2__)) \
1140:quantum/quantum.c ****   && (BACKLIGHT_PIN == B7 || BACKLIGHT_PIN == C5 || BACKLIGHT_PIN == C6)
1141:quantum/quantum.c ****   #define HARDWARE_PWM
1142:quantum/quantum.c ****   #define ICRx            ICR1
1143:quantum/quantum.c ****   #define TCCRxA          TCCR1A
1144:quantum/quantum.c ****   #define TCCRxB          TCCR1B
1145:quantum/quantum.c ****   #define TIMERx_OVF_vect TIMER1_OVF_vect
1146:quantum/quantum.c ****   #define TIMSKx          TIMSK1
1147:quantum/quantum.c ****   #define TOIEx           TOIE1
1148:quantum/quantum.c **** 
1149:quantum/quantum.c ****   #if BACKLIGHT_PIN == B7
1150:quantum/quantum.c ****     #define COMxx1        COM1C1
1151:quantum/quantum.c ****     #define OCRxx         OCR1C
1152:quantum/quantum.c ****   #elif BACKLIGHT_PIN == C5
1153:quantum/quantum.c ****     #define COMxx1        COM1B1
1154:quantum/quantum.c ****     #define OCRxx         OCR1B
1155:quantum/quantum.c ****   #elif BACKLIGHT_PIN == C6
1156:quantum/quantum.c ****     #define COMxx1        COM1A1
1157:quantum/quantum.c ****     #define OCRxx         OCR1A
1158:quantum/quantum.c ****   #endif
1159:quantum/quantum.c **** #elif defined(__AVR_ATmega32A__) \
1160:quantum/quantum.c ****   && (BACKLIGHT_PIN == D4 || BACKLIGHT_PIN == D5)
1161:quantum/quantum.c ****   #define HARDWARE_PWM
1162:quantum/quantum.c ****   #define ICRx            ICR1
1163:quantum/quantum.c ****   #define TCCRxA          TCCR1A
1164:quantum/quantum.c ****   #define TCCRxB          TCCR1B
1165:quantum/quantum.c ****   #define TIMERx_OVF_vect TIMER1_OVF_vect
1166:quantum/quantum.c ****   #define TIMSKx          TIMSK
1167:quantum/quantum.c ****   #define TOIEx           TOIE1
1168:quantum/quantum.c **** 
1169:quantum/quantum.c ****   #if BACKLIGHT_PIN == D4
1170:quantum/quantum.c ****     #define COMxx1        COM1B1
1171:quantum/quantum.c ****     #define OCRxx         OCR1B
1172:quantum/quantum.c ****   #elif BACKLIGHT_PIN == D5
1173:quantum/quantum.c ****     #define COMxx1        COM1A1
1174:quantum/quantum.c ****     #define OCRxx         OCR1A
1175:quantum/quantum.c ****   #endif
1176:quantum/quantum.c **** #else
1177:quantum/quantum.c ****   #if !defined(BACKLIGHT_CUSTOM_DRIVER)
1178:quantum/quantum.c ****     #if !defined(B5_AUDIO) && !defined(B6_AUDIO) && !defined(B7_AUDIO)
1179:quantum/quantum.c ****       // Timer 1 is not in use by Audio feature, Backlight can use it
1180:quantum/quantum.c ****       #pragma message "Using hardware timer 1 with software PWM"
1181:quantum/quantum.c ****       #define HARDWARE_PWM
1182:quantum/quantum.c ****       #define BACKLIGHT_PWM_TIMER
1183:quantum/quantum.c ****       #define ICRx              ICR1
1184:quantum/quantum.c ****       #define TCCRxA            TCCR1A
1185:quantum/quantum.c ****       #define TCCRxB            TCCR1B
1186:quantum/quantum.c ****       #define TIMERx_COMPA_vect TIMER1_COMPA_vect
1187:quantum/quantum.c ****       #define TIMERx_OVF_vect   TIMER1_OVF_vect
1188:quantum/quantum.c ****       #if defined(__AVR_ATmega32A__) // This MCU has only one TIMSK register
1189:quantum/quantum.c ****         #define TIMSKx          TIMSK
1190:quantum/quantum.c ****       #else
1191:quantum/quantum.c ****         #define TIMSKx          TIMSK1
1192:quantum/quantum.c ****       #endif
1193:quantum/quantum.c ****       #define TOIEx             TOIE1
1194:quantum/quantum.c **** 
1195:quantum/quantum.c ****       #define OCIExA            OCIE1A
1196:quantum/quantum.c ****       #define OCRxx             OCR1A
1197:quantum/quantum.c ****     #elif !defined(C6_AUDIO) && !defined(C5_AUDIO) && !defined(C4_AUDIO)
1198:quantum/quantum.c ****       #pragma message "Using hardware timer 3 with software PWM"
1199:quantum/quantum.c ****       // Timer 3 is not in use by Audio feature, Backlight can use it
1200:quantum/quantum.c ****       #define HARDWARE_PWM
1201:quantum/quantum.c ****       #define BACKLIGHT_PWM_TIMER
1202:quantum/quantum.c ****       #define ICRx              ICR1
1203:quantum/quantum.c ****       #define TCCRxA            TCCR3A
1204:quantum/quantum.c ****       #define TCCRxB            TCCR3B
1205:quantum/quantum.c ****       #define TIMERx_COMPA_vect TIMER3_COMPA_vect
1206:quantum/quantum.c ****       #define TIMERx_OVF_vect   TIMER3_OVF_vect
1207:quantum/quantum.c ****       #define TIMSKx            TIMSK3
1208:quantum/quantum.c ****       #define TOIEx             TOIE3
1209:quantum/quantum.c **** 
1210:quantum/quantum.c ****       #define OCIExA            OCIE3A
1211:quantum/quantum.c ****       #define OCRxx             OCR3A
1212:quantum/quantum.c ****     #else
1213:quantum/quantum.c ****       #pragma message "Audio in use - using pure software PWM"
1214:quantum/quantum.c ****       #define NO_HARDWARE_PWM
1215:quantum/quantum.c ****     #endif
1216:quantum/quantum.c ****   #else
1217:quantum/quantum.c ****     #pragma message "Custom driver defined - using pure software PWM"
1218:quantum/quantum.c ****     #define NO_HARDWARE_PWM
1219:quantum/quantum.c ****   #endif
1220:quantum/quantum.c **** #endif
1221:quantum/quantum.c **** 
1222:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
1223:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
1224:quantum/quantum.c **** #endif
1225:quantum/quantum.c **** 
1226:quantum/quantum.c **** void backlight_on(uint8_t backlight_pin) {
 1677               		.loc 1 1226 42 view -0
 1678               		.cfi_startproc
 1679               	/* prologue: function */
 1680               	/* frame size = 0 */
 1681               	/* stack size = 0 */
 1682               	.L__stack_usage = 0
1227:quantum/quantum.c **** #if BACKLIGHT_ON_STATE == 0
1228:quantum/quantum.c ****   writePinLow(backlight_pin);
 1683               		.loc 1 1228 3 view .LVU372
 1684 0000 E82F      		mov r30,r24
 1685 0002 E295      		swap r30
 1686 0004 EF70      		andi r30,lo8(15)
 1687 0006 F0E0      		ldi r31,0
 1688 0008 32A1      		ldd r19,Z+34
 1689 000a 282F      		mov r18,r24
 1690 000c 2F70      		andi r18,lo8(15)
 1691 000e 81E0      		ldi r24,lo8(1)
 1692 0010 90E0      		ldi r25,0
 1693               	.LVL177:
 1694               		.loc 1 1228 3 is_stmt 0 view .LVU373
 1695 0012 00C0      		rjmp 2f
 1696               		1:
 1697 0014 880F      		lsl r24
 1698               		2:
 1699 0016 2A95      		dec r18
 1700 0018 02F4      		brpl 1b
 1701 001a 8095      		com r24
 1702 001c 8323      		and r24,r19
 1703 001e 82A3      		std Z+34,r24
 1704               	/* epilogue start */
1229:quantum/quantum.c **** #else
1230:quantum/quantum.c ****   writePinHigh(backlight_pin);
1231:quantum/quantum.c **** #endif
1232:quantum/quantum.c **** }
 1705               		.loc 1 1232 1 view .LVU374
 1706 0020 0895      		ret
 1707               		.cfi_endproc
 1708               	.LFE44:
 1710               		.section	.text.backlight_off,"ax",@progbits
 1711               	.global	backlight_off
 1713               	backlight_off:
 1714               	.LVL178:
 1715               	.LFB45:
1233:quantum/quantum.c **** 
1234:quantum/quantum.c **** void backlight_off(uint8_t backlight_pin) {
 1716               		.loc 1 1234 43 is_stmt 1 view -0
 1717               		.cfi_startproc
 1718               	/* prologue: function */
 1719               	/* frame size = 0 */
 1720               	/* stack size = 0 */
 1721               	.L__stack_usage = 0
1235:quantum/quantum.c **** #if BACKLIGHT_ON_STATE == 0
1236:quantum/quantum.c ****   writePinHigh(backlight_pin);
 1722               		.loc 1 1236 3 view .LVU376
 1723 0000 E82F      		mov r30,r24
 1724 0002 E295      		swap r30
 1725 0004 EF70      		andi r30,lo8(15)
 1726 0006 F0E0      		ldi r31,0
 1727 0008 92A1      		ldd r25,Z+34
 1728 000a 8F70      		andi r24,lo8(15)
 1729               	.LVL179:
 1730               		.loc 1 1236 3 is_stmt 0 view .LVU377
 1731 000c 21E0      		ldi r18,lo8(1)
 1732 000e 30E0      		ldi r19,0
 1733 0010 00C0      		rjmp 2f
 1734               		1:
 1735 0012 220F      		lsl r18
 1736               		2:
 1737 0014 8A95      		dec r24
 1738 0016 02F4      		brpl 1b
 1739 0018 922B      		or r25,r18
 1740 001a 92A3      		std Z+34,r25
 1741               	/* epilogue start */
1237:quantum/quantum.c **** #else
1238:quantum/quantum.c ****   writePinLow(backlight_pin);
1239:quantum/quantum.c **** #endif
1240:quantum/quantum.c **** }
 1742               		.loc 1 1240 1 view .LVU378
 1743 001c 0895      		ret
 1744               		.cfi_endproc
 1745               	.LFE45:
 1747               		.section	.text.backlight_set,"ax",@progbits
 1748               		.weak	backlight_set
 1750               	backlight_set:
 1751               	.LVL180:
 1752               	.LFB48:
1241:quantum/quantum.c **** 
1242:quantum/quantum.c **** 
1243:quantum/quantum.c **** #if defined(NO_HARDWARE_PWM) || defined(BACKLIGHT_PWM_TIMER)  // pwm through software
1244:quantum/quantum.c **** 
1245:quantum/quantum.c **** // we support multiple backlight pins
1246:quantum/quantum.c **** #ifndef BACKLIGHT_LED_COUNT
1247:quantum/quantum.c **** #define BACKLIGHT_LED_COUNT 1
1248:quantum/quantum.c **** #endif
1249:quantum/quantum.c **** 
1250:quantum/quantum.c **** #if BACKLIGHT_LED_COUNT == 1
1251:quantum/quantum.c **** #define BACKLIGHT_PIN_INIT { BACKLIGHT_PIN }
1252:quantum/quantum.c **** #else
1253:quantum/quantum.c **** #define BACKLIGHT_PIN_INIT BACKLIGHT_PINS
1254:quantum/quantum.c **** #endif
1255:quantum/quantum.c **** 
1256:quantum/quantum.c **** #define FOR_EACH_LED(x) \
1257:quantum/quantum.c ****   for (uint8_t i = 0; i < BACKLIGHT_LED_COUNT; i++) \
1258:quantum/quantum.c ****   { \
1259:quantum/quantum.c ****     uint8_t backlight_pin = backlight_pins[i]; \
1260:quantum/quantum.c ****     { \
1261:quantum/quantum.c ****       x \
1262:quantum/quantum.c ****     } \
1263:quantum/quantum.c ****   }
1264:quantum/quantum.c **** 
1265:quantum/quantum.c **** static const uint8_t backlight_pins[BACKLIGHT_LED_COUNT] = BACKLIGHT_PIN_INIT;
1266:quantum/quantum.c **** 
1267:quantum/quantum.c **** #else // full hardware PWM
1268:quantum/quantum.c **** 
1269:quantum/quantum.c **** // we support only one backlight pin
1270:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
1271:quantum/quantum.c **** #define FOR_EACH_LED(x) x
1272:quantum/quantum.c **** 
1273:quantum/quantum.c **** #endif
1274:quantum/quantum.c **** 
1275:quantum/quantum.c **** #ifdef NO_HARDWARE_PWM
1276:quantum/quantum.c **** __attribute__((weak))
1277:quantum/quantum.c **** void backlight_init_ports(void)
1278:quantum/quantum.c **** {
1279:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1280:quantum/quantum.c ****   FOR_EACH_LED(
1281:quantum/quantum.c ****     setPinOutput(backlight_pin);
1282:quantum/quantum.c ****     backlight_on(backlight_pin);
1283:quantum/quantum.c ****   )
1284:quantum/quantum.c **** 
1285:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
1286:quantum/quantum.c ****   if (is_backlight_breathing()) {
1287:quantum/quantum.c ****     breathing_enable();
1288:quantum/quantum.c ****   }
1289:quantum/quantum.c ****   #endif
1290:quantum/quantum.c **** }
1291:quantum/quantum.c **** 
1292:quantum/quantum.c **** __attribute__ ((weak))
1293:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1294:quantum/quantum.c **** 
1295:quantum/quantum.c **** uint8_t backlight_tick = 0;
1296:quantum/quantum.c **** 
1297:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
1298:quantum/quantum.c **** void backlight_task(void) {
1299:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1 
1300:quantum/quantum.c ****     FOR_EACH_LED(
1301:quantum/quantum.c ****       backlight_on(backlight_pin);
1302:quantum/quantum.c ****     )
1303:quantum/quantum.c ****   }
1304:quantum/quantum.c ****   else {
1305:quantum/quantum.c ****     FOR_EACH_LED(
1306:quantum/quantum.c ****       backlight_off(backlight_pin);
1307:quantum/quantum.c ****     )
1308:quantum/quantum.c ****   }
1309:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
1310:quantum/quantum.c **** }
1311:quantum/quantum.c **** #endif
1312:quantum/quantum.c **** 
1313:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1314:quantum/quantum.c ****   #ifndef BACKLIGHT_CUSTOM_DRIVER
1315:quantum/quantum.c ****   #error "Backlight breathing only available with hardware PWM. Please disable."
1316:quantum/quantum.c ****   #endif
1317:quantum/quantum.c **** #endif
1318:quantum/quantum.c **** 
1319:quantum/quantum.c **** #else // hardware pwm through timer
1320:quantum/quantum.c **** 
1321:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1322:quantum/quantum.c **** 
1323:quantum/quantum.c **** // The idea of software PWM assisted by hardware timers is the following
1324:quantum/quantum.c **** // we use the hardware timer in fast PWM mode like for hardware PWM, but
1325:quantum/quantum.c **** // instead of letting the Output Match Comparator control the led pin
1326:quantum/quantum.c **** // (which is not possible since the backlight is not wired to PWM pins on the
1327:quantum/quantum.c **** // CPU), we do the LED on/off by oursleves.
1328:quantum/quantum.c **** // The timer is setup to count up to 0xFFFF, and we set the Output Compare
1329:quantum/quantum.c **** // register to the current 16bits backlight level (after CIE correction).
1330:quantum/quantum.c **** // This means the CPU will trigger a compare match interrupt when the counter
1331:quantum/quantum.c **** // reaches the backlight level, where we turn off the LEDs,
1332:quantum/quantum.c **** // but also an overflow interrupt when the counter rolls back to 0,
1333:quantum/quantum.c **** // in which we're going to turn on the LEDs.
1334:quantum/quantum.c **** // The LED will then be on for OCRxx/0xFFFF time, adjusted every 244Hz.
1335:quantum/quantum.c **** 
1336:quantum/quantum.c **** // Triggered when the counter reaches the OCRx value
1337:quantum/quantum.c **** ISR(TIMERx_COMPA_vect) {
1338:quantum/quantum.c ****   FOR_EACH_LED(
1339:quantum/quantum.c ****     backlight_off(backlight_pin);
1340:quantum/quantum.c ****   )
1341:quantum/quantum.c **** }
1342:quantum/quantum.c **** 
1343:quantum/quantum.c **** // Triggered when the counter reaches the TOP value
1344:quantum/quantum.c **** // this one triggers at F_CPU/65536 =~ 244 Hz
1345:quantum/quantum.c **** ISR(TIMERx_OVF_vect) {
1346:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1347:quantum/quantum.c ****   if(is_breathing()) {
1348:quantum/quantum.c ****     breathing_task();
1349:quantum/quantum.c ****   }
1350:quantum/quantum.c **** #endif
1351:quantum/quantum.c ****   // for very small values of OCRxx (or backlight level)
1352:quantum/quantum.c ****   // we can't guarantee this whole code won't execute
1353:quantum/quantum.c ****   // at the same time as the compare match interrupt
1354:quantum/quantum.c ****   // which means that we might turn on the leds while
1355:quantum/quantum.c ****   // trying to turn them off, leading to flickering
1356:quantum/quantum.c ****   // artifacts (especially while breathing, because breathing_task
1357:quantum/quantum.c ****   // takes many computation cycles).
1358:quantum/quantum.c ****   // so better not turn them on while the counter TOP is very low.
1359:quantum/quantum.c ****   if (OCRxx > 256) {
1360:quantum/quantum.c ****     FOR_EACH_LED(
1361:quantum/quantum.c ****       backlight_on(backlight_pin);
1362:quantum/quantum.c ****     )
1363:quantum/quantum.c ****   }
1364:quantum/quantum.c **** }
1365:quantum/quantum.c **** 
1366:quantum/quantum.c **** #endif
1367:quantum/quantum.c **** 
1368:quantum/quantum.c **** #define TIMER_TOP 0xFFFFU
1369:quantum/quantum.c **** 
1370:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
1371:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
1372:quantum/quantum.c ****   if (v <= 5243) // if below 8% of max
1373:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
1374:quantum/quantum.c ****   else {
1375:quantum/quantum.c ****     uint32_t y = (((uint32_t) v + 10486) << 8) / (10486 + 0xFFFFUL); // add 16% of max and compare
1376:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
1377:quantum/quantum.c ****     // and revert what we've done again after squaring.
1378:quantum/quantum.c ****     y = y * y * y >> 8;
1379:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
1380:quantum/quantum.c ****       return 0xFFFFU;
1381:quantum/quantum.c ****     else
1382:quantum/quantum.c ****       return (uint16_t) y;
1383:quantum/quantum.c ****   }
1384:quantum/quantum.c **** }
1385:quantum/quantum.c **** 
1386:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
1387:quantum/quantum.c **** static inline void set_pwm(uint16_t val) {
1388:quantum/quantum.c ****   OCRxx = val;
1389:quantum/quantum.c **** }
1390:quantum/quantum.c **** 
1391:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
1392:quantum/quantum.c **** __attribute__ ((weak))
1393:quantum/quantum.c **** void backlight_set(uint8_t level) {
 1753               		.loc 1 1393 35 is_stmt 1 view -0
 1754               		.cfi_startproc
 1755               		.loc 1 1393 35 is_stmt 0 view .LVU380
 1756 0000 CF92      		push r12
 1757               	.LCFI43:
 1758               		.cfi_def_cfa_offset 3
 1759               		.cfi_offset 12, -2
 1760 0002 DF92      		push r13
 1761               	.LCFI44:
 1762               		.cfi_def_cfa_offset 4
 1763               		.cfi_offset 13, -3
 1764 0004 EF92      		push r14
 1765               	.LCFI45:
 1766               		.cfi_def_cfa_offset 5
 1767               		.cfi_offset 14, -4
 1768 0006 FF92      		push r15
 1769               	.LCFI46:
 1770               		.cfi_def_cfa_offset 6
 1771               		.cfi_offset 15, -5
 1772               	/* prologue: function */
 1773               	/* frame size = 0 */
 1774               	/* stack size = 4 */
 1775               	.L__stack_usage = 4
1394:quantum/quantum.c ****   if (level > BACKLIGHT_LEVELS)
 1776               		.loc 1 1394 3 is_stmt 1 view .LVU381
 1777               		.loc 1 1394 6 is_stmt 0 view .LVU382
 1778 0008 8530      		cpi r24,lo8(5)
 1779 000a 00F4      		brsh .L107
1395:quantum/quantum.c ****     level = BACKLIGHT_LEVELS;
1396:quantum/quantum.c **** 
1397:quantum/quantum.c ****   if (level == 0) {
 1780               		.loc 1 1397 3 is_stmt 1 view .LVU383
 1781               		.loc 1 1397 6 is_stmt 0 view .LVU384
 1782 000c 8111      		cpse r24,__zero_reg__
 1783 000e 00C0      		rjmp .L103
1398:quantum/quantum.c ****     #ifdef BACKLIGHT_PWM_TIMER
1399:quantum/quantum.c ****       if (OCRxx) {
1400:quantum/quantum.c ****         TIMSKx &= ~(_BV(OCIExA));
1401:quantum/quantum.c ****         TIMSKx &= ~(_BV(TOIEx));
1402:quantum/quantum.c ****         FOR_EACH_LED(
1403:quantum/quantum.c ****           backlight_off(backlight_pin);
1404:quantum/quantum.c ****         )
1405:quantum/quantum.c ****       }
1406:quantum/quantum.c ****     #else
1407:quantum/quantum.c ****     // Turn off PWM control on backlight pin
1408:quantum/quantum.c ****     TCCRxA &= ~(_BV(COMxx1));
 1784               		.loc 1 1408 5 is_stmt 1 view .LVU385
 1785               		.loc 1 1408 12 is_stmt 0 view .LVU386
 1786 0010 9091 8000 		lds r25,128
 1787 0014 9F7D      		andi r25,lo8(-33)
 1788               	.LVL181:
 1789               	.L109:
1409:quantum/quantum.c ****     #endif
1410:quantum/quantum.c ****   } else {
1411:quantum/quantum.c ****     #ifdef BACKLIGHT_PWM_TIMER
1412:quantum/quantum.c ****       if (!OCRxx) {
1413:quantum/quantum.c ****         TIMSKx |= _BV(OCIExA);
1414:quantum/quantum.c ****         TIMSKx |= _BV(TOIEx);
1415:quantum/quantum.c ****       }
1416:quantum/quantum.c ****     #else
1417:quantum/quantum.c ****     // Turn on PWM control of backlight pin
1418:quantum/quantum.c ****     TCCRxA |= _BV(COMxx1);
 1790               		.loc 1 1418 12 view .LVU387
 1791 0016 9093 8000 		sts 128,r25
1419:quantum/quantum.c ****     #endif
1420:quantum/quantum.c ****   }
1421:quantum/quantum.c ****   // Set the brightness
1422:quantum/quantum.c ****   set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
 1792               		.loc 1 1422 3 is_stmt 1 view .LVU388
 1793               		.loc 1 1422 35 is_stmt 0 view .LVU389
 1794 001a 282F      		mov r18,r24
 1795 001c 30E0      		ldi r19,0
 1796 001e AFEF      		ldi r26,lo8(-1)
 1797 0020 BFEF      		ldi r27,lo8(-1)
 1798 0022 0E94 0000 		call __umulhisi3
 1799               		.loc 1 1422 53 view .LVU390
 1800 0026 42E0      		ldi r20,2
 1801               		1:
 1802 0028 9695      		lsr r25
 1803 002a 8795      		ror r24
 1804 002c 7795      		ror r23
 1805 002e 6795      		ror r22
 1806 0030 4A95      		dec r20
 1807 0032 01F4      		brne 1b
 1808               	.LVL182:
 1809               	.LBB59:
 1810               	.LBI59:
1371:quantum/quantum.c ****   if (v <= 5243) // if below 8% of max
 1811               		.loc 1 1371 17 is_stmt 1 view .LVU391
 1812               	.LBB60:
1372:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
 1813               		.loc 1 1372 3 view .LVU392
1372:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
 1814               		.loc 1 1372 6 is_stmt 0 view .LVU393
 1815 0034 6C37      		cpi r22,124
 1816 0036 44E1      		ldi r20,20
 1817 0038 7407      		cpc r23,r20
 1818 003a 00F4      		brsh .L105
1373:quantum/quantum.c ****   else {
 1819               		.loc 1 1373 5 is_stmt 1 view .LVU394
1373:quantum/quantum.c ****   else {
 1820               		.loc 1 1373 14 is_stmt 0 view .LVU395
 1821 003c CB01      		movw r24,r22
 1822 003e 69E0      		ldi r22,lo8(9)
 1823 0040 70E0      		ldi r23,0
 1824               	.LVL183:
1373:quantum/quantum.c ****   else {
 1825               		.loc 1 1373 14 view .LVU396
 1826 0042 0E94 0000 		call __udivmodhi4
 1827               	.LVL184:
 1828               	.L106:
1373:quantum/quantum.c ****   else {
 1829               		.loc 1 1373 14 view .LVU397
 1830               	.LBE60:
 1831               	.LBE59:
 1832               	.LBB63:
 1833               	.LBI63:
1387:quantum/quantum.c ****   OCRxx = val;
 1834               		.loc 1 1387 20 is_stmt 1 view .LVU398
 1835               	.LBB64:
1388:quantum/quantum.c **** }
 1836               		.loc 1 1388 3 view .LVU399
1388:quantum/quantum.c **** }
 1837               		.loc 1 1388 9 is_stmt 0 view .LVU400
 1838 0046 7093 8B00 		sts 138+1,r23
 1839 004a 6093 8A00 		sts 138,r22
 1840               	.LVL185:
 1841               	/* epilogue start */
1388:quantum/quantum.c **** }
 1842               		.loc 1 1388 9 view .LVU401
 1843               	.LBE64:
 1844               	.LBE63:
1423:quantum/quantum.c **** }
 1845               		.loc 1 1423 1 view .LVU402
 1846 004e FF90      		pop r15
 1847 0050 EF90      		pop r14
 1848 0052 DF90      		pop r13
 1849 0054 CF90      		pop r12
 1850 0056 0895      		ret
 1851               	.LVL186:
 1852               	.L107:
1395:quantum/quantum.c **** 
 1853               		.loc 1 1395 11 view .LVU403
 1854 0058 84E0      		ldi r24,lo8(4)
 1855               	.LVL187:
 1856               	.L103:
1418:quantum/quantum.c ****     #endif
 1857               		.loc 1 1418 5 is_stmt 1 view .LVU404
1418:quantum/quantum.c ****     #endif
 1858               		.loc 1 1418 12 is_stmt 0 view .LVU405
 1859 005a 9091 8000 		lds r25,128
 1860 005e 9062      		ori r25,lo8(32)
 1861 0060 00C0      		rjmp .L109
 1862               	.LVL188:
 1863               	.L105:
 1864               	.LBB65:
 1865               	.LBB62:
 1866               	.LBB61:
1375:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
 1867               		.loc 1 1375 5 is_stmt 1 view .LVU406
1375:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
 1868               		.loc 1 1375 33 is_stmt 0 view .LVU407
 1869 0062 6A50      		subi r22,10
 1870 0064 774D      		sbci r23,-41
 1871 0066 8F4F      		sbci r24,-1
 1872 0068 9F4F      		sbci r25,-1
 1873               	.LVL189:
1375:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
 1874               		.loc 1 1375 42 view .LVU408
 1875 006a 982F      		mov r25,r24
 1876 006c 872F      		mov r24,r23
 1877 006e 762F      		mov r23,r22
 1878 0070 6627      		clr r22
 1879               	.LVL190:
1375:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
 1880               		.loc 1 1375 14 view .LVU409
 1881 0072 25EF      		ldi r18,lo8(-11)
 1882 0074 38E2      		ldi r19,lo8(40)
 1883 0076 41E0      		ldi r20,lo8(1)
 1884 0078 50E0      		ldi r21,0
 1885 007a 0E94 0000 		call __udivmodsi4
 1886 007e 6901      		movw r12,r18
 1887 0080 7A01      		movw r14,r20
 1888               	.LVL191:
1378:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
 1889               		.loc 1 1378 5 is_stmt 1 view .LVU410
1378:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
 1890               		.loc 1 1378 11 is_stmt 0 view .LVU411
 1891 0082 CA01      		movw r24,r20
 1892 0084 B901      		movw r22,r18
 1893 0086 0E94 0000 		call __mulsi3
 1894 008a 9B01      		movw r18,r22
 1895 008c AC01      		movw r20,r24
1378:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
 1896               		.loc 1 1378 15 view .LVU412
 1897 008e C701      		movw r24,r14
 1898 0090 B601      		movw r22,r12
 1899 0092 0E94 0000 		call __mulsi3
1378:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
 1900               		.loc 1 1378 7 view .LVU413
 1901 0096 672F      		mov r22,r23
 1902 0098 782F      		mov r23,r24
 1903 009a 892F      		mov r24,r25
 1904 009c 9927      		clr r25
 1905               	.LVL192:
1379:quantum/quantum.c ****       return 0xFFFFU;
 1906               		.loc 1 1379 5 is_stmt 1 view .LVU414
1379:quantum/quantum.c ****       return 0xFFFFU;
 1907               		.loc 1 1379 8 is_stmt 0 view .LVU415
 1908 009e 6115      		cp r22,__zero_reg__
 1909 00a0 7105      		cpc r23,__zero_reg__
 1910 00a2 21E0      		ldi r18,1
 1911 00a4 8207      		cpc r24,r18
 1912 00a6 9105      		cpc r25,__zero_reg__
 1913 00a8 01F4      		brne .L106
1380:quantum/quantum.c ****     else
 1914               		.loc 1 1380 14 view .LVU416
 1915 00aa 6FEF      		ldi r22,lo8(-1)
 1916 00ac 7FEF      		ldi r23,lo8(-1)
 1917               	.LVL193:
1380:quantum/quantum.c ****     else
 1918               		.loc 1 1380 14 view .LVU417
 1919 00ae 00C0      		rjmp .L106
 1920               	.LBE61:
 1921               	.LBE62:
 1922               	.LBE65:
 1923               		.cfi_endproc
 1924               	.LFE48:
 1926               		.section	.text.backlight_task,"ax",@progbits
 1927               	.global	backlight_task
 1929               	backlight_task:
 1930               	.LFB49:
1424:quantum/quantum.c **** 
1425:quantum/quantum.c **** void backlight_task(void) {}
 1931               		.loc 1 1425 27 is_stmt 1 view -0
 1932               		.cfi_startproc
 1933               	/* prologue: function */
 1934               	/* frame size = 0 */
 1935               	/* stack size = 0 */
 1936               	.L__stack_usage = 0
 1937               		.loc 1 1425 28 view .LVU419
 1938               	/* epilogue start */
 1939               		.loc 1 1425 1 is_stmt 0 view .LVU420
 1940 0000 0895      		ret
 1941               		.cfi_endproc
 1942               	.LFE49:
 1944               		.section	.text.backlight_init_ports,"ax",@progbits
 1945               		.weak	backlight_init_ports
 1947               	backlight_init_ports:
 1948               	.LFB50:
1426:quantum/quantum.c **** #endif  // BACKLIGHT_CUSTOM_DRIVER
1427:quantum/quantum.c **** 
1428:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1429:quantum/quantum.c **** 
1430:quantum/quantum.c **** #define BREATHING_NO_HALT  0
1431:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
1432:quantum/quantum.c **** #define BREATHING_HALT_ON  2
1433:quantum/quantum.c **** #define BREATHING_STEPS 128
1434:quantum/quantum.c **** 
1435:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1436:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1437:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1438:quantum/quantum.c **** 
1439:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1440:quantum/quantum.c **** static bool breathing = false;
1441:quantum/quantum.c **** 
1442:quantum/quantum.c **** bool is_breathing(void) {
1443:quantum/quantum.c ****   return breathing;
1444:quantum/quantum.c **** }
1445:quantum/quantum.c **** 
1446:quantum/quantum.c **** #define breathing_interrupt_enable() do { breathing = true; } while (0)
1447:quantum/quantum.c **** #define breathing_interrupt_disable() do { breathing = false; } while (0)
1448:quantum/quantum.c **** #else
1449:quantum/quantum.c **** 
1450:quantum/quantum.c **** bool is_breathing(void) {
1451:quantum/quantum.c ****     return !!(TIMSKx & _BV(TOIEx));
1452:quantum/quantum.c **** }
1453:quantum/quantum.c **** 
1454:quantum/quantum.c **** #define breathing_interrupt_enable() do {TIMSKx |= _BV(TOIEx);} while (0)
1455:quantum/quantum.c **** #define breathing_interrupt_disable() do {TIMSKx &= ~_BV(TOIEx);} while (0)
1456:quantum/quantum.c **** #endif
1457:quantum/quantum.c **** 
1458:quantum/quantum.c **** #define breathing_min() do {breathing_counter = 0;} while (0)
1459:quantum/quantum.c **** #define breathing_max() do {breathing_counter = breathing_period * 244 / 2;} while (0)
1460:quantum/quantum.c **** 
1461:quantum/quantum.c **** void breathing_enable(void)
1462:quantum/quantum.c **** {
1463:quantum/quantum.c ****   breathing_counter = 0;
1464:quantum/quantum.c ****   breathing_halt = BREATHING_NO_HALT;
1465:quantum/quantum.c ****   breathing_interrupt_enable();
1466:quantum/quantum.c **** }
1467:quantum/quantum.c **** 
1468:quantum/quantum.c **** void breathing_pulse(void)
1469:quantum/quantum.c **** {
1470:quantum/quantum.c ****     if (get_backlight_level() == 0)
1471:quantum/quantum.c ****       breathing_min();
1472:quantum/quantum.c ****     else
1473:quantum/quantum.c ****       breathing_max();
1474:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1475:quantum/quantum.c ****     breathing_interrupt_enable();
1476:quantum/quantum.c **** }
1477:quantum/quantum.c **** 
1478:quantum/quantum.c **** void breathing_disable(void)
1479:quantum/quantum.c **** {
1480:quantum/quantum.c ****     breathing_interrupt_disable();
1481:quantum/quantum.c ****     // Restore backlight level
1482:quantum/quantum.c ****     backlight_set(get_backlight_level());
1483:quantum/quantum.c **** }
1484:quantum/quantum.c **** 
1485:quantum/quantum.c **** void breathing_self_disable(void)
1486:quantum/quantum.c **** {
1487:quantum/quantum.c ****   if (get_backlight_level() == 0)
1488:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_OFF;
1489:quantum/quantum.c ****   else
1490:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1491:quantum/quantum.c **** }
1492:quantum/quantum.c **** 
1493:quantum/quantum.c **** void breathing_toggle(void) {
1494:quantum/quantum.c ****   if (is_breathing())
1495:quantum/quantum.c ****     breathing_disable();
1496:quantum/quantum.c ****   else
1497:quantum/quantum.c ****     breathing_enable();
1498:quantum/quantum.c **** }
1499:quantum/quantum.c **** 
1500:quantum/quantum.c **** void breathing_period_set(uint8_t value)
1501:quantum/quantum.c **** {
1502:quantum/quantum.c ****   if (!value)
1503:quantum/quantum.c ****     value = 1;
1504:quantum/quantum.c ****   breathing_period = value;
1505:quantum/quantum.c **** }
1506:quantum/quantum.c **** 
1507:quantum/quantum.c **** void breathing_period_default(void) {
1508:quantum/quantum.c ****   breathing_period_set(BREATHING_PERIOD);
1509:quantum/quantum.c **** }
1510:quantum/quantum.c **** 
1511:quantum/quantum.c **** void breathing_period_inc(void)
1512:quantum/quantum.c **** {
1513:quantum/quantum.c ****   breathing_period_set(breathing_period+1);
1514:quantum/quantum.c **** }
1515:quantum/quantum.c **** 
1516:quantum/quantum.c **** void breathing_period_dec(void)
1517:quantum/quantum.c **** {
1518:quantum/quantum.c ****   breathing_period_set(breathing_period-1);
1519:quantum/quantum.c **** }
1520:quantum/quantum.c **** 
1521:quantum/quantum.c **** /* To generate breathing curve in python:
1522:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1523:quantum/quantum.c ****  */
1524:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1525:quantum/quantum.c **** 
1526:quantum/quantum.c **** // Use this before the cie_lightness function.
1527:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) {
1528:quantum/quantum.c ****   return v / BACKLIGHT_LEVELS * get_backlight_level();
1529:quantum/quantum.c **** }
1530:quantum/quantum.c **** 
1531:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1532:quantum/quantum.c **** void breathing_task(void)
1533:quantum/quantum.c **** #else
1534:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1535:quantum/quantum.c ****  * about 244 times per second.
1536:quantum/quantum.c ****  */
1537:quantum/quantum.c **** ISR(TIMERx_OVF_vect)
1538:quantum/quantum.c **** #endif
1539:quantum/quantum.c **** {
1540:quantum/quantum.c ****   uint16_t interval = (uint16_t) breathing_period * 244 / BREATHING_STEPS;
1541:quantum/quantum.c ****   // resetting after one period to prevent ugly reset at overflow.
1542:quantum/quantum.c ****   breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1543:quantum/quantum.c ****   uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1544:quantum/quantum.c **** 
1545:quantum/quantum.c ****   if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) ||
1546:quantum/quantum.c ****       ((breathing_halt == BREATHING_HALT_OFF) && (index == BREATHING_STEPS - 1)))
1547:quantum/quantum.c ****   {
1548:quantum/quantum.c ****       breathing_interrupt_disable();
1549:quantum/quantum.c ****   }
1550:quantum/quantum.c **** 
1551:quantum/quantum.c ****   set_pwm(cie_lightness(scale_backlight((uint16_t) pgm_read_byte(&breathing_table[index]) * 0x0101U
1552:quantum/quantum.c **** }
1553:quantum/quantum.c **** 
1554:quantum/quantum.c **** #endif // BACKLIGHT_BREATHING
1555:quantum/quantum.c **** 
1556:quantum/quantum.c **** __attribute__ ((weak))
1557:quantum/quantum.c **** void backlight_init_ports(void)
1558:quantum/quantum.c **** {
 1949               		.loc 1 1558 1 is_stmt 1 view -0
 1950               		.cfi_startproc
 1951               	/* prologue: function */
 1952               	/* frame size = 0 */
 1953               	/* stack size = 0 */
 1954               	.L__stack_usage = 0
1559:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1560:quantum/quantum.c ****   FOR_EACH_LED(
 1955               		.loc 1 1560 3 view .LVU422
 1956 0000 269A      		sbi 0x4,6
 1957               		.loc 1 1560 3 view .LVU423
 1958 0002 86E3      		ldi r24,lo8(54)
 1959 0004 0E94 0000 		call backlight_on
 1960               	.LVL194:
1561:quantum/quantum.c ****     setPinOutput(backlight_pin);
1562:quantum/quantum.c ****     backlight_on(backlight_pin);
1563:quantum/quantum.c ****   )
1564:quantum/quantum.c **** 
1565:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
1566:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
1567:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
1568:quantum/quantum.c **** 
1569:quantum/quantum.c **** #ifdef BACKLIGHT_PWM_TIMER
1570:quantum/quantum.c ****   // TimerX setup, Fast PWM mode count to TOP set in ICRx
1571:quantum/quantum.c ****   TCCRxA = _BV(WGM11); // = 0b00000010;
1572:quantum/quantum.c ****   // clock select clk/1
1573:quantum/quantum.c ****   TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1574:quantum/quantum.c **** #else // hardware PWM
1575:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
1576:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1577:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
1578:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1579:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1580:quantum/quantum.c **** 
1581:quantum/quantum.c ****   /*
1582:quantum/quantum.c ****   14.8.3:
1583:quantum/quantum.c ****   "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Setting 
1584:quantum/quantum.c ****   "In fast PWM mode the counter is incremented until the counter value matches either one of the fi
1585:quantum/quantum.c ****   */
1586:quantum/quantum.c ****   TCCRxA = _BV(COMxx1) | _BV(WGM11);            // = 0b00001010;
 1961               		.loc 1 1586 3 view .LVU424
 1962               		.loc 1 1586 10 is_stmt 0 view .LVU425
 1963 0008 82E2      		ldi r24,lo8(34)
 1964 000a 8093 8000 		sts 128,r24
1587:quantum/quantum.c ****   TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 1965               		.loc 1 1587 3 is_stmt 1 view .LVU426
 1966               		.loc 1 1587 10 is_stmt 0 view .LVU427
 1967 000e 89E1      		ldi r24,lo8(25)
 1968 0010 8093 8100 		sts 129,r24
1588:quantum/quantum.c **** #endif
1589:quantum/quantum.c ****   // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1590:quantum/quantum.c ****   ICRx = TIMER_TOP;
 1969               		.loc 1 1590 3 is_stmt 1 view .LVU428
 1970               		.loc 1 1590 8 is_stmt 0 view .LVU429
 1971 0014 8FEF      		ldi r24,lo8(-1)
 1972 0016 9FEF      		ldi r25,lo8(-1)
 1973 0018 9093 8700 		sts 134+1,r25
 1974 001c 8093 8600 		sts 134,r24
1591:quantum/quantum.c **** 
1592:quantum/quantum.c ****   backlight_init();
 1975               		.loc 1 1592 3 is_stmt 1 view .LVU430
 1976 0020 0C94 0000 		jmp backlight_init
 1977               	.LVL195:
 1978               		.cfi_endproc
 1979               	.LFE50:
 1981               		.section	.text.matrix_init_quantum,"ax",@progbits
 1982               	.global	matrix_init_quantum
 1984               	matrix_init_quantum:
 1985               	.LFB42:
1007:quantum/quantum.c ****   #ifdef BOOTMAGIC_LITE
 1986               		.loc 1 1007 28 view -0
 1987               		.cfi_startproc
 1988               	/* prologue: function */
 1989               	/* frame size = 0 */
 1990               	/* stack size = 0 */
 1991               	.L__stack_usage = 0
1011:quantum/quantum.c ****     eeconfig_init();
 1992               		.loc 1 1011 3 view .LVU432
1011:quantum/quantum.c ****     eeconfig_init();
 1993               		.loc 1 1011 8 is_stmt 0 view .LVU433
 1994 0000 0E94 0000 		call eeconfig_is_enabled
 1995               	.LVL196:
1011:quantum/quantum.c ****     eeconfig_init();
 1996               		.loc 1 1011 6 view .LVU434
 1997 0004 8111      		cpse r24,__zero_reg__
 1998 0006 00C0      		rjmp .L113
1012:quantum/quantum.c ****   }
 1999               		.loc 1 1012 5 is_stmt 1 view .LVU435
 2000 0008 0E94 0000 		call eeconfig_init
 2001               	.LVL197:
 2002               	.L113:
1018:quantum/quantum.c ****     #endif
 2003               		.loc 1 1018 9 view .LVU436
 2004 000c 0E94 0000 		call backlight_init_ports
 2005               	.LVL198:
1039:quantum/quantum.c **** }
 2006               		.loc 1 1039 3 view .LVU437
 2007 0010 0C94 0000 		jmp matrix_init_kb
 2008               	.LVL199:
 2009               		.cfi_endproc
 2010               	.LFE42:
 2012               		.section	.text.send_nibble,"ax",@progbits
 2013               	.global	send_nibble
 2015               	send_nibble:
 2016               	.LVL200:
 2017               	.LFB54:
1593:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
1594:quantum/quantum.c ****     if (is_backlight_breathing()) {
1595:quantum/quantum.c ****       breathing_enable();
1596:quantum/quantum.c ****     }
1597:quantum/quantum.c ****   #endif
1598:quantum/quantum.c **** }
1599:quantum/quantum.c **** 
1600:quantum/quantum.c **** #endif // hardware backlight
1601:quantum/quantum.c **** 
1602:quantum/quantum.c **** #else // no backlight
1603:quantum/quantum.c **** 
1604:quantum/quantum.c **** __attribute__ ((weak))
1605:quantum/quantum.c **** void backlight_init_ports(void) {}
1606:quantum/quantum.c **** 
1607:quantum/quantum.c **** __attribute__ ((weak))
1608:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1609:quantum/quantum.c **** 
1610:quantum/quantum.c **** #endif // backlight
1611:quantum/quantum.c **** 
1612:quantum/quantum.c **** #ifdef HD44780_ENABLED
1613:quantum/quantum.c **** #include "hd44780.h"
1614:quantum/quantum.c **** #endif
1615:quantum/quantum.c **** 
1616:quantum/quantum.c **** 
1617:quantum/quantum.c **** // Functions for spitting out values
1618:quantum/quantum.c **** //
1619:quantum/quantum.c **** 
1620:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
1621:quantum/quantum.c ****     uint16_t word = (number >> 16);
1622:quantum/quantum.c ****     send_word(word);
1623:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1624:quantum/quantum.c **** }
1625:quantum/quantum.c **** 
1626:quantum/quantum.c **** void send_word(uint16_t number) {
1627:quantum/quantum.c ****     uint8_t byte = number >> 8;
1628:quantum/quantum.c ****     send_byte(byte);
1629:quantum/quantum.c ****     send_byte(number & 0xFF);
1630:quantum/quantum.c **** }
1631:quantum/quantum.c **** 
1632:quantum/quantum.c **** void send_byte(uint8_t number) {
1633:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1634:quantum/quantum.c ****     send_nibble(nibble);
1635:quantum/quantum.c ****     send_nibble(number & 0xF);
1636:quantum/quantum.c **** }
1637:quantum/quantum.c **** 
1638:quantum/quantum.c **** void send_nibble(uint8_t number) {
 2018               		.loc 1 1638 34 view -0
 2019               		.cfi_startproc
 2020               		.loc 1 1638 34 is_stmt 0 view .LVU439
 2021 0000 CF93      		push r28
 2022               	.LCFI47:
 2023               		.cfi_def_cfa_offset 3
 2024               		.cfi_offset 28, -2
 2025               	/* prologue: function */
 2026               	/* frame size = 0 */
 2027               	/* stack size = 1 */
 2028               	.L__stack_usage = 1
1639:quantum/quantum.c ****     switch (number) {
 2029               		.loc 1 1639 5 is_stmt 1 view .LVU440
 2030 0002 8A30      		cpi r24,lo8(10)
 2031 0004 00F4      		brsh .L115
 2032 0006 8823      		tst r24
 2033 0008 01F0      		breq .L120
1640:quantum/quantum.c ****         case 0:
1641:quantum/quantum.c ****             register_code(KC_0);
1642:quantum/quantum.c ****             unregister_code(KC_0);
1643:quantum/quantum.c ****             break;
1644:quantum/quantum.c ****         case 1 ... 9:
1645:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 2034               		.loc 1 1645 13 view .LVU441
 2035 000a CDE1      		ldi r28,lo8(29)
 2036               	.L123:
1646:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1647:quantum/quantum.c ****             break;
1648:quantum/quantum.c ****         case 0xA ... 0xF:
1649:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 2037               		.loc 1 1649 13 is_stmt 0 view .LVU442
 2038 000c C80F      		add r28,r24
 2039 000e 8C2F      		mov r24,r28
 2040               	.LVL201:
 2041               		.loc 1 1649 13 view .LVU443
 2042 0010 0E94 0000 		call register_code
 2043               	.LVL202:
1650:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2044               		.loc 1 1650 13 is_stmt 1 view .LVU444
 2045 0014 8C2F      		mov r24,r28
 2046 0016 00C0      		rjmp .L122
 2047               	.LVL203:
 2048               	.L115:
1649:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2049               		.loc 1 1649 13 is_stmt 0 view .LVU445
 2050 0018 CAEF      		ldi r28,lo8(-6)
1639:quantum/quantum.c ****         case 0:
 2051               		.loc 1 1639 5 view .LVU446
 2052 001a 8031      		cpi r24,lo8(16)
 2053 001c 00F0      		brlo .L123
 2054               	/* epilogue start */
1651:quantum/quantum.c ****             break;
1652:quantum/quantum.c ****     }
1653:quantum/quantum.c **** }
 2055               		.loc 1 1653 1 view .LVU447
 2056 001e CF91      		pop r28
 2057 0020 0895      		ret
 2058               	.L120:
1641:quantum/quantum.c ****             unregister_code(KC_0);
 2059               		.loc 1 1641 13 is_stmt 1 view .LVU448
 2060 0022 87E2      		ldi r24,lo8(39)
 2061               	.LVL204:
1641:quantum/quantum.c ****             unregister_code(KC_0);
 2062               		.loc 1 1641 13 is_stmt 0 view .LVU449
 2063 0024 0E94 0000 		call register_code
 2064               	.LVL205:
1642:quantum/quantum.c ****             break;
 2065               		.loc 1 1642 13 is_stmt 1 view .LVU450
 2066 0028 87E2      		ldi r24,lo8(39)
 2067               	.L122:
 2068               	/* epilogue start */
 2069               		.loc 1 1653 1 is_stmt 0 view .LVU451
 2070 002a CF91      		pop r28
1650:quantum/quantum.c ****             break;
 2071               		.loc 1 1650 13 view .LVU452
 2072 002c 0C94 0000 		jmp unregister_code
 2073               	.LVL206:
 2074               		.cfi_endproc
 2075               	.LFE54:
 2077               		.section	.text.send_byte,"ax",@progbits
 2078               	.global	send_byte
 2080               	send_byte:
 2081               	.LVL207:
 2082               	.LFB53:
1632:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2083               		.loc 1 1632 32 is_stmt 1 view -0
 2084               		.cfi_startproc
1632:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2085               		.loc 1 1632 32 is_stmt 0 view .LVU454
 2086 0000 CF93      		push r28
 2087               	.LCFI48:
 2088               		.cfi_def_cfa_offset 3
 2089               		.cfi_offset 28, -2
 2090               	/* prologue: function */
 2091               	/* frame size = 0 */
 2092               	/* stack size = 1 */
 2093               	.L__stack_usage = 1
 2094 0002 C82F      		mov r28,r24
1633:quantum/quantum.c ****     send_nibble(nibble);
 2095               		.loc 1 1633 5 is_stmt 1 view .LVU455
 2096               	.LVL208:
1634:quantum/quantum.c ****     send_nibble(number & 0xF);
 2097               		.loc 1 1634 5 view .LVU456
 2098 0004 8295      		swap r24
 2099               	.LVL209:
1634:quantum/quantum.c ****     send_nibble(number & 0xF);
 2100               		.loc 1 1634 5 is_stmt 0 view .LVU457
 2101 0006 8F70      		andi r24,lo8(15)
 2102 0008 0E94 0000 		call send_nibble
 2103               	.LVL210:
1635:quantum/quantum.c **** }
 2104               		.loc 1 1635 5 is_stmt 1 view .LVU458
 2105 000c 8C2F      		mov r24,r28
 2106 000e 8F70      		andi r24,lo8(15)
 2107               	/* epilogue start */
1636:quantum/quantum.c **** 
 2108               		.loc 1 1636 1 is_stmt 0 view .LVU459
 2109 0010 CF91      		pop r28
 2110               	.LVL211:
1635:quantum/quantum.c **** }
 2111               		.loc 1 1635 5 view .LVU460
 2112 0012 0C94 0000 		jmp send_nibble
 2113               	.LVL212:
 2114               		.cfi_endproc
 2115               	.LFE53:
 2117               		.section	.text.send_word,"ax",@progbits
 2118               	.global	send_word
 2120               	send_word:
 2121               	.LVL213:
 2122               	.LFB52:
1626:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2123               		.loc 1 1626 33 is_stmt 1 view -0
 2124               		.cfi_startproc
1626:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2125               		.loc 1 1626 33 is_stmt 0 view .LVU462
 2126 0000 CF93      		push r28
 2127               	.LCFI49:
 2128               		.cfi_def_cfa_offset 3
 2129               		.cfi_offset 28, -2
 2130               	/* prologue: function */
 2131               	/* frame size = 0 */
 2132               	/* stack size = 1 */
 2133               	.L__stack_usage = 1
 2134 0002 C82F      		mov r28,r24
1627:quantum/quantum.c ****     send_byte(byte);
 2135               		.loc 1 1627 5 is_stmt 1 view .LVU463
 2136               	.LVL214:
1628:quantum/quantum.c ****     send_byte(number & 0xFF);
 2137               		.loc 1 1628 5 view .LVU464
 2138 0004 892F      		mov r24,r25
 2139               	.LVL215:
1628:quantum/quantum.c ****     send_byte(number & 0xFF);
 2140               		.loc 1 1628 5 is_stmt 0 view .LVU465
 2141 0006 0E94 0000 		call send_byte
 2142               	.LVL216:
1629:quantum/quantum.c **** }
 2143               		.loc 1 1629 5 is_stmt 1 view .LVU466
 2144 000a 8C2F      		mov r24,r28
 2145               	/* epilogue start */
1630:quantum/quantum.c **** 
 2146               		.loc 1 1630 1 is_stmt 0 view .LVU467
 2147 000c CF91      		pop r28
1629:quantum/quantum.c **** }
 2148               		.loc 1 1629 5 view .LVU468
 2149 000e 0C94 0000 		jmp send_byte
 2150               	.LVL217:
 2151               		.cfi_endproc
 2152               	.LFE52:
 2154               		.section	.text.send_dword,"ax",@progbits
 2155               	.global	send_dword
 2157               	send_dword:
 2158               	.LVL218:
 2159               	.LFB51:
1620:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2160               		.loc 1 1620 34 is_stmt 1 view -0
 2161               		.cfi_startproc
1620:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2162               		.loc 1 1620 34 is_stmt 0 view .LVU470
 2163 0000 CF92      		push r12
 2164               	.LCFI50:
 2165               		.cfi_def_cfa_offset 3
 2166               		.cfi_offset 12, -2
 2167 0002 DF92      		push r13
 2168               	.LCFI51:
 2169               		.cfi_def_cfa_offset 4
 2170               		.cfi_offset 13, -3
 2171 0004 EF92      		push r14
 2172               	.LCFI52:
 2173               		.cfi_def_cfa_offset 5
 2174               		.cfi_offset 14, -4
 2175 0006 FF92      		push r15
 2176               	.LCFI53:
 2177               		.cfi_def_cfa_offset 6
 2178               		.cfi_offset 15, -5
 2179               	/* prologue: function */
 2180               	/* frame size = 0 */
 2181               	/* stack size = 4 */
 2182               	.L__stack_usage = 4
 2183 0008 6B01      		movw r12,r22
1621:quantum/quantum.c ****     send_word(word);
 2184               		.loc 1 1621 5 is_stmt 1 view .LVU471
1622:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 2185               		.loc 1 1622 5 view .LVU472
 2186 000a 0E94 0000 		call send_word
 2187               	.LVL219:
1623:quantum/quantum.c **** }
 2188               		.loc 1 1623 5 view .LVU473
 2189 000e C601      		movw r24,r12
 2190               	/* epilogue start */
1624:quantum/quantum.c **** 
 2191               		.loc 1 1624 1 is_stmt 0 view .LVU474
 2192 0010 FF90      		pop r15
 2193 0012 EF90      		pop r14
 2194 0014 DF90      		pop r13
 2195 0016 CF90      		pop r12
1623:quantum/quantum.c **** }
 2196               		.loc 1 1623 5 view .LVU475
 2197 0018 0C94 0000 		jmp send_word
 2198               	.LVL220:
 2199               		.cfi_endproc
 2200               	.LFE51:
 2202               		.section	.text.hex_to_keycode,"ax",@progbits
 2203               		.weak	hex_to_keycode
 2205               	hex_to_keycode:
 2206               	.LVL221:
 2207               	.LFB55:
1654:quantum/quantum.c **** 
1655:quantum/quantum.c **** 
1656:quantum/quantum.c **** __attribute__((weak))
1657:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1658:quantum/quantum.c **** {
 2208               		.loc 1 1658 1 is_stmt 1 view -0
 2209               		.cfi_startproc
 2210               	/* prologue: function */
 2211               	/* frame size = 0 */
 2212               	/* stack size = 0 */
 2213               	.L__stack_usage = 0
1659:quantum/quantum.c ****   hex = hex & 0xF;
 2214               		.loc 1 1659 3 view .LVU477
 2215               		.loc 1 1659 7 is_stmt 0 view .LVU478
 2216 0000 282F      		mov r18,r24
 2217 0002 2F70      		andi r18,lo8(15)
 2218               	.LVL222:
1660:quantum/quantum.c ****   if (hex == 0x0) {
 2219               		.loc 1 1660 3 is_stmt 1 view .LVU479
 2220               		.loc 1 1660 6 is_stmt 0 view .LVU480
 2221 0004 01F0      		breq .L130
1661:quantum/quantum.c ****     return KC_0;
1662:quantum/quantum.c ****   } else if (hex < 0xA) {
 2222               		.loc 1 1662 10 is_stmt 1 view .LVU481
 2223 0006 822F      		mov r24,r18
 2224 0008 90E0      		ldi r25,0
 2225               		.loc 1 1662 13 is_stmt 0 view .LVU482
 2226 000a 2A30      		cpi r18,lo8(10)
 2227 000c 00F4      		brsh .L129
1663:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 2228               		.loc 1 1663 5 is_stmt 1 view .LVU483
 2229               		.loc 1 1663 17 is_stmt 0 view .LVU484
 2230 000e 4D96      		adiw r24,29
 2231 0010 0895      		ret
 2232               	.L129:
1664:quantum/quantum.c ****   } else {
1665:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 2233               		.loc 1 1665 5 is_stmt 1 view .LVU485
 2234               		.loc 1 1665 17 is_stmt 0 view .LVU486
 2235 0012 0697      		sbiw r24,6
 2236 0014 0895      		ret
 2237               	.L130:
1661:quantum/quantum.c ****   } else if (hex < 0xA) {
 2238               		.loc 1 1661 12 view .LVU487
 2239 0016 87E2      		ldi r24,lo8(39)
 2240 0018 90E0      		ldi r25,0
 2241               	/* epilogue start */
1666:quantum/quantum.c ****   }
1667:quantum/quantum.c **** }
 2242               		.loc 1 1667 1 view .LVU488
 2243 001a 0895      		ret
 2244               		.cfi_endproc
 2245               	.LFE55:
 2247               		.section	.text.api_send_unicode,"ax",@progbits
 2248               	.global	api_send_unicode
 2250               	api_send_unicode:
 2251               	.LVL223:
 2252               	.LFB56:
1668:quantum/quantum.c **** 
1669:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2253               		.loc 1 1669 41 is_stmt 1 view -0
 2254               		.cfi_startproc
 2255               	/* prologue: function */
 2256               	/* frame size = 0 */
 2257               	/* stack size = 0 */
 2258               	.L__stack_usage = 0
1670:quantum/quantum.c **** #ifdef API_ENABLE
1671:quantum/quantum.c ****     uint8_t chunk[4];
1672:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1673:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1674:quantum/quantum.c **** #endif
1675:quantum/quantum.c **** }
 2259               		.loc 1 1675 1 view .LVU490
 2260               	/* epilogue start */
 2261 0000 0895      		ret
 2262               		.cfi_endproc
 2263               	.LFE56:
 2265               		.section	.text.led_set_user,"ax",@progbits
 2266               		.weak	led_set_user
 2268               	led_set_user:
 2269               	.LVL224:
 2270               	.LFB57:
1676:quantum/quantum.c **** 
1677:quantum/quantum.c **** __attribute__ ((weak))
1678:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 2271               		.loc 1 1678 36 view -0
 2272               		.cfi_startproc
 2273               	/* prologue: function */
 2274               	/* frame size = 0 */
 2275               	/* stack size = 0 */
 2276               	.L__stack_usage = 0
1679:quantum/quantum.c **** 
1680:quantum/quantum.c **** }
 2277               		.loc 1 1680 1 view .LVU492
 2278               	/* epilogue start */
 2279 0000 0895      		ret
 2280               		.cfi_endproc
 2281               	.LFE57:
 2283               		.section	.text.led_set_kb,"ax",@progbits
 2284               		.weak	led_set_kb
 2286               	led_set_kb:
 2287               	.LVL225:
 2288               	.LFB58:
1681:quantum/quantum.c **** 
1682:quantum/quantum.c **** __attribute__ ((weak))
1683:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 2289               		.loc 1 1683 34 view -0
 2290               		.cfi_startproc
 2291               	/* prologue: function */
 2292               	/* frame size = 0 */
 2293               	/* stack size = 0 */
 2294               	.L__stack_usage = 0
1684:quantum/quantum.c ****     led_set_user(usb_led);
 2295               		.loc 1 1684 5 view .LVU494
 2296 0000 0C94 0000 		jmp led_set_user
 2297               	.LVL226:
 2298               		.loc 1 1684 5 is_stmt 0 view .LVU495
 2299               		.cfi_endproc
 2300               	.LFE58:
 2302               		.section	.text.led_init_ports,"ax",@progbits
 2303               		.weak	led_init_ports
 2305               	led_init_ports:
 2306               	.LFB59:
1685:quantum/quantum.c **** }
1686:quantum/quantum.c **** 
1687:quantum/quantum.c **** __attribute__ ((weak))
1688:quantum/quantum.c **** void led_init_ports(void)
1689:quantum/quantum.c **** {
 2307               		.loc 1 1689 1 is_stmt 1 view -0
 2308               		.cfi_startproc
 2309               	/* prologue: function */
 2310               	/* frame size = 0 */
 2311               	/* stack size = 0 */
 2312               	.L__stack_usage = 0
1690:quantum/quantum.c **** 
1691:quantum/quantum.c **** }
 2313               		.loc 1 1691 1 view .LVU497
 2314               	/* epilogue start */
 2315 0000 0895      		ret
 2316               		.cfi_endproc
 2317               	.LFE59:
 2319               		.section	.text.led_set,"ax",@progbits
 2320               		.weak	led_set
 2322               	led_set:
 2323               	.LVL227:
 2324               	.LFB60:
1692:quantum/quantum.c **** 
1693:quantum/quantum.c **** __attribute__ ((weak))
1694:quantum/quantum.c **** void led_set(uint8_t usb_led)
1695:quantum/quantum.c **** {
 2325               		.loc 1 1695 1 view -0
 2326               		.cfi_startproc
 2327               	/* prologue: function */
 2328               	/* frame size = 0 */
 2329               	/* stack size = 0 */
 2330               	.L__stack_usage = 0
1696:quantum/quantum.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
1697:quantum/quantum.c ****   // Use backlight as Caps Lock indicator
1698:quantum/quantum.c ****   uint8_t bl_toggle_lvl = 0;
1699:quantum/quantum.c **** 
1700:quantum/quantum.c ****   if (IS_LED_ON(usb_led, USB_LED_CAPS_LOCK) && !backlight_config.enable) {
1701:quantum/quantum.c ****     // Turning Caps Lock ON and backlight is disabled in config
1702:quantum/quantum.c ****     // Toggling backlight to the brightest level
1703:quantum/quantum.c ****     bl_toggle_lvl = BACKLIGHT_LEVELS;
1704:quantum/quantum.c ****   } else if (IS_LED_OFF(usb_led, USB_LED_CAPS_LOCK) && backlight_config.enable) {
1705:quantum/quantum.c ****     // Turning Caps Lock OFF and backlight is enabled in config
1706:quantum/quantum.c ****     // Toggling backlight and restoring config level
1707:quantum/quantum.c ****     bl_toggle_lvl = backlight_config.level;
1708:quantum/quantum.c ****   }
1709:quantum/quantum.c **** 
1710:quantum/quantum.c ****   // Set level without modify backlight_config to keep ability to restore state
1711:quantum/quantum.c ****   backlight_set(bl_toggle_lvl);
1712:quantum/quantum.c **** #endif
1713:quantum/quantum.c **** 
1714:quantum/quantum.c ****   led_set_kb(usb_led);
 2331               		.loc 1 1714 3 view .LVU499
 2332 0000 0C94 0000 		jmp led_set_kb
 2333               	.LVL228:
 2334               		.loc 1 1714 3 is_stmt 0 view .LVU500
 2335               		.cfi_endproc
 2336               	.LFE60:
 2338               		.section	.text.startup_user,"ax",@progbits
 2339               		.weak	startup_user
 2341               	startup_user:
 2342               	.LFB64:
 2343               		.cfi_startproc
 2344               	/* prologue: function */
 2345               	/* frame size = 0 */
 2346               	/* stack size = 0 */
 2347               	.L__stack_usage = 0
 2348               	/* epilogue start */
 2349 0000 0895      		ret
 2350               		.cfi_endproc
 2351               	.LFE64:
 2353               		.section	.text.shutdown_user,"ax",@progbits
 2354               		.weak	shutdown_user
 2356               	shutdown_user:
 2357               	.LFB66:
 2358               		.cfi_startproc
 2359               	/* prologue: function */
 2360               	/* frame size = 0 */
 2361               	/* stack size = 0 */
 2362               	.L__stack_usage = 0
 2363               	/* epilogue start */
 2364 0000 0895      		ret
 2365               		.cfi_endproc
 2366               	.LFE66:
 2368               		.section	.text.reset_keyboard,"ax",@progbits
 2369               	.global	reset_keyboard
 2371               	reset_keyboard:
 2372               	.LFB28:
 174:quantum/quantum.c ****   clear_keyboard();
 2373               		.loc 1 174 27 is_stmt 1 view -0
 2374               		.cfi_startproc
 2375               	/* prologue: function */
 2376               	/* frame size = 0 */
 2377               	/* stack size = 0 */
 2378               	.L__stack_usage = 0
 175:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 2379               		.loc 1 175 3 view .LVU502
 2380 0000 0E94 0000 		call clear_keyboard
 2381               	.LVL229:
 190:quantum/quantum.c ****   wait_ms(250);
 2382               		.loc 1 190 3 view .LVU503
 2383 0004 0E94 0000 		call shutdown_user
 2384               	.LVL230:
 191:quantum/quantum.c **** #endif
 2385               		.loc 1 191 3 view .LVU504
 2386               	.LBB66:
 2387               	.LBI66:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** {
 2388               		.loc 2 166 1 view .LVU505
 2389               	.LBB67:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 2390               		.loc 2 168 2 view .LVU506
 172:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 2391               		.loc 2 172 2 view .LVU507
 173:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 2392               		.loc 2 173 2 view .LVU508
 174:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 
 2393               		.loc 2 174 2 view .LVU509
 184:/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/util/delay.h **** 	#endif
 2394               		.loc 2 184 3 view .LVU510
 2395               		.loc 2 187 2 view .LVU511
 2396 0008 2FEF      		ldi r18,lo8(799999)
 2397 000a 84E3      		ldi r24,hi8(799999)
 2398 000c 9CE0      		ldi r25,hlo8(799999)
 2399 000e 2150      	1:	subi r18,1
 2400 0010 8040      		sbci r24,0
 2401 0012 9040      		sbci r25,0
 2402 0014 01F4      		brne 1b
 2403 0016 00C0      		rjmp .
 2404 0018 0000      		nop
 2405               	.LVL231:
 2406               		.loc 2 187 2 is_stmt 0 view .LVU512
 2407               	.LBE67:
 2408               	.LBE66:
 200:quantum/quantum.c **** }
 2409               		.loc 1 200 3 is_stmt 1 view .LVU513
 2410 001a 0C94 0000 		jmp bootloader_jump
 2411               	.LVL232:
 2412               		.cfi_endproc
 2413               	.LFE28:
 2415               		.section	.text.process_record_quantum,"ax",@progbits
 2416               	.global	process_record_quantum
 2418               	process_record_quantum:
 2419               	.LVL233:
 2420               	.LFB31:
 239:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2421               		.loc 1 239 50 view -0
 2422               		.cfi_startproc
 239:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 2423               		.loc 1 239 50 is_stmt 0 view .LVU515
 2424 0000 0F93      		push r16
 2425               	.LCFI54:
 2426               		.cfi_def_cfa_offset 3
 2427               		.cfi_offset 16, -2
 2428 0002 1F93      		push r17
 2429               	.LCFI55:
 2430               		.cfi_def_cfa_offset 4
 2431               		.cfi_offset 17, -3
 2432 0004 CF93      		push r28
 2433               	.LCFI56:
 2434               		.cfi_def_cfa_offset 5
 2435               		.cfi_offset 28, -4
 2436 0006 DF93      		push r29
 2437               	.LCFI57:
 2438               		.cfi_def_cfa_offset 6
 2439               		.cfi_offset 29, -5
 2440               	/* prologue: function */
 2441               	/* frame size = 0 */
 2442               	/* stack size = 4 */
 2443               	.L__stack_usage = 4
 2444 0008 8C01      		movw r16,r24
 240:quantum/quantum.c **** 
 2445               		.loc 1 240 5 is_stmt 1 view .LVU516
 240:quantum/quantum.c **** 
 2446               		.loc 1 240 24 is_stmt 0 view .LVU517
 2447 000a 0E94 0000 		call get_record_keycode
 2448               	.LVL234:
 240:quantum/quantum.c **** 
 2449               		.loc 1 240 24 view .LVU518
 2450 000e EC01      		movw r28,r24
 2451               	.LVL235:
 258:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 2452               		.loc 1 258 3 is_stmt 1 view .LVU519
 272:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2453               		.loc 1 272 5 is_stmt 0 view .LVU520
 2454 0010 B801      		movw r22,r16
 2455 0012 0E94 0000 		call process_record_kb
 2456               	.LVL236:
 272:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2457               		.loc 1 272 40 view .LVU521
 2458 0016 8823      		tst r24
 2459 0018 01F4      		brne .+2
 2460 001a 00C0      		rjmp .L139
 307:quantum/quantum.c ****   #endif
 2461               		.loc 1 307 5 discriminator 2 view .LVU522
 2462 001c B801      		movw r22,r16
 2463 001e CE01      		movw r24,r28
 2464 0020 0E94 0000 		call process_space_cadet
 2465               	.LVL237:
 272:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2466               		.loc 1 272 40 discriminator 2 view .LVU523
 2467 0024 8823      		tst r24
 2468 0026 01F4      		brne .+2
 2469 0028 00C0      		rjmp .L139
 315:quantum/quantum.c ****     case RESET:
 2470               		.loc 1 315 3 is_stmt 1 view .LVU524
 2471 002a CB3C      		cpi r28,-53
 2472 002c 8CE5      		ldi r24,92
 2473 002e D807      		cpc r29,r24
 2474 0030 01F4      		brne .+2
 2475 0032 00C0      		rjmp .L143
 2476 0034 00F0      		brlo .+2
 2477 0036 00C0      		rjmp .L144
 2478 0038 C33C      		cpi r28,-61
 2479 003a ECE5      		ldi r30,92
 2480 003c DE07      		cpc r29,r30
 2481 003e 01F4      		brne .+2
 2482 0040 00C0      		rjmp .L145
 2483 0042 00F4      		brsh .L146
 2484 0044 C631      		cpi r28,22
 2485 0046 8CE5      		ldi r24,92
 2486 0048 D807      		cpc r29,r24
 2487 004a 00F4      		brsh .L147
 2488 004c C230      		cpi r28,2
 2489 004e 9CE5      		ldi r25,92
 2490 0050 D907      		cpc r29,r25
 2491 0052 00F0      		brlo .+2
 2492 0054 00C0      		rjmp .L148
 2493 0056 C115      		cp r28,__zero_reg__
 2494 0058 ECE5      		ldi r30,92
 2495 005a DE07      		cpc r29,r30
 2496 005c 01F4      		brne .+2
 2497 005e 00C0      		rjmp .L149
 2498 0060 C130      		cpi r28,1
 2499 0062 DC45      		sbci r29,92
 2500 0064 01F4      		brne .+2
 2501 0066 00C0      		rjmp .L150
 2502               	.L151:
 760:quantum/quantum.c **** }
 2503               		.loc 1 760 3 view .LVU525
 760:quantum/quantum.c **** }
 2504               		.loc 1 760 10 is_stmt 0 view .LVU526
 2505 0068 C801      		movw r24,r16
 2506               	/* epilogue start */
 761:quantum/quantum.c **** 
 2507               		.loc 1 761 1 view .LVU527
 2508 006a DF91      		pop r29
 2509 006c CF91      		pop r28
 2510               	.LVL238:
 761:quantum/quantum.c **** 
 2511               		.loc 1 761 1 view .LVU528
 2512 006e 1F91      		pop r17
 2513 0070 0F91      		pop r16
 2514               	.LVL239:
 760:quantum/quantum.c **** }
 2515               		.loc 1 760 10 view .LVU529
 2516 0072 0C94 0000 		jmp process_action_kb
 2517               	.LVL240:
 2518               	.L147:
 315:quantum/quantum.c ****     case RESET:
 2519               		.loc 1 315 3 view .LVU530
 2520 0076 C631      		cpi r28,22
 2521 0078 8CE5      		ldi r24,92
 2522 007a D807      		cpc r29,r24
 2523 007c 01F4      		brne .+2
 2524 007e 00C0      		rjmp .L152
 2525 0080 C23C      		cpi r28,-62
 2526 0082 DC45      		sbci r29,92
 2527 0084 01F4      		brne .L151
 357:quantum/quantum.c ****     #else
 2528               		.loc 1 357 5 is_stmt 1 view .LVU531
 357:quantum/quantum.c ****     #else
 2529               		.loc 1 357 8 is_stmt 0 view .LVU532
 2530 0086 F801      		movw r30,r16
 2531 0088 8281      		ldd r24,Z+2
 2532 008a 8823      		tst r24
 2533 008c 01F4      		brne .+2
 2534 008e 00C0      		rjmp .L139
 361:quantum/quantum.c ****     }
 2535               		.loc 1 361 7 is_stmt 1 view .LVU533
 2536 0090 0E94 0000 		call rgblight_toggle
 2537               	.LVL241:
 2538 0094 00C0      		rjmp .L139
 2539               	.L146:
 361:quantum/quantum.c ****     }
 2540               		.loc 1 361 7 is_stmt 0 view .LVU534
 2541 0096 F801      		movw r30,r16
 2542 0098 8281      		ldd r24,Z+2
 315:quantum/quantum.c ****     case RESET:
 2543               		.loc 1 315 3 view .LVU535
 2544 009a C73C      		cpi r28,-57
 2545 009c FCE5      		ldi r31,92
 2546 009e DF07      		cpc r29,r31
 2547 00a0 01F4      		brne .+2
 2548 00a2 00C0      		rjmp .L154
 315:quantum/quantum.c ****     case RESET:
 2549               		.loc 1 315 3 view .LVU536
 2550 00a4 00F4      		brsh .L155
 2551 00a6 C53C      		cpi r28,-59
 2552 00a8 ECE5      		ldi r30,92
 2553 00aa DE07      		cpc r29,r30
 2554 00ac 01F4      		brne .+2
 2555 00ae 00C0      		rjmp .L156
 2556 00b0 00F4      		brsh .+2
 2557 00b2 00C0      		rjmp .L314
 399:quantum/quantum.c ****     #else
 2558               		.loc 1 399 5 is_stmt 1 view .LVU537
 399:quantum/quantum.c ****     #else
 2559               		.loc 1 399 8 is_stmt 0 view .LVU538
 2560 00b4 8823      		tst r24
 2561 00b6 01F4      		brne .+2
 2562 00b8 00C0      		rjmp .L139
 403:quantum/quantum.c ****     }
 2563               		.loc 1 403 7 is_stmt 1 view .LVU539
 2564 00ba 0E94 0000 		call rgblight_decrease_hue
 2565               	.LVL242:
 2566 00be 00C0      		rjmp .L139
 2567               	.L155:
 315:quantum/quantum.c ****     case RESET:
 2568               		.loc 1 315 3 is_stmt 0 view .LVU540
 2569 00c0 C93C      		cpi r28,-55
 2570 00c2 9CE5      		ldi r25,92
 2571 00c4 D907      		cpc r29,r25
 2572 00c6 01F4      		brne .+2
 2573 00c8 00C0      		rjmp .L159
 2574 00ca 00F4      		brsh .+2
 2575 00cc 00C0      		rjmp .L315
 439:quantum/quantum.c ****     #else
 2576               		.loc 1 439 5 is_stmt 1 view .LVU541
 439:quantum/quantum.c ****     #else
 2577               		.loc 1 439 8 is_stmt 0 view .LVU542
 2578 00ce 8823      		tst r24
 2579 00d0 01F4      		brne .+2
 2580 00d2 00C0      		rjmp .L139
 443:quantum/quantum.c ****     }
 2581               		.loc 1 443 7 is_stmt 1 view .LVU543
 2582 00d4 0E94 0000 		call rgblight_decrease_val
 2583               	.LVL243:
 2584 00d8 00C0      		rjmp .L139
 2585               	.L144:
 315:quantum/quantum.c ****     case RESET:
 2586               		.loc 1 315 3 is_stmt 0 view .LVU544
 2587 00da C33D      		cpi r28,-45
 2588 00dc FCE5      		ldi r31,92
 2589 00de DF07      		cpc r29,r31
 2590 00e0 01F4      		brne .+2
 2591 00e2 00C0      		rjmp .L162
 2592 00e4 00F4      		brsh .L163
 2593 00e6 F801      		movw r30,r16
 2594 00e8 8281      		ldd r24,Z+2
 2595 00ea CF3C      		cpi r28,-49
 2596 00ec FCE5      		ldi r31,92
 2597 00ee DF07      		cpc r29,r31
 2598 00f0 01F4      		brne .+2
 2599 00f2 00C0      		rjmp .L164
 315:quantum/quantum.c ****     case RESET:
 2600               		.loc 1 315 3 view .LVU545
 2601 00f4 00F4      		brsh .L165
 2602 00f6 CD3C      		cpi r28,-51
 2603 00f8 ECE5      		ldi r30,92
 2604 00fa DE07      		cpc r29,r30
 2605 00fc 01F4      		brne .+2
 2606 00fe 00C0      		rjmp .L166
 2607 0100 00F4      		brsh .+2
 2608 0102 00C0      		rjmp .L316
 463:quantum/quantum.c ****       if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) &&
 2609               		.loc 1 463 5 is_stmt 1 view .LVU546
 463:quantum/quantum.c ****       if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) &&
 2610               		.loc 1 463 8 is_stmt 0 view .LVU547
 2611 0104 8823      		tst r24
 2612 0106 01F4      		brne .+2
 2613 0108 00C0      		rjmp .L139
 464:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 2614               		.loc 1 464 7 is_stmt 1 view .LVU548
 464:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 2615               		.loc 1 464 39 is_stmt 0 view .LVU549
 2616 010a 0E94 0000 		call rgblight_get_mode
 2617               	.LVL244:
 464:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 2618               		.loc 1 464 10 view .LVU550
 2619 010e 8230      		cpi r24,lo8(2)
 2620 0110 00F0      		brlo .L181
 465:quantum/quantum.c ****         rgblight_step();
 2621               		.loc 1 465 12 discriminator 1 view .LVU551
 2622 0112 0E94 0000 		call rgblight_get_mode
 2623               	.LVL245:
 464:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_BREATHING_end)) {
 2624               		.loc 1 464 60 discriminator 1 view .LVU552
 2625 0116 8530      		cpi r24,lo8(5)
 2626 0118 00F4      		brsh .+2
 2627 011a 00C0      		rjmp .L179
 2628               	.L181:
 468:quantum/quantum.c ****       }
 2629               		.loc 1 468 9 is_stmt 1 view .LVU553
 2630 011c 82E0      		ldi r24,lo8(2)
 2631 011e 00C0      		rjmp .L323
 2632               	.L165:
 315:quantum/quantum.c ****     case RESET:
 2633               		.loc 1 315 3 is_stmt 0 view .LVU554
 2634 0120 C13D      		cpi r28,-47
 2635 0122 9CE5      		ldi r25,92
 2636 0124 D907      		cpc r29,r25
 2637 0126 01F4      		brne .+2
 2638 0128 00C0      		rjmp .L169
 2639 012a 00F4      		brsh .+2
 2640 012c 00C0      		rjmp .L317
 511:quantum/quantum.c ****       if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) &&
 2641               		.loc 1 511 5 is_stmt 1 view .LVU555
 511:quantum/quantum.c ****       if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) &&
 2642               		.loc 1 511 8 is_stmt 0 view .LVU556
 2643 012e 8823      		tst r24
 2644 0130 01F4      		brne .+2
 2645 0132 00C0      		rjmp .L139
 512:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 2646               		.loc 1 512 7 is_stmt 1 view .LVU557
 512:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 2647               		.loc 1 512 36 is_stmt 0 view .LVU558
 2648 0134 0E94 0000 		call rgblight_get_mode
 2649               	.LVL246:
 512:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 2650               		.loc 1 512 10 view .LVU559
 2651 0138 8531      		cpi r24,lo8(21)
 2652 013a 00F0      		brlo .L185
 513:quantum/quantum.c ****         rgblight_step();
 2653               		.loc 1 513 12 discriminator 1 view .LVU560
 2654 013c 0E94 0000 		call rgblight_get_mode
 2655               	.LVL247:
 512:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_KNIGHT_end)) {
 2656               		.loc 1 512 57 discriminator 1 view .LVU561
 2657 0140 8731      		cpi r24,lo8(23)
 2658 0142 00F4      		brsh .+2
 2659 0144 00C0      		rjmp .L179
 2660               	.L185:
 516:quantum/quantum.c ****       }
 2661               		.loc 1 516 9 is_stmt 1 view .LVU562
 2662 0146 85E1      		ldi r24,lo8(21)
 2663 0148 00C0      		rjmp .L323
 2664               	.L163:
 315:quantum/quantum.c ****     case RESET:
 2665               		.loc 1 315 3 is_stmt 0 view .LVU563
 2666 014a CD3D      		cpi r28,-35
 2667 014c FCE5      		ldi r31,92
 2668 014e DF07      		cpc r29,r31
 2669 0150 01F4      		brne .+2
 2670 0152 00C0      		rjmp .L172
 2671 0154 00F4      		brsh .L173
 2672 0156 C53D      		cpi r28,-43
 2673 0158 9CE5      		ldi r25,92
 2674 015a D907      		cpc r29,r25
 2675 015c 01F4      		brne .+2
 2676 015e 00C0      		rjmp .L174
 2677 0160 00F4      		brsh .+2
 2678 0162 00C0      		rjmp .L175
 2679 0164 CC3D      		cpi r28,-36
 2680 0166 DC45      		sbci r29,92
 2681 0168 01F0      		breq .+2
 2682 016a 00C0      		rjmp .L151
 557:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 2683               		.loc 1 557 7 is_stmt 1 view .LVU564
 557:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 2684               		.loc 1 557 10 is_stmt 0 view .LVU565
 2685 016c F801      		movw r30,r16
 2686 016e 8281      		ldd r24,Z+2
 2687 0170 8823      		tst r24
 2688 0172 01F4      		brne .+2
 2689 0174 00C0      		rjmp .L139
 558:quantum/quantum.c ****       }
 2690               		.loc 1 558 9 is_stmt 1 view .LVU566
 2691 0176 80E0      		ldi r24,0
 2692               	.L324:
 563:quantum/quantum.c ****       }
 2693               		.loc 1 563 9 is_stmt 0 view .LVU567
 2694 0178 0E94 0000 		call set_output
 2695               	.LVL248:
 2696 017c 00C0      		rjmp .L139
 2697               	.L173:
 315:quantum/quantum.c ****     case RESET:
 2698               		.loc 1 315 3 view .LVU568
 2699 017e CE3D      		cpi r28,-34
 2700 0180 8CE5      		ldi r24,92
 2701 0182 D807      		cpc r29,r24
 2702 0184 01F4      		brne .+2
 2703 0186 00C0      		rjmp .L177
 2704 0188 CE01      		movw r24,r28
 2705 018a 875F      		subi r24,-9
 2706 018c 9C45      		sbci r25,92
 2707 018e 0797      		sbiw r24,7
 2708 0190 00F0      		brlo .+2
 2709 0192 00C0      		rjmp .L151
 2710               	.L148:
 576:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 2711               		.loc 1 576 7 is_stmt 1 view .LVU569
 576:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 2712               		.loc 1 576 10 is_stmt 0 view .LVU570
 2713 0194 F801      		movw r30,r16
 2714 0196 8281      		ldd r24,Z+2
 2715 0198 8823      		tst r24
 2716 019a 01F4      		brne .+2
 2717 019c 00C0      		rjmp .L151
 578:quantum/quantum.c ****             eeconfig_init();
 2718               		.loc 1 578 9 is_stmt 1 view .LVU571
 578:quantum/quantum.c ****             eeconfig_init();
 2719               		.loc 1 578 14 is_stmt 0 view .LVU572
 2720 019e 0E94 0000 		call eeconfig_is_enabled
 2721               	.LVL249:
 578:quantum/quantum.c ****             eeconfig_init();
 2722               		.loc 1 578 12 view .LVU573
 2723 01a2 8111      		cpse r24,__zero_reg__
 2724 01a4 00C0      		rjmp .L187
 579:quantum/quantum.c ****         }
 2725               		.loc 1 579 13 is_stmt 1 view .LVU574
 2726 01a6 0E94 0000 		call eeconfig_init
 2727               	.LVL250:
 2728               	.L187:
 582:quantum/quantum.c ****         switch (keycode)
 2729               		.loc 1 582 9 view .LVU575
 582:quantum/quantum.c ****         switch (keycode)
 2730               		.loc 1 582 29 is_stmt 0 view .LVU576
 2731 01aa 0E94 0000 		call eeconfig_read_keymap
 2732               	.LVL251:
 582:quantum/quantum.c ****         switch (keycode)
 2733               		.loc 1 582 27 view .LVU577
 2734 01ae 9093 0000 		sts keymap_config+1,r25
 2735 01b2 8093 0000 		sts keymap_config,r24
 583:quantum/quantum.c ****         {
 2736               		.loc 1 583 9 is_stmt 1 view .LVU578
 2737 01b6 CF30      		cpi r28,15
 2738 01b8 FCE5      		ldi r31,92
 2739 01ba DF07      		cpc r29,r31
 2740 01bc 01F4      		brne .+2
 2741 01be 00C0      		rjmp .L188
 2742 01c0 00F0      		brlo .+2
 2743 01c2 00C0      		rjmp .L189
 2744 01c4 C830      		cpi r28,8
 2745 01c6 9CE5      		ldi r25,92
 2746 01c8 D907      		cpc r29,r25
 2747 01ca 01F4      		brne .+2
 2748 01cc 00C0      		rjmp .L190
 2749 01ce 00F0      		brlo .+2
 2750 01d0 00C0      		rjmp .L191
 2751 01d2 C430      		cpi r28,4
 2752 01d4 FCE5      		ldi r31,92
 2753 01d6 DF07      		cpc r29,r31
 2754 01d8 01F4      		brne .+2
 2755 01da 00C0      		rjmp .L192
 2756 01dc 00F0      		brlo .+2
 2757 01de 00C0      		rjmp .L193
 2758 01e0 C230      		cpi r28,2
 2759 01e2 9CE5      		ldi r25,92
 2760 01e4 D907      		cpc r29,r25
 2761 01e6 01F4      		brne .+2
 2762 01e8 00C0      		rjmp .L194
 589:quantum/quantum.c ****             break;
 2763               		.loc 1 589 47 is_stmt 0 view .LVU579
 2764 01ea 8091 0000 		lds r24,keymap_config
 2765 01ee 8260      		ori r24,lo8(1<<1)
 2766 01f0 C330      		cpi r28,3
 2767 01f2 DC45      		sbci r29,92
 2768 01f4 01F4      		brne .+2
 2769 01f6 00C0      		rjmp .L320
 2770               	.L196:
 697:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 2771               		.loc 1 697 9 is_stmt 1 view .LVU580
 2772 01f8 8091 0000 		lds r24,keymap_config
 2773 01fc 9091 0000 		lds r25,keymap_config+1
 2774 0200 0E94 0000 		call eeconfig_update_keymap
 2775               	.LVL252:
 698:quantum/quantum.c **** 
 2776               		.loc 1 698 9 view .LVU581
 2777 0204 0E94 0000 		call clear_keyboard
 2778               	.LVL253:
 700:quantum/quantum.c ****       }
 2779               		.loc 1 700 9 view .LVU582
 700:quantum/quantum.c ****       }
 2780               		.loc 1 700 16 is_stmt 0 view .LVU583
 2781 0208 00C0      		rjmp .L139
 2782               	.L149:
 317:quantum/quantum.c ****         reset_keyboard();
 2783               		.loc 1 317 7 is_stmt 1 view .LVU584
 317:quantum/quantum.c ****         reset_keyboard();
 2784               		.loc 1 317 10 is_stmt 0 view .LVU585
 2785 020a F801      		movw r30,r16
 2786 020c 8281      		ldd r24,Z+2
 2787 020e 8111      		cpse r24,__zero_reg__
 318:quantum/quantum.c ****       }
 2788               		.loc 1 318 9 is_stmt 1 view .LVU586
 2789 0210 0E94 0000 		call reset_keyboard
 2790               	.LVL254:
 2791               	.L139:
 761:quantum/quantum.c **** 
 2792               		.loc 1 761 1 is_stmt 0 view .LVU587
 2793 0214 80E0      		ldi r24,0
 2794               	/* epilogue start */
 2795 0216 DF91      		pop r29
 2796 0218 CF91      		pop r28
 2797               	.LVL255:
 761:quantum/quantum.c **** 
 2798               		.loc 1 761 1 view .LVU588
 2799 021a 1F91      		pop r17
 2800 021c 0F91      		pop r16
 2801               	.LVL256:
 761:quantum/quantum.c **** 
 2802               		.loc 1 761 1 view .LVU589
 2803 021e 0895      		ret
 2804               	.LVL257:
 2805               	.L150:
 322:quantum/quantum.c ****         debug_enable ^= 1;
 2806               		.loc 1 322 7 is_stmt 1 view .LVU590
 322:quantum/quantum.c ****         debug_enable ^= 1;
 2807               		.loc 1 322 10 is_stmt 0 view .LVU591
 2808 0220 F801      		movw r30,r16
 2809 0222 8281      		ldd r24,Z+2
 2810 0224 8823      		tst r24
 2811 0226 01F0      		breq .L139
 323:quantum/quantum.c ****         if (debug_enable) {
 2812               		.loc 1 323 9 is_stmt 1 view .LVU592
 323:quantum/quantum.c ****         if (debug_enable) {
 2813               		.loc 1 323 22 is_stmt 0 view .LVU593
 2814 0228 9091 0000 		lds r25,debug_config
 2815 022c 892F      		mov r24,r25
 2816 022e 8E7F      		andi r24,~(1<<0)
 2817 0230 90FF      		sbrs r25,0
 2818 0232 8160      		ori r24,1<<0
 2819 0234 8093 0000 		sts debug_config,r24
 324:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 2820               		.loc 1 324 9 is_stmt 1 view .LVU594
 324:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 2821               		.loc 1 324 12 is_stmt 0 view .LVU595
 2822 0238 80FF      		sbrs r24,0
 2823 023a 00C0      		rjmp .L178
 325:quantum/quantum.c ****         } else {
 2824               		.loc 1 325 11 is_stmt 1 view .LVU596
 2825               	.LBB68:
 325:quantum/quantum.c ****         } else {
 2826               		.loc 1 325 11 view .LVU597
 325:quantum/quantum.c ****         } else {
 2827               		.loc 1 325 11 view .LVU598
 2828               	.LBE68:
 2829 023c 80E0      		ldi r24,lo8(__c.3728)
 2830 023e 90E0      		ldi r25,hi8(__c.3728)
 2831               	.L322:
 327:quantum/quantum.c ****         }
 2832               		.loc 1 327 11 is_stmt 0 view .LVU599
 2833 0240 0E94 0000 		call xputs
 2834               	.LVL258:
 2835 0244 00C0      		rjmp .L139
 2836               	.L178:
 327:quantum/quantum.c ****         }
 2837               		.loc 1 327 11 is_stmt 1 view .LVU600
 2838               	.LBB69:
 327:quantum/quantum.c ****         }
 2839               		.loc 1 327 11 view .LVU601
 327:quantum/quantum.c ****         }
 2840               		.loc 1 327 11 view .LVU602
 2841               	.LBE69:
 2842 0246 80E0      		ldi r24,lo8(__c.3730)
 2843 0248 90E0      		ldi r25,hi8(__c.3730)
 2844 024a 00C0      		rjmp .L322
 2845               	.L177:
 332:quantum/quantum.c ****           eeconfig_init();
 2846               		.loc 1 332 7 view .LVU603
 332:quantum/quantum.c ****           eeconfig_init();
 2847               		.loc 1 332 10 is_stmt 0 view .LVU604
 2848 024c F801      		movw r30,r16
 2849 024e 8281      		ldd r24,Z+2
 2850 0250 8823      		tst r24
 2851 0252 01F0      		breq .L139
 333:quantum/quantum.c ****       }
 2852               		.loc 1 333 11 is_stmt 1 view .LVU605
 2853 0254 0E94 0000 		call eeconfig_init
 2854               	.LVL259:
 2855 0258 00C0      		rjmp .L139
 2856               	.L145:
 365:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 2857               		.loc 1 365 5 view .LVU606
 365:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 2858               		.loc 1 365 8 is_stmt 0 view .LVU607
 2859 025a F801      		movw r30,r16
 2860 025c 8281      		ldd r24,Z+2
 2861 025e 8823      		tst r24
 2862 0260 01F0      		breq .L139
 2863               	.LBB70:
 366:quantum/quantum.c ****       if(shifted) {
 2864               		.loc 1 366 7 is_stmt 1 view .LVU608
 366:quantum/quantum.c ****       if(shifted) {
 2865               		.loc 1 366 25 is_stmt 0 view .LVU609
 2866 0262 0E94 0000 		call get_mods
 2867               	.LVL260:
 367:quantum/quantum.c ****         rgblight_step_reverse();
 2868               		.loc 1 367 7 is_stmt 1 view .LVU610
 366:quantum/quantum.c ****       if(shifted) {
 2869               		.loc 1 366 15 is_stmt 0 view .LVU611
 2870 0266 8272      		andi r24,lo8(34)
 2871               	.LVL261:
 367:quantum/quantum.c ****         rgblight_step_reverse();
 2872               		.loc 1 367 9 view .LVU612
 2873 0268 01F0      		breq .L179
 2874               	.LVL262:
 2875               	.L180:
 368:quantum/quantum.c ****       }
 2876               		.loc 1 368 9 is_stmt 1 view .LVU613
 2877 026a 0E94 0000 		call rgblight_step_reverse
 2878               	.LVL263:
 2879 026e 00C0      		rjmp .L139
 2880               	.L314:
 368:quantum/quantum.c ****       }
 2881               		.loc 1 368 9 is_stmt 0 view .LVU614
 2882               	.LBE70:
 376:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 2883               		.loc 1 376 5 is_stmt 1 view .LVU615
 376:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 2884               		.loc 1 376 8 is_stmt 0 view .LVU616
 2885 0270 8823      		tst r24
 2886 0272 01F0      		breq .L139
 2887               	.LBB71:
 377:quantum/quantum.c ****       if(shifted) {
 2888               		.loc 1 377 7 is_stmt 1 view .LVU617
 377:quantum/quantum.c ****       if(shifted) {
 2889               		.loc 1 377 25 is_stmt 0 view .LVU618
 2890 0274 0E94 0000 		call get_mods
 2891               	.LVL264:
 378:quantum/quantum.c ****         rgblight_step();
 2892               		.loc 1 378 7 is_stmt 1 view .LVU619
 377:quantum/quantum.c ****       if(shifted) {
 2893               		.loc 1 377 15 is_stmt 0 view .LVU620
 2894 0278 8272      		andi r24,lo8(34)
 2895               	.LVL265:
 378:quantum/quantum.c ****         rgblight_step();
 2896               		.loc 1 378 9 view .LVU621
 2897 027a 01F0      		breq .L180
 2898               	.LVL266:
 2899               	.L179:
 378:quantum/quantum.c ****         rgblight_step();
 2900               		.loc 1 378 9 view .LVU622
 2901               	.LBE71:
 2902               	.LBB72:
 371:quantum/quantum.c ****       }
 2903               		.loc 1 371 9 is_stmt 1 view .LVU623
 2904 027c 0E94 0000 		call rgblight_step
 2905               	.LVL267:
 2906 0280 00C0      		rjmp .L139
 2907               	.L156:
 371:quantum/quantum.c ****       }
 2908               		.loc 1 371 9 is_stmt 0 view .LVU624
 2909               	.LBE72:
 389:quantum/quantum.c ****     #else
 2910               		.loc 1 389 5 is_stmt 1 view .LVU625
 389:quantum/quantum.c ****     #else
 2911               		.loc 1 389 8 is_stmt 0 view .LVU626
 2912 0282 8823      		tst r24
 2913 0284 01F0      		breq .L139
 393:quantum/quantum.c ****     }
 2914               		.loc 1 393 7 is_stmt 1 view .LVU627
 2915 0286 0E94 0000 		call rgblight_increase_hue
 2916               	.LVL268:
 2917 028a 00C0      		rjmp .L139
 2918               	.L154:
 409:quantum/quantum.c ****     #else
 2919               		.loc 1 409 5 view .LVU628
 409:quantum/quantum.c ****     #else
 2920               		.loc 1 409 8 is_stmt 0 view .LVU629
 2921 028c 8823      		tst r24
 2922 028e 01F4      		brne .+2
 2923 0290 00C0      		rjmp .L139
 413:quantum/quantum.c ****     }
 2924               		.loc 1 413 7 is_stmt 1 view .LVU630
 2925 0292 0E94 0000 		call rgblight_increase_sat
 2926               	.LVL269:
 2927 0296 00C0      		rjmp .L139
 2928               	.L315:
 419:quantum/quantum.c ****     #else
 2929               		.loc 1 419 5 view .LVU631
 419:quantum/quantum.c ****     #else
 2930               		.loc 1 419 8 is_stmt 0 view .LVU632
 2931 0298 8823      		tst r24
 2932 029a 01F4      		brne .+2
 2933 029c 00C0      		rjmp .L139
 423:quantum/quantum.c ****     }
 2934               		.loc 1 423 7 is_stmt 1 view .LVU633
 2935 029e 0E94 0000 		call rgblight_decrease_sat
 2936               	.LVL270:
 2937 02a2 00C0      		rjmp .L139
 2938               	.L159:
 429:quantum/quantum.c ****     #else
 2939               		.loc 1 429 5 view .LVU634
 429:quantum/quantum.c ****     #else
 2940               		.loc 1 429 8 is_stmt 0 view .LVU635
 2941 02a4 8823      		tst r24
 2942 02a6 01F4      		brne .+2
 2943 02a8 00C0      		rjmp .L139
 433:quantum/quantum.c ****     }
 2944               		.loc 1 433 7 is_stmt 1 view .LVU636
 2945 02aa 0E94 0000 		call rgblight_increase_val
 2946               	.LVL271:
 2947 02ae 00C0      		rjmp .L139
 2948               	.L143:
 447:quantum/quantum.c ****       rgblight_increase_speed();
 2949               		.loc 1 447 5 view .LVU637
 447:quantum/quantum.c ****       rgblight_increase_speed();
 2950               		.loc 1 447 8 is_stmt 0 view .LVU638
 2951 02b0 F801      		movw r30,r16
 2952 02b2 8281      		ldd r24,Z+2
 2953 02b4 8823      		tst r24
 2954 02b6 01F4      		brne .+2
 2955 02b8 00C0      		rjmp .L139
 448:quantum/quantum.c ****     }
 2956               		.loc 1 448 7 is_stmt 1 view .LVU639
 2957 02ba 0E94 0000 		call rgblight_increase_speed
 2958               	.LVL272:
 2959 02be 00C0      		rjmp .L139
 2960               	.L316:
 452:quantum/quantum.c ****       rgblight_decrease_speed();
 2961               		.loc 1 452 5 view .LVU640
 452:quantum/quantum.c ****       rgblight_decrease_speed();
 2962               		.loc 1 452 8 is_stmt 0 view .LVU641
 2963 02c0 8823      		tst r24
 2964 02c2 01F4      		brne .+2
 2965 02c4 00C0      		rjmp .L139
 453:quantum/quantum.c ****     }
 2966               		.loc 1 453 7 is_stmt 1 view .LVU642
 2967 02c6 0E94 0000 		call rgblight_decrease_speed
 2968               	.LVL273:
 2969 02ca 00C0      		rjmp .L139
 2970               	.L166:
 457:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 2971               		.loc 1 457 5 view .LVU643
 457:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 2972               		.loc 1 457 8 is_stmt 0 view .LVU644
 2973 02cc 8823      		tst r24
 2974 02ce 01F4      		brne .+2
 2975 02d0 00C0      		rjmp .L139
 458:quantum/quantum.c ****     }
 2976               		.loc 1 458 7 is_stmt 1 view .LVU645
 2977 02d2 81E0      		ldi r24,lo8(1)
 2978               	.L323:
 468:quantum/quantum.c ****       }
 2979               		.loc 1 468 9 is_stmt 0 view .LVU646
 2980 02d4 0E94 0000 		call rgblight_mode
 2981               	.LVL274:
 2982 02d8 00C0      		rjmp .L139
 2983               	.L164:
 475:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) &&
 2984               		.loc 1 475 5 is_stmt 1 view .LVU647
 475:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) &&
 2985               		.loc 1 475 8 is_stmt 0 view .LVU648
 2986 02da 8823      		tst r24
 2987 02dc 01F4      		brne .+2
 2988 02de 00C0      		rjmp .L139
 476:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 2989               		.loc 1 476 7 is_stmt 1 view .LVU649
 476:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 2990               		.loc 1 476 42 is_stmt 0 view .LVU650
 2991 02e0 0E94 0000 		call rgblight_get_mode
 2992               	.LVL275:
 476:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 2993               		.loc 1 476 10 view .LVU651
 2994 02e4 8630      		cpi r24,lo8(6)
 2995 02e6 00F0      		brlo .L182
 477:quantum/quantum.c ****         rgblight_step();
 2996               		.loc 1 477 12 discriminator 1 view .LVU652
 2997 02e8 0E94 0000 		call rgblight_get_mode
 2998               	.LVL276:
 476:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_MOOD_end)) {
 2999               		.loc 1 476 63 discriminator 1 view .LVU653
 3000 02ec 8830      		cpi r24,lo8(8)
 3001 02ee 00F0      		brlo .L179
 3002               	.L182:
 480:quantum/quantum.c ****       }
 3003               		.loc 1 480 9 is_stmt 1 view .LVU654
 3004 02f0 86E0      		ldi r24,lo8(6)
 3005 02f2 00C0      		rjmp .L323
 3006               	.L317:
 487:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) &&
 3007               		.loc 1 487 5 view .LVU655
 487:quantum/quantum.c ****       if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) &&
 3008               		.loc 1 487 8 is_stmt 0 view .LVU656
 3009 02f4 8823      		tst r24
 3010 02f6 01F4      		brne .+2
 3011 02f8 00C0      		rjmp .L139
 488:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 3012               		.loc 1 488 7 is_stmt 1 view .LVU657
 488:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 3013               		.loc 1 488 43 is_stmt 0 view .LVU658
 3014 02fa 0E94 0000 		call rgblight_get_mode
 3015               	.LVL277:
 488:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 3016               		.loc 1 488 10 view .LVU659
 3017 02fe 8930      		cpi r24,lo8(9)
 3018 0300 00F0      		brlo .L183
 489:quantum/quantum.c ****         rgblight_step();
 3019               		.loc 1 489 12 discriminator 1 view .LVU660
 3020 0302 0E94 0000 		call rgblight_get_mode
 3021               	.LVL278:
 488:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_RAINBOW_SWIRL_end)) {
 3022               		.loc 1 488 64 discriminator 1 view .LVU661
 3023 0306 8E30      		cpi r24,lo8(14)
 3024 0308 00F4      		brsh .+2
 3025 030a 00C0      		rjmp .L179
 3026               	.L183:
 492:quantum/quantum.c ****       }
 3027               		.loc 1 492 9 is_stmt 1 view .LVU662
 3028 030c 89E0      		ldi r24,lo8(9)
 3029 030e 00C0      		rjmp .L323
 3030               	.L169:
 499:quantum/quantum.c ****       if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) &&
 3031               		.loc 1 499 5 view .LVU663
 499:quantum/quantum.c ****       if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) &&
 3032               		.loc 1 499 8 is_stmt 0 view .LVU664
 3033 0310 8823      		tst r24
 3034 0312 01F4      		brne .+2
 3035 0314 00C0      		rjmp .L139
 500:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 3036               		.loc 1 500 7 is_stmt 1 view .LVU665
 500:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 3037               		.loc 1 500 35 is_stmt 0 view .LVU666
 3038 0316 0E94 0000 		call rgblight_get_mode
 3039               	.LVL279:
 500:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 3040               		.loc 1 500 10 view .LVU667
 3041 031a 8F30      		cpi r24,lo8(15)
 3042 031c 00F0      		brlo .L184
 501:quantum/quantum.c ****         rgblight_step();
 3043               		.loc 1 501 12 discriminator 1 view .LVU668
 3044 031e 0E94 0000 		call rgblight_get_mode
 3045               	.LVL280:
 500:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_SNAKE_end)) {
 3046               		.loc 1 500 56 discriminator 1 view .LVU669
 3047 0322 8431      		cpi r24,lo8(20)
 3048 0324 00F4      		brsh .+2
 3049 0326 00C0      		rjmp .L179
 3050               	.L184:
 504:quantum/quantum.c ****       }
 3051               		.loc 1 504 9 is_stmt 1 view .LVU670
 3052 0328 8FE0      		ldi r24,lo8(15)
 3053 032a 00C0      		rjmp .L323
 3054               	.L162:
 523:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 3055               		.loc 1 523 5 view .LVU671
 523:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 3056               		.loc 1 523 8 is_stmt 0 view .LVU672
 3057 032c F801      		movw r30,r16
 3058 032e 8281      		ldd r24,Z+2
 3059 0330 8823      		tst r24
 3060 0332 01F4      		brne .+2
 3061 0334 00C0      		rjmp .L139
 524:quantum/quantum.c ****     }
 3062               		.loc 1 524 7 is_stmt 1 view .LVU673
 3063 0336 88E1      		ldi r24,lo8(24)
 3064 0338 00C0      		rjmp .L323
 3065               	.L175:
 530:quantum/quantum.c ****       if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) &&
 3066               		.loc 1 530 5 view .LVU674
 530:quantum/quantum.c ****       if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) &&
 3067               		.loc 1 530 8 is_stmt 0 view .LVU675
 3068 033a F801      		movw r30,r16
 3069 033c 8281      		ldd r24,Z+2
 3070 033e 8823      		tst r24
 3071 0340 01F4      		brne .+2
 3072 0342 00C0      		rjmp .L139
 531:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 3073               		.loc 1 531 7 is_stmt 1 view .LVU676
 531:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 3074               		.loc 1 531 45 is_stmt 0 view .LVU677
 3075 0344 0E94 0000 		call rgblight_get_mode
 3076               	.LVL281:
 531:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 3077               		.loc 1 531 10 view .LVU678
 3078 0348 8931      		cpi r24,lo8(25)
 3079 034a 00F0      		brlo .L186
 532:quantum/quantum.c ****         rgblight_step();
 3080               		.loc 1 532 12 discriminator 1 view .LVU679
 3081 034c 0E94 0000 		call rgblight_get_mode
 3082               	.LVL282:
 531:quantum/quantum.c ****           (rgblight_get_mode() < RGBLIGHT_MODE_STATIC_GRADIENT_end)) {
 3083               		.loc 1 531 66 discriminator 1 view .LVU680
 3084 0350 8232      		cpi r24,lo8(34)
 3085 0352 00F4      		brsh .+2
 3086 0354 00C0      		rjmp .L179
 3087               	.L186:
 535:quantum/quantum.c ****       }
 3088               		.loc 1 535 9 is_stmt 1 view .LVU681
 3089 0356 89E1      		ldi r24,lo8(25)
 3090 0358 00C0      		rjmp .L323
 3091               	.L174:
 542:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 3092               		.loc 1 542 5 view .LVU682
 542:quantum/quantum.c ****       rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 3093               		.loc 1 542 8 is_stmt 0 view .LVU683
 3094 035a F801      		movw r30,r16
 3095 035c 8281      		ldd r24,Z+2
 3096 035e 8823      		tst r24
 3097 0360 01F4      		brne .+2
 3098 0362 00C0      		rjmp .L139
 543:quantum/quantum.c ****     }
 3099               		.loc 1 543 7 is_stmt 1 view .LVU684
 3100 0364 83E2      		ldi r24,lo8(35)
 3101 0366 00C0      		rjmp .L323
 3102               	.L172:
 562:quantum/quantum.c ****         set_output(OUTPUT_USB);
 3103               		.loc 1 562 7 view .LVU685
 562:quantum/quantum.c ****         set_output(OUTPUT_USB);
 3104               		.loc 1 562 10 is_stmt 0 view .LVU686
 3105 0368 F801      		movw r30,r16
 3106 036a 8281      		ldd r24,Z+2
 3107 036c 8823      		tst r24
 3108 036e 01F4      		brne .+2
 3109 0370 00C0      		rjmp .L139
 563:quantum/quantum.c ****       }
 3110               		.loc 1 563 9 is_stmt 1 view .LVU687
 3111 0372 82E0      		ldi r24,lo8(2)
 3112 0374 00C0      		rjmp .L324
 3113               	.L193:
 604:quantum/quantum.c ****             break;
 3114               		.loc 1 604 34 is_stmt 0 view .LVU688
 3115 0376 8091 0000 		lds r24,keymap_config
 3116 037a 8061      		ori r24,lo8(1<<4)
 3117 037c C630      		cpi r28,6
 3118 037e FCE5      		ldi r31,92
 3119 0380 DF07      		cpc r29,r31
 3120 0382 01F4      		brne .+2
 3121 0384 00C0      		rjmp .L320
 3122 0386 00F4      		brsh .+2
 3123 0388 00C0      		rjmp .L318
 607:quantum/quantum.c ****             break;
 3124               		.loc 1 607 13 is_stmt 1 view .LVU689
 607:quantum/quantum.c ****             break;
 3125               		.loc 1 607 42 is_stmt 0 view .LVU690
 3126 038a 8091 0000 		lds r24,keymap_config
 3127 038e 8062      		ori r24,lo8(1<<5)
 3128 0390 00C0      		rjmp .L320
 3129               	.L191:
 3130 0392 CB30      		cpi r28,11
 3131 0394 9CE5      		ldi r25,92
 3132 0396 D907      		cpc r29,r25
 3133 0398 01F4      		brne .+2
 3134 039a 00C0      		rjmp .L200
 3135 039c 00F4      		brsh .L201
 3136 039e C930      		cpi r28,9
 3137 03a0 FCE5      		ldi r31,92
 3138 03a2 DF07      		cpc r29,r31
 3139 03a4 01F4      		brne .+2
 3140 03a6 00C0      		rjmp .L202
 3141 03a8 CA30      		cpi r28,10
 3142 03aa DC45      		sbci r29,92
 3143 03ac 01F0      		breq .+2
 3144 03ae 00C0      		rjmp .L196
 616:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3145               		.loc 1 616 13 is_stmt 1 view .LVU691
 616:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3146               		.loc 1 616 42 is_stmt 0 view .LVU692
 3147 03b0 8091 0000 		lds r24,keymap_config
 3148 03b4 8C60      		ori r24,lo8(12)
 3149 03b6 00C0      		rjmp .L320
 3150               	.L201:
 634:quantum/quantum.c ****             break;
 3151               		.loc 1 634 42 view .LVU693
 3152 03b8 8091 0000 		lds r24,keymap_config
 3153 03bc 8B7F      		andi r24,lo8(~(1<<2))
 3154 03be CD30      		cpi r28,13
 3155 03c0 9CE5      		ldi r25,92
 3156 03c2 D907      		cpc r29,r25
 3157 03c4 01F4      		brne .+2
 3158 03c6 00C0      		rjmp .L320
 631:quantum/quantum.c ****             break;
 3159               		.loc 1 631 47 view .LVU694
 3160 03c8 8091 0000 		lds r24,keymap_config
 3161 03cc 8D7F      		andi r24,lo8(~(1<<1))
 3162 03ce CE30      		cpi r28,14
 3163 03d0 DC45      		sbci r29,92
 3164 03d2 00F4      		brsh .+2
 3165 03d4 00C0      		rjmp .L320
 637:quantum/quantum.c ****             break;
 3166               		.loc 1 637 13 is_stmt 1 view .LVU695
 637:quantum/quantum.c ****             break;
 3167               		.loc 1 637 42 is_stmt 0 view .LVU696
 3168 03d6 8091 0000 		lds r24,keymap_config
 3169 03da 877F      		andi r24,lo8(~(1<<3))
 3170 03dc 00C0      		rjmp .L320
 3171               	.L189:
 3172 03de C73F      		cpi r28,-9
 3173 03e0 FCE5      		ldi r31,92
 3174 03e2 DF07      		cpc r29,r31
 3175 03e4 01F4      		brne .+2
 3176 03e6 00C0      		rjmp .L207
 3177 03e8 00F4      		brsh .L208
 3178 03ea C231      		cpi r28,18
 3179 03ec 9CE5      		ldi r25,92
 3180 03ee D907      		cpc r29,r25
 3181 03f0 01F4      		brne .+2
 3182 03f2 00C0      		rjmp .L209
 3183 03f4 00F4      		brsh .L210
 3184 03f6 C031      		cpi r28,16
 3185 03f8 FCE5      		ldi r31,92
 3186 03fa DF07      		cpc r29,r31
 3187 03fc 01F4      		brne .+2
 3188 03fe 00C0      		rjmp .L211
 3189 0400 C131      		cpi r28,17
 3190 0402 DC45      		sbci r29,92
 3191 0404 01F0      		breq .+2
 3192 0406 00C0      		rjmp .L196
 652:quantum/quantum.c ****             break;
 3193               		.loc 1 652 13 is_stmt 1 view .LVU697
 652:quantum/quantum.c ****             break;
 3194               		.loc 1 652 52 is_stmt 0 view .LVU698
 3195 0408 8091 0000 		lds r24,keymap_config
 3196 040c 8F7B      		andi r24,lo8(~(1<<6))
 3197 040e 00C0      		rjmp .L320
 3198               	.L210:
 3199 0410 C431      		cpi r28,20
 3200 0412 9CE5      		ldi r25,92
 3201 0414 D907      		cpc r29,r25
 3202 0416 01F4      		brne .+2
 3203 0418 00C0      		rjmp .L213
 3204 041a 00F4      		brsh .+2
 3205 041c 00C0      		rjmp .L214
 3206 041e C531      		cpi r28,21
 3207 0420 DC45      		sbci r29,92
 3208 0422 01F0      		breq .+2
 3209 0424 00C0      		rjmp .L196
 670:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 3210               		.loc 1 670 13 is_stmt 1 view .LVU699
 670:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 3211               		.loc 1 670 58 is_stmt 0 view .LVU700
 3212 0426 8091 0000 		lds r24,keymap_config
 3213 042a 82FB      		bst r24,2
 3214 042c 9927      		clr r25
 3215 042e 90F9      		bld r25,0
 670:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 3216               		.loc 1 670 13 view .LVU701
 3217 0430 21E0      		ldi r18,lo8(1)
 3218 0432 9227      		eor r25,r18
 670:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 3219               		.loc 1 670 42 view .LVU702
 3220 0434 90FB      		bst r25,0
 3221 0436 82F9      		bld r24,2
 671:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3222               		.loc 1 671 13 is_stmt 1 view .LVU703
 671:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3223               		.loc 1 671 42 is_stmt 0 view .LVU704
 3224 0438 90FB      		bst r25,0
 3225 043a 83F9      		bld r24,3
 3226 043c 00C0      		rjmp .L320
 3227               	.L208:
 3228 043e CA3F      		cpi r28,-6
 3229 0440 8CE5      		ldi r24,92
 3230 0442 D807      		cpc r29,r24
 3231 0444 01F4      		brne .+2
 3232 0446 00C0      		rjmp .L216
 3233 0448 00F4      		brsh .L217
 3234 044a C83F      		cpi r28,-8
 3235 044c ECE5      		ldi r30,92
 3236 044e DE07      		cpc r29,r30
 3237 0450 01F0      		breq .L218
 640:quantum/quantum.c ****             break;
 3238               		.loc 1 640 42 view .LVU705
 3239 0452 8091 0000 		lds r24,keymap_config+1
 3240 0456 8E7F      		andi r24,lo8(~(1<<0))
 3241 0458 C93F      		cpi r28,-7
 3242 045a DC45      		sbci r29,92
 3243 045c 01F0      		breq .+2
 3244 045e 00C0      		rjmp .L196
 3245               	.L321:
 682:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3246               		.loc 1 682 42 view .LVU706
 3247 0460 8093 0000 		sts keymap_config+1,r24
 690:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 3248               		.loc 1 690 13 is_stmt 1 view .LVU707
 3249 0464 00C0      		rjmp .L196
 3250               	.L217:
 3251 0466 CC3F      		cpi r28,-4
 3252 0468 8CE5      		ldi r24,92
 3253 046a D807      		cpc r29,r24
 3254 046c 01F4      		brne .+2
 3255 046e 00C0      		rjmp .L220
 3256 0470 00F0      		brlo .L221
 3257 0472 CD3F      		cpi r28,-3
 3258 0474 DC45      		sbci r29,92
 3259 0476 01F0      		breq .+2
 3260 0478 00C0      		rjmp .L196
 681:quantum/quantum.c ****             keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 3261               		.loc 1 681 13 view .LVU708
 681:quantum/quantum.c ****             keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 3262               		.loc 1 681 58 is_stmt 0 view .LVU709
 3263 047a 8091 0000 		lds r24,keymap_config+1
 681:quantum/quantum.c ****             keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 3264               		.loc 1 681 13 view .LVU710
 3265 047e 982F      		mov r25,r24
 3266 0480 9095      		com r25
 3267 0482 9170      		andi r25,lo8(1)
 681:quantum/quantum.c ****             keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 3268               		.loc 1 681 42 view .LVU711
 3269 0484 8E7F      		andi r24,lo8(-2)
 682:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3270               		.loc 1 682 13 is_stmt 1 view .LVU712
 682:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3271               		.loc 1 682 42 is_stmt 0 view .LVU713
 3272 0486 892B      		or r24,r25
 3273 0488 90FB      		bst r25,0
 3274 048a 81F9      		bld r24,1
 3275 048c 00C0      		rjmp .L321
 3276               	.L194:
 586:quantum/quantum.c ****             break;
 3277               		.loc 1 586 13 is_stmt 1 view .LVU714
 586:quantum/quantum.c ****             break;
 3278               		.loc 1 586 49 is_stmt 0 view .LVU715
 3279 048e 8091 0000 		lds r24,keymap_config
 3280 0492 8160      		ori r24,lo8(1<<0)
 3281               	.L320:
 692:quantum/quantum.c ****             break;
 3282               		.loc 1 692 32 view .LVU716
 3283 0494 8093 0000 		sts keymap_config,r24
 693:quantum/quantum.c ****           default:
 3284               		.loc 1 693 13 is_stmt 1 view .LVU717
 3285 0498 00C0      		rjmp .L196
 3286               	.L192:
 592:quantum/quantum.c ****             break;
 3287               		.loc 1 592 13 view .LVU718
 592:quantum/quantum.c ****             break;
 3288               		.loc 1 592 42 is_stmt 0 view .LVU719
 3289 049a 8091 0000 		lds r24,keymap_config
 3290 049e 8460      		ori r24,lo8(1<<2)
 3291 04a0 00C0      		rjmp .L320
 3292               	.L318:
 595:quantum/quantum.c ****             break;
 3293               		.loc 1 595 13 is_stmt 1 view .LVU720
 595:quantum/quantum.c ****             break;
 3294               		.loc 1 595 42 is_stmt 0 view .LVU721
 3295 04a2 8091 0000 		lds r24,keymap_config
 3296 04a6 8860      		ori r24,lo8(1<<3)
 3297 04a8 00C0      		rjmp .L320
 3298               	.L207:
 598:quantum/quantum.c ****             break;
 3299               		.loc 1 598 13 is_stmt 1 view .LVU722
 598:quantum/quantum.c ****             break;
 3300               		.loc 1 598 42 is_stmt 0 view .LVU723
 3301 04aa 8091 0000 		lds r24,keymap_config+1
 3302 04ae 8160      		ori r24,lo8(1<<0)
 3303 04b0 00C0      		rjmp .L321
 3304               	.L218:
 601:quantum/quantum.c ****             break;
 3305               		.loc 1 601 13 is_stmt 1 view .LVU724
 601:quantum/quantum.c ****             break;
 3306               		.loc 1 601 42 is_stmt 0 view .LVU725
 3307 04b2 8091 0000 		lds r24,keymap_config+1
 3308 04b6 8260      		ori r24,lo8(1<<1)
 3309 04b8 00C0      		rjmp .L321
 3310               	.L190:
 610:quantum/quantum.c ****             break;
 3311               		.loc 1 610 13 is_stmt 1 view .LVU726
 610:quantum/quantum.c ****             break;
 3312               		.loc 1 610 52 is_stmt 0 view .LVU727
 3313 04ba 8091 0000 		lds r24,keymap_config
 3314 04be 8064      		ori r24,lo8(1<<6)
 3315 04c0 00C0      		rjmp .L320
 3316               	.L202:
 613:quantum/quantum.c ****             break;
 3317               		.loc 1 613 13 is_stmt 1 view .LVU728
 613:quantum/quantum.c ****             break;
 3318               		.loc 1 613 32 is_stmt 0 view .LVU729
 3319 04c2 8091 0000 		lds r24,keymap_config
 3320 04c6 8068      		ori r24,lo8(1<<7)
 3321 04c8 00C0      		rjmp .L320
 3322               	.L221:
 622:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3323               		.loc 1 622 13 is_stmt 1 view .LVU730
 622:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3324               		.loc 1 622 42 is_stmt 0 view .LVU731
 3325 04ca 8091 0000 		lds r24,keymap_config+1
 3326 04ce 8360      		ori r24,lo8(3)
 3327 04d0 00C0      		rjmp .L321
 3328               	.L200:
 628:quantum/quantum.c ****             break;
 3329               		.loc 1 628 13 is_stmt 1 view .LVU732
 628:quantum/quantum.c ****             break;
 3330               		.loc 1 628 49 is_stmt 0 view .LVU733
 3331 04d2 8091 0000 		lds r24,keymap_config
 3332 04d6 8E7F      		andi r24,lo8(~(1<<0))
 3333 04d8 00C0      		rjmp .L320
 3334               	.L216:
 643:quantum/quantum.c ****             break;
 3335               		.loc 1 643 13 is_stmt 1 view .LVU734
 643:quantum/quantum.c ****             break;
 3336               		.loc 1 643 42 is_stmt 0 view .LVU735
 3337 04da 8091 0000 		lds r24,keymap_config+1
 3338 04de 8D7F      		andi r24,lo8(~(1<<1))
 3339 04e0 00C0      		rjmp .L321
 3340               	.L188:
 646:quantum/quantum.c ****             break;
 3341               		.loc 1 646 13 is_stmt 1 view .LVU736
 646:quantum/quantum.c ****             break;
 3342               		.loc 1 646 34 is_stmt 0 view .LVU737
 3343 04e2 8091 0000 		lds r24,keymap_config
 3344 04e6 8F7E      		andi r24,lo8(~(1<<4))
 3345 04e8 00C0      		rjmp .L320
 3346               	.L211:
 649:quantum/quantum.c ****             break;
 3347               		.loc 1 649 13 is_stmt 1 view .LVU738
 649:quantum/quantum.c ****             break;
 3348               		.loc 1 649 42 is_stmt 0 view .LVU739
 3349 04ea 8091 0000 		lds r24,keymap_config
 3350 04ee 8F7D      		andi r24,lo8(~(1<<5))
 3351 04f0 00C0      		rjmp .L320
 3352               	.L209:
 655:quantum/quantum.c ****             break;
 3353               		.loc 1 655 13 is_stmt 1 view .LVU740
 655:quantum/quantum.c ****             break;
 3354               		.loc 1 655 32 is_stmt 0 view .LVU741
 3355 04f2 8091 0000 		lds r24,keymap_config
 3356 04f6 8F77      		andi r24,lo8(~(1<<7))
 3357 04f8 00C0      		rjmp .L320
 3358               	.L214:
 658:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3359               		.loc 1 658 13 is_stmt 1 view .LVU742
 658:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3360               		.loc 1 658 42 is_stmt 0 view .LVU743
 3361 04fa 8091 0000 		lds r24,keymap_config
 3362 04fe 837F      		andi r24,lo8(-13)
 3363 0500 00C0      		rjmp .L320
 3364               	.L220:
 664:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3365               		.loc 1 664 13 is_stmt 1 view .LVU744
 664:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 3366               		.loc 1 664 42 is_stmt 0 view .LVU745
 3367 0502 8091 0000 		lds r24,keymap_config+1
 3368 0506 8C7F      		andi r24,lo8(-4)
 3369 0508 00C0      		rjmp .L321
 3370               	.L213:
 692:quantum/quantum.c ****             break;
 3371               		.loc 1 692 13 is_stmt 1 view .LVU746
 692:quantum/quantum.c ****             break;
 3372               		.loc 1 692 48 is_stmt 0 view .LVU747
 3373 050a 9091 0000 		lds r25,keymap_config
 692:quantum/quantum.c ****             break;
 3374               		.loc 1 692 32 view .LVU748
 3375 050e 892F      		mov r24,r25
 3376 0510 97FB      		bst r25,7
 3377 0512 87F9      		bld r24,7
 3378 0514 8058      		subi r24,0x80
 3379 0516 00C0      		rjmp .L320
 3380               	.L152:
 3381               	.LBB73:
 705:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 3382               		.loc 1 705 7 is_stmt 1 view .LVU749
 705:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 3383               		.loc 1 705 25 is_stmt 0 view .LVU750
 3384 0518 0E94 0000 		call get_mods
 3385               	.LVL283:
 738:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 3386               		.loc 1 738 7 is_stmt 1 view .LVU751
 738:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 3387               		.loc 1 738 10 is_stmt 0 view .LVU752
 3388 051c F801      		movw r30,r16
 3389 051e 9281      		ldd r25,Z+2
 3390 0520 9923      		tst r25
 3391 0522 01F0      		breq .L223
 705:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 3392               		.loc 1 705 15 view .LVU753
 3393 0524 8A7A      		andi r24,lo8(-86)
 3394               	.LVL284:
 739:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 3395               		.loc 1 739 9 is_stmt 1 view .LVU754
 739:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 3396               		.loc 1 739 31 is_stmt 0 view .LVU755
 3397 0526 91E0      		ldi r25,lo8(1)
 3398 0528 01F4      		brne .L224
 3399 052a 90E0      		ldi r25,0
 3400               	.L224:
 3401 052c 9093 0000 		sts grave_esc_was_shifted,r25
 740:quantum/quantum.c ****       }
 3402               		.loc 1 740 9 is_stmt 1 view .LVU756
 3403 0530 8111      		cpse r24,__zero_reg__
 3404 0532 00C0      		rjmp .L228
 3405 0534 89E2      		ldi r24,lo8(41)
 3406               	.LVL285:
 3407               	.L225:
 740:quantum/quantum.c ****       }
 3408               		.loc 1 740 9 is_stmt 0 discriminator 4 view .LVU757
 3409 0536 0E94 0000 		call add_key
 3410               	.LVL286:
 3411               	.L226:
 746:quantum/quantum.c ****       return false;
 3412               		.loc 1 746 7 is_stmt 1 view .LVU758
 3413 053a 0E94 0000 		call send_keyboard_report
 3414               	.LVL287:
 747:quantum/quantum.c ****     }
 3415               		.loc 1 747 7 view .LVU759
 747:quantum/quantum.c ****     }
 3416               		.loc 1 747 14 is_stmt 0 view .LVU760
 3417 053e 00C0      		rjmp .L139
 3418               	.LVL288:
 3419               	.L228:
 740:quantum/quantum.c ****       }
 3420               		.loc 1 740 9 view .LVU761
 3421 0540 85E3      		ldi r24,lo8(53)
 3422               	.LVL289:
 740:quantum/quantum.c ****       }
 3423               		.loc 1 740 9 view .LVU762
 3424 0542 00C0      		rjmp .L225
 3425               	.LVL290:
 3426               	.L223:
 743:quantum/quantum.c ****       }
 3427               		.loc 1 743 9 is_stmt 1 view .LVU763
 3428 0544 8091 0000 		lds r24,grave_esc_was_shifted
 3429               	.LVL291:
 743:quantum/quantum.c ****       }
 3430               		.loc 1 743 9 is_stmt 0 view .LVU764
 3431 0548 8111      		cpse r24,__zero_reg__
 3432 054a 00C0      		rjmp .L229
 3433 054c 89E2      		ldi r24,lo8(41)
 3434               	.L227:
 743:quantum/quantum.c ****       }
 3435               		.loc 1 743 9 discriminator 4 view .LVU765
 3436 054e 0E94 0000 		call del_key
 3437               	.LVL292:
 3438 0552 00C0      		rjmp .L226
 3439               	.L229:
 743:quantum/quantum.c ****       }
 3440               		.loc 1 743 9 view .LVU766
 3441 0554 85E3      		ldi r24,lo8(53)
 3442 0556 00C0      		rjmp .L227
 3443               	.LBE73:
 3444               		.cfi_endproc
 3445               	.LFE31:
 3447               		.section	.progmem.data.__c.3730,"a"
 3450               	__c.3730:
 3451 0000 4445 4255 		.string	"DEBUG: disabled.\n"
 3451      473A 2064 
 3451      6973 6162 
 3451      6C65 642E 
 3451      0A00 
 3452               		.section	.progmem.data.__c.3728,"a"
 3455               	__c.3728:
 3456 0000 4445 4255 		.string	"DEBUG: enabled.\n"
 3456      473A 2065 
 3456      6E61 626C 
 3456      6564 2E0A 
 3456      00
 3457               		.weak	ascii_to_keycode_lut
 3458               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 3461               	ascii_to_keycode_lut:
 3462 0000 00        		.byte	0
 3463 0001 00        		.byte	0
 3464 0002 00        		.byte	0
 3465 0003 00        		.byte	0
 3466 0004 00        		.byte	0
 3467 0005 00        		.byte	0
 3468 0006 00        		.byte	0
 3469 0007 00        		.byte	0
 3470 0008 2A        		.byte	42
 3471 0009 2B        		.byte	43
 3472 000a 28        		.byte	40
 3473 000b 00        		.byte	0
 3474 000c 00        		.byte	0
 3475 000d 00        		.byte	0
 3476 000e 00        		.byte	0
 3477 000f 00        		.byte	0
 3478 0010 00        		.byte	0
 3479 0011 00        		.byte	0
 3480 0012 00        		.byte	0
 3481 0013 00        		.byte	0
 3482 0014 00        		.byte	0
 3483 0015 00        		.byte	0
 3484 0016 00        		.byte	0
 3485 0017 00        		.byte	0
 3486 0018 00        		.byte	0
 3487 0019 00        		.byte	0
 3488 001a 00        		.byte	0
 3489 001b 29        		.byte	41
 3490 001c 00        		.byte	0
 3491 001d 00        		.byte	0
 3492 001e 00        		.byte	0
 3493 001f 00        		.byte	0
 3494 0020 2C        		.byte	44
 3495 0021 1E        		.byte	30
 3496 0022 34        		.byte	52
 3497 0023 20        		.byte	32
 3498 0024 21        		.byte	33
 3499 0025 22        		.byte	34
 3500 0026 24        		.byte	36
 3501 0027 34        		.byte	52
 3502 0028 26        		.byte	38
 3503 0029 27        		.byte	39
 3504 002a 25        		.byte	37
 3505 002b 2E        		.byte	46
 3506 002c 36        		.byte	54
 3507 002d 2D        		.byte	45
 3508 002e 37        		.byte	55
 3509 002f 38        		.byte	56
 3510 0030 27        		.byte	39
 3511 0031 1E        		.byte	30
 3512 0032 1F        		.byte	31
 3513 0033 20        		.byte	32
 3514 0034 21        		.byte	33
 3515 0035 22        		.byte	34
 3516 0036 23        		.byte	35
 3517 0037 24        		.byte	36
 3518 0038 25        		.byte	37
 3519 0039 26        		.byte	38
 3520 003a 33        		.byte	51
 3521 003b 33        		.byte	51
 3522 003c 36        		.byte	54
 3523 003d 2E        		.byte	46
 3524 003e 37        		.byte	55
 3525 003f 38        		.byte	56
 3526 0040 1F        		.byte	31
 3527 0041 04        		.byte	4
 3528 0042 05        		.byte	5
 3529 0043 06        		.byte	6
 3530 0044 07        		.byte	7
 3531 0045 08        		.byte	8
 3532 0046 09        		.byte	9
 3533 0047 0A        		.byte	10
 3534 0048 0B        		.byte	11
 3535 0049 0C        		.byte	12
 3536 004a 0D        		.byte	13
 3537 004b 0E        		.byte	14
 3538 004c 0F        		.byte	15
 3539 004d 10        		.byte	16
 3540 004e 11        		.byte	17
 3541 004f 12        		.byte	18
 3542 0050 13        		.byte	19
 3543 0051 14        		.byte	20
 3544 0052 15        		.byte	21
 3545 0053 16        		.byte	22
 3546 0054 17        		.byte	23
 3547 0055 18        		.byte	24
 3548 0056 19        		.byte	25
 3549 0057 1A        		.byte	26
 3550 0058 1B        		.byte	27
 3551 0059 1C        		.byte	28
 3552 005a 1D        		.byte	29
 3553 005b 2F        		.byte	47
 3554 005c 31        		.byte	49
 3555 005d 30        		.byte	48
 3556 005e 23        		.byte	35
 3557 005f 2D        		.byte	45
 3558 0060 35        		.byte	53
 3559 0061 04        		.byte	4
 3560 0062 05        		.byte	5
 3561 0063 06        		.byte	6
 3562 0064 07        		.byte	7
 3563 0065 08        		.byte	8
 3564 0066 09        		.byte	9
 3565 0067 0A        		.byte	10
 3566 0068 0B        		.byte	11
 3567 0069 0C        		.byte	12
 3568 006a 0D        		.byte	13
 3569 006b 0E        		.byte	14
 3570 006c 0F        		.byte	15
 3571 006d 10        		.byte	16
 3572 006e 11        		.byte	17
 3573 006f 12        		.byte	18
 3574 0070 13        		.byte	19
 3575 0071 14        		.byte	20
 3576 0072 15        		.byte	21
 3577 0073 16        		.byte	22
 3578 0074 17        		.byte	23
 3579 0075 18        		.byte	24
 3580 0076 19        		.byte	25
 3581 0077 1A        		.byte	26
 3582 0078 1B        		.byte	27
 3583 0079 1C        		.byte	28
 3584 007a 1D        		.byte	29
 3585 007b 2F        		.byte	47
 3586 007c 31        		.byte	49
 3587 007d 30        		.byte	48
 3588 007e 35        		.byte	53
 3589 007f 4C        		.byte	76
 3590               		.weak	ascii_to_altgr_lut
 3591               		.section	.progmem.data.ascii_to_altgr_lut,"a"
 3594               	ascii_to_altgr_lut:
 3595 0000 0000 0000 		.zero	128
 3595      0000 0000 
 3595      0000 0000 
 3595      0000 0000 
 3595      0000 0000 
 3596               		.weak	ascii_to_shift_lut
 3597               		.section	.progmem.data.ascii_to_shift_lut,"a"
 3600               	ascii_to_shift_lut:
 3601 0000 00        		.byte	0
 3602 0001 00        		.byte	0
 3603 0002 00        		.byte	0
 3604 0003 00        		.byte	0
 3605 0004 00        		.byte	0
 3606 0005 00        		.byte	0
 3607 0006 00        		.byte	0
 3608 0007 00        		.byte	0
 3609 0008 00        		.byte	0
 3610 0009 00        		.byte	0
 3611 000a 00        		.byte	0
 3612 000b 00        		.byte	0
 3613 000c 00        		.byte	0
 3614 000d 00        		.byte	0
 3615 000e 00        		.byte	0
 3616 000f 00        		.byte	0
 3617 0010 00        		.byte	0
 3618 0011 00        		.byte	0
 3619 0012 00        		.byte	0
 3620 0013 00        		.byte	0
 3621 0014 00        		.byte	0
 3622 0015 00        		.byte	0
 3623 0016 00        		.byte	0
 3624 0017 00        		.byte	0
 3625 0018 00        		.byte	0
 3626 0019 00        		.byte	0
 3627 001a 00        		.byte	0
 3628 001b 00        		.byte	0
 3629 001c 00        		.byte	0
 3630 001d 00        		.byte	0
 3631 001e 00        		.byte	0
 3632 001f 00        		.byte	0
 3633 0020 00        		.byte	0
 3634 0021 01        		.byte	1
 3635 0022 01        		.byte	1
 3636 0023 01        		.byte	1
 3637 0024 01        		.byte	1
 3638 0025 01        		.byte	1
 3639 0026 01        		.byte	1
 3640 0027 00        		.byte	0
 3641 0028 01        		.byte	1
 3642 0029 01        		.byte	1
 3643 002a 01        		.byte	1
 3644 002b 01        		.byte	1
 3645 002c 00        		.byte	0
 3646 002d 00        		.byte	0
 3647 002e 00        		.byte	0
 3648 002f 00        		.byte	0
 3649 0030 00        		.byte	0
 3650 0031 00        		.byte	0
 3651 0032 00        		.byte	0
 3652 0033 00        		.byte	0
 3653 0034 00        		.byte	0
 3654 0035 00        		.byte	0
 3655 0036 00        		.byte	0
 3656 0037 00        		.byte	0
 3657 0038 00        		.byte	0
 3658 0039 00        		.byte	0
 3659 003a 01        		.byte	1
 3660 003b 00        		.byte	0
 3661 003c 01        		.byte	1
 3662 003d 00        		.byte	0
 3663 003e 01        		.byte	1
 3664 003f 01        		.byte	1
 3665 0040 01        		.byte	1
 3666 0041 01        		.byte	1
 3667 0042 01        		.byte	1
 3668 0043 01        		.byte	1
 3669 0044 01        		.byte	1
 3670 0045 01        		.byte	1
 3671 0046 01        		.byte	1
 3672 0047 01        		.byte	1
 3673 0048 01        		.byte	1
 3674 0049 01        		.byte	1
 3675 004a 01        		.byte	1
 3676 004b 01        		.byte	1
 3677 004c 01        		.byte	1
 3678 004d 01        		.byte	1
 3679 004e 01        		.byte	1
 3680 004f 01        		.byte	1
 3681 0050 01        		.byte	1
 3682 0051 01        		.byte	1
 3683 0052 01        		.byte	1
 3684 0053 01        		.byte	1
 3685 0054 01        		.byte	1
 3686 0055 01        		.byte	1
 3687 0056 01        		.byte	1
 3688 0057 01        		.byte	1
 3689 0058 01        		.byte	1
 3690 0059 01        		.byte	1
 3691 005a 01        		.byte	1
 3692 005b 00        		.byte	0
 3693 005c 00        		.byte	0
 3694 005d 00        		.byte	0
 3695 005e 01        		.byte	1
 3696 005f 01        		.byte	1
 3697 0060 00        		.byte	0
 3698 0061 00        		.byte	0
 3699 0062 00        		.byte	0
 3700 0063 00        		.byte	0
 3701 0064 00        		.byte	0
 3702 0065 00        		.byte	0
 3703 0066 00        		.byte	0
 3704 0067 00        		.byte	0
 3705 0068 00        		.byte	0
 3706 0069 00        		.byte	0
 3707 006a 00        		.byte	0
 3708 006b 00        		.byte	0
 3709 006c 00        		.byte	0
 3710 006d 00        		.byte	0
 3711 006e 00        		.byte	0
 3712 006f 00        		.byte	0
 3713 0070 00        		.byte	0
 3714 0071 00        		.byte	0
 3715 0072 00        		.byte	0
 3716 0073 00        		.byte	0
 3717 0074 00        		.byte	0
 3718 0075 00        		.byte	0
 3719 0076 00        		.byte	0
 3720 0077 00        		.byte	0
 3721 0078 00        		.byte	0
 3722 0079 00        		.byte	0
 3723 007a 00        		.byte	0
 3724 007b 01        		.byte	1
 3725 007c 01        		.byte	1
 3726 007d 01        		.byte	1
 3727 007e 01        		.byte	1
 3728 007f 00        		.byte	0
 3729               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 3732               	grave_esc_was_shifted:
 3733 0000 00        		.zero	1
 3734               		.text
 3735               	.Letext0:
 3736               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/stdint.h"
 3737               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.3.0/lib/avr-gcc/8/gcc/avr/8.3.0/include/stddef.h"
 3738               		.file 5 "tmk_core/common/keyboard.h"
 3739               		.file 6 "tmk_core/common/action.h"
 3740               		.file 7 "tmk_core/common/report.h"
 3741               		.file 8 "tmk_core/common/host.h"
 3742               		.file 9 "tmk_core/common/avr/xprintf.h"
 3743               		.file 10 "tmk_core/common/debug.h"
 3744               		.file 11 "quantum/keycode_config.h"
 3745               		.file 12 "tmk_core/common/keycode.h"
 3746               		.file 13 "quantum/quantum_keycodes.h"
 3747               		.file 14 "quantum/keymap.h"
 3748               		.file 15 "tmk_core/common/backlight.h"
 3749               		.file 16 "quantum/rgblight.h"
 3750               		.file 17 "./quantum/color.h"
 3751               		.file 18 "tmk_core/common/action_layer.h"
 3752               		.file 19 "tmk_core/common/timer.h"
 3753               		.file 20 "tmk_core/common/action_util.h"
 3754               		.file 21 "/usr/local/Cellar/avr-gcc@8/8.3.0/avr/include/stdlib.h"
 3755               		.file 22 "quantum/quantum.h"
 3756               		.file 23 "tmk_core/protocol/lufa/outputselect.h"
 3757               		.file 24 "tmk_core/common/eeconfig.h"
 3758               		.file 25 "tmk_core/common/matrix.h"
 3759               		.file 26 "tmk_core/common/bootloader.h"
 3760               		.file 27 "quantum/process_keycode/process_space_cadet.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:4      *ABS*:000000000000003f __SREG__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:145    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:177    .text.qk_register_mods:0000000000000000 qk_register_mods
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:190    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:222    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:236    .text.register_code16:0000000000000000 register_code16
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:294    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:352    .text.tap_code16:0000000000000000 tap_code16
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:391    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:413    .text.process_record_user:0000000000000000 process_record_user
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:435    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:455    .text.get_event_keycode:0000000000000000 get_event_keycode
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:562    .text.get_record_keycode:0000000000000000 get_record_keycode
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:591    .text.send_char:0000000000000000 send_char
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:3461   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:3600   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:3594   .progmem.data.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:750    .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:927    .text.send_string:0000000000000000 send_string
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:947    .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1175   .text.send_string_P:0000000000000000 send_string_P
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1195   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1247   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1420   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1462   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1597   .text.bootmagic_lite:0000000000000000 bootmagic_lite
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1656   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1674   .text.backlight_on:0000000000000000 backlight_on
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1713   .text.backlight_off:0000000000000000 backlight_off
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1750   .text.backlight_set:0000000000000000 backlight_set
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1929   .text.backlight_task:0000000000000000 backlight_task
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1947   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:1984   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2015   .text.send_nibble:0000000000000000 send_nibble
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2080   .text.send_byte:0000000000000000 send_byte
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2120   .text.send_word:0000000000000000 send_word
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2157   .text.send_dword:0000000000000000 send_dword
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2205   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2250   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2268   .text.led_set_user:0000000000000000 led_set_user
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2286   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2305   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2322   .text.led_set:0000000000000000 led_set
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2341   .text.startup_user:0000000000000000 startup_user
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2356   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2371   .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:2418   .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:3455   .progmem.data.__c.3728:0000000000000000 __c.3728
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:3450   .progmem.data.__c.3730:0000000000000000 __c.3730
/var/folders/kv/ylqhzlcd2rs16mxjtd8q7x600000gn/T//ccO9XDST.s:3732   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
read_source_layers_cache
tap_code
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
matrix_scan
matrix_get_row
eeconfig_disable
bootloader_jump
matrix_scan_kb
__umulhisi3
__udivmodhi4
__udivmodsi4
__mulsi3
backlight_init
eeconfig_is_enabled
eeconfig_init
matrix_init_kb
clear_keyboard
process_space_cadet
rgblight_toggle
rgblight_decrease_hue
rgblight_decrease_val
rgblight_get_mode
set_output
eeconfig_read_keymap
keymap_config
eeconfig_update_keymap
debug_config
xputs
get_mods
rgblight_step_reverse
rgblight_step
rgblight_increase_hue
rgblight_increase_sat
rgblight_decrease_sat
rgblight_increase_val
rgblight_increase_speed
rgblight_decrease_speed
rgblight_mode
add_key
del_key
__do_clear_bss
